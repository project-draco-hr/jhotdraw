{
  super(cm,deviceBounds,userBounds,t,hints,fractions,colors,cycleMethod,colorSpace);
  Point2D.Float start=new Point2D.Float((float)dStart.getX(),(float)dStart.getY());
  Point2D.Float end=new Point2D.Float((float)dEnd.getX(),(float)dEnd.getY());
  float dx=end.x - start.x;
  float dy=end.y - start.y;
  float dSq=dx * dx + dy * dy;
  float constX=dx / dSq;
  float constY=dy / dSq;
  dgdX=a00 * constX + a10 * constY;
  dgdY=a01 * constX + a11 * constY;
  float dgdXAbs=Math.abs(dgdX);
  float dgdYAbs=Math.abs(dgdY);
  if (dgdXAbs > dgdYAbs)   pixSz=dgdXAbs;
 else   pixSz=dgdYAbs;
  gc=(a02 - start.x) * constX + (a12 - start.y) * constY;
  Object colorRend=(hints == null) ? RenderingHints.VALUE_COLOR_RENDER_QUALITY : hints.get(RenderingHints.KEY_COLOR_RENDERING);
  Object rend=(hints == null) ? RenderingHints.VALUE_RENDER_QUALITY : hints.get(RenderingHints.KEY_RENDERING);
  fillMethod=DEFAULT_IMPL;
  if ((cycleMethod == MultipleGradientPaint.REPEAT) || hasDiscontinuity) {
    if (rend == RenderingHints.VALUE_RENDER_QUALITY)     fillMethod=ANTI_ALIAS_IMPL;
    if (colorRend == RenderingHints.VALUE_COLOR_RENDER_SPEED)     fillMethod=DEFAULT_IMPL;
 else     if (colorRend == RenderingHints.VALUE_COLOR_RENDER_QUALITY)     fillMethod=ANTI_ALIAS_IMPL;
  }
}
