{
  try {
    Method method=obj.getClass().getMethod(methodName,clazz);
    return method.invoke(obj,newValue);
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + " is not accessible");
  }
catch (  InvocationTargetException e) {
    InternalError error=new InternalError(e.getMessage());
    error.initCause((e.getCause() != null) ? e.getCause() : e);
    throw error;
  }
}
