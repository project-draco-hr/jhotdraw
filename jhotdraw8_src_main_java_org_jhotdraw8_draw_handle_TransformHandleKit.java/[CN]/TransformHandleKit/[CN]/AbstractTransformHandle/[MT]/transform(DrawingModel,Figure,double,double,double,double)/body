{
  if (width == 0 || height == 0) {
    return;
  }
  TransformableFigure owner=(TransformableFigure)o;
  Bounds oldBounds=startBounds;
  List<Transform> oldTransforms=startTransforms;
  double sx=width / oldBounds.getWidth();
  double sy=height / oldBounds.getHeight();
  double tx=x - oldBounds.getMinX();
  double ty=y - oldBounds.getMinY();
  Transform transform=new Translate(tx,ty);
  if (!Double.isNaN(sx) && !Double.isNaN(sy) && !Double.isInfinite(sx)&& !Double.isInfinite(sy)&& (sx != 1d || sy != 1d)) {
    transform=Transforms.concat(transform,new Scale(sx,sy,oldBounds.getMinX(),oldBounds.getMinY()));
  }
switch (oldTransforms.size()) {
case 0:
    model.set(owner,TRANSFORMS,ImmutableObservableList.of(transform));
  break;
default :
int last=oldTransforms.size() - 1;
model.set(owner,TRANSFORMS,ImmutableObservableList.set(oldTransforms,last,Transforms.concat(oldTransforms.get(last),transform)));
break;
}
}
