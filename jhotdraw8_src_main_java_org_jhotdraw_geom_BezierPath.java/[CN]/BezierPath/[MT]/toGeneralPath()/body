{
  Path2D.Double gp=new Path2D.Double();
  gp.setWindingRule(windingRule);
  if (size() == 0) {
    gp.moveTo(0,0);
    gp.lineTo(0,0 + 1);
  }
 else   if (size() == 1) {
    Node current=get(0);
    gp.moveTo(current.x[0],current.y[0]);
    gp.lineTo(current.x[0],current.y[0] + 1);
  }
 else {
    Node previous;
    Node current;
    previous=current=get(0);
    gp.moveTo(current.x[0],current.y[0]);
    for (int i=1, n=size(); i < n; i++) {
      previous=current;
      current=get(i);
      if ((previous.mask & C2_MASK) == 0) {
        if ((current.mask & C1_MASK) == 0) {
          if (current.moveTo) {
            if (previous.closed) {
              gp.closePath();
            }
            gp.moveTo(current.x[0],current.y[0]);
          }
 else {
            gp.lineTo(current.x[0],current.y[0]);
          }
        }
 else {
          gp.quadTo(current.x[1],current.y[1],current.x[0],current.y[0]);
        }
      }
 else       if ((current.mask & C1_MASK) == 0) {
        gp.quadTo(previous.x[2],previous.y[2],current.x[0],current.y[0]);
      }
 else {
        gp.curveTo(previous.x[2],previous.y[2],current.x[1],current.y[1],current.x[0],current.y[0]);
      }
    }
    if (isClosed()) {
      if (size() > 1) {
        previous=get(size() - 1);
        current=get(0);
        if ((previous.mask & C2_MASK) == 0) {
          if ((current.mask & C1_MASK) == 0) {
            gp.lineTo(current.x[0],current.y[0]);
          }
 else {
            gp.quadTo(current.x[1],current.y[1],current.x[0],current.y[0]);
          }
        }
 else         if ((current.mask & C1_MASK) == 0) {
          gp.quadTo(previous.x[2],previous.y[2],current.x[0],current.y[0]);
        }
 else {
          gp.curveTo(previous.x[2],previous.y[2],current.x[1],current.y[1],current.x[0],current.y[0]);
        }
      }
      gp.closePath();
    }
  }
  return gp;
}
