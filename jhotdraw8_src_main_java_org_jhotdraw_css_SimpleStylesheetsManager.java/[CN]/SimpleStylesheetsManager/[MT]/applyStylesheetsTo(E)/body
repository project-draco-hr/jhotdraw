{
  SelectorModel<E> selectorModel=getSelectorModel();
  for (  Map.Entry<String,String> entry : collectApplicableDeclarations(elem,getUserAgentStylesheets(),new HashMap<String,String>()).entrySet()) {
    selectorModel.setAttribute(elem,StyleOrigin.USER_AGENT,entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<String,String> entry : collectApplicableDeclarations(elem,getAuthorStylesheets(),new HashMap<String,String>()).entrySet()) {
    selectorModel.setAttribute(elem,StyleOrigin.AUTHOR,entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<String,String> entry : collectApplicableDeclarations(elem,getInlineStylesheets(),collectApplicableDeclarations(elem,getAuthorStylesheets(),new HashMap<String,String>())).entrySet()) {
    selectorModel.setAttribute(elem,StyleOrigin.INLINE,entry.getKey(),entry.getValue());
  }
  HashMap<String,String> applicableDeclarations=new HashMap<>();
  if (selectorModel.hasAttribute(elem,"style")) {
    String styleValue=selectorModel.getAttribute(elem,"style");
    try {
      for (      Declaration d : parser.parseDeclarationList(styleValue)) {
        if (d.getTerms().isEmpty()) {
          continue;
        }
        applicableDeclarations.put(d.getProperty(),d.getTermsAsString());
      }
    }
 catch (    IOException ex) {
      System.err.println("DOMStyleManager: Invalid style attribute on element. style=" + styleValue);
      ex.printStackTrace();
    }
  }
  for (  Map.Entry<String,String> entry : applicableDeclarations.entrySet()) {
    selectorModel.setAttribute(elem,StyleOrigin.INLINE,entry.getKey(),entry.getValue());
  }
  applicableDeclarations.clear();
}
