{
  if (isAnimated() && isShowAsSheet() && !isNativeSheetSupported()) {
    installSheet();
    getContentPane().setVisible(false);
    final long startTime=System.currentTimeMillis();
    final long endTime=startTime + 300;
    final Rectangle endBounds=getBounds();
    int parentWidth=getParent().getWidth();
    final Rectangle startBounds=new Rectangle((parentWidth < endBounds.width) ? endBounds.x + (endBounds.width - parentWidth) / 2 : endBounds.x,endBounds.y,Math.min(endBounds.width,parentWidth),0);
    setBounds(startBounds);
    if (!isDocumentModalitySupported()) {
      ((Window)getParent()).toFront();
    }
    show0();
    final Timer timer=new Timer(20,null);
    timer.addActionListener(new ActionListener(){
      long startTime;
      long endTime;
      public void actionPerformed(      ActionEvent evt){
        long now=System.currentTimeMillis();
        if (startTime == 0) {
          startTime=now;
          endTime=startTime + 200;
        }
        if (now > endTime) {
          timer.stop();
          setBounds(endBounds);
          getContentPane().setVisible(true);
          Component c=getFocusTraversalPolicy().getInitialComponent(JSheet.this);
          if (c != null) {
            c.requestFocus();
          }
 else {
            getContentPane().requestFocus();
          }
        }
 else {
          float ratio=(now - startTime) / (float)(endTime - startTime);
          setBounds((int)(startBounds.x * (1f - ratio) + endBounds.x * ratio),(int)(startBounds.y * (1f - ratio) + endBounds.y * ratio),(int)(startBounds.width * (1f - ratio) + endBounds.width * ratio),(int)(startBounds.height * (1f - ratio) + endBounds.height * ratio));
        }
      }
    }
);
    timer.setRepeats(true);
    timer.setInitialDelay(5);
    timer.start();
  }
 else {
    installSheet();
    show0();
  }
  requestUserAttention(true);
}
