{
  final int duration=((Number)durationSpinner.getValue()).intValue();
  final boolean willFail=errorCheckBox.isSelected();
  final boolean willWarn=warningCheckBox.isSelected();
  String owner=ownerGroup.getSelection().getActionCommand();
  final ActivityModel pm=new DefaultActivityModel(owner,"Task #" + (++count) + ", in group "+ owner+ (willFail ? ", will fail" : "")+ (willWarn ? ", will warn" : ""));
  pm.setIndeterminate(false);
  pm.setCancelable(cancelableCheckBox.isSelected());
  pm.setNote("Waiting for processor");
  Runnable r=new Runnable(){
    @Override public void run(){
      try {
        pm.setNote("Working...");
        if (willWarn) {
          pm.setWarning("A warning occured.");
        }
        long startTime=System.currentTimeMillis();
        long endTime=startTime + duration * 1000;
        pm.setMaximum(duration);
        pm.setValue(0);
        pm.setIndeterminate(false);
        for (long now=startTime; now < endTime && !pm.isCanceled(); now=System.currentTimeMillis()) {
          pm.setValue(1 + (int)((now - startTime) * (pm.getMaximum() - pm.getMinimum()) / (endTime - startTime)) + pm.getMinimum());
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException ex) {
          }
          if (willFail & Math.random() < 0.3)           break;
        }
        if (pm.isCanceled()) {
          pm.setNote("Canceled.");
        }
 else {
          if (willFail) {
            pm.setNote(null);
            pm.setError("An error occured.");
          }
 else {
            pm.setNote("Done.");
            pm.setValue(pm.getMaximum());
          }
        }
      }
  finally {
        pm.close();
      }
    }
  }
;
  executor.execute(r);
}
