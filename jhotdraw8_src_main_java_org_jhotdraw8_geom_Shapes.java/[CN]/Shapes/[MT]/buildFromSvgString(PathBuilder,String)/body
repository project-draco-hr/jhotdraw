{
  try {
    Point2D.Double p=new Point2D.Double();
    Point2D.Double c1=new Point2D.Double();
    Point2D.Double c2=new Point2D.Double();
    StreamPosTokenizer tt=new StreamPosTokenizer(new StringReader(str));
    tt.resetSyntax();
    tt.parseNumbers();
    tt.parseExponents();
    tt.parsePlusAsNumber();
    tt.whitespaceChars(0,' ');
    tt.whitespaceChars(',',',');
    char nextCommand='M';
    char command='M';
    Commands:     while (tt.nextToken() != StreamPosTokenizer.TT_EOF) {
      if (tt.ttype > 0) {
        command=(char)tt.ttype;
      }
 else {
        command=nextCommand;
        tt.pushBack();
      }
      BezierPath.Node node;
switch (command) {
case 'M':
        if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
          throw new IOException("x coordinate missing for 'M' at position " + tt.getStartPosition() + " in "+ str);
        }
      p.x=tt.nval;
    if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
      throw new IOException("y coordinate missing for 'M' at position " + tt.getStartPosition() + " in "+ str);
    }
  p.y=tt.nval;
builder.moveTo(p.x,p.y);
nextCommand='L';
break;
case 'm':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx coordinate missing for 'm' at position " + tt.getStartPosition() + " in "+ str);
}
p.x+=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy coordinate missing for 'm' at position " + tt.getStartPosition() + " in "+ str);
}
p.y+=tt.nval;
builder.moveTo(p.x,p.y);
nextCommand='l';
break;
case 'Z':
case 'z':
builder.closePath();
break;
case 'L':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x coordinate missing for 'L' at position " + tt.getStartPosition() + " in "+ str);
}
p.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y coordinate missing for 'L' at position " + tt.getStartPosition() + " in "+ str);
}
p.y=tt.nval;
builder.lineTo(p.x,p.y);
nextCommand='L';
break;
case 'l':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx coordinate missing for 'l' at position " + tt.getStartPosition() + " in "+ str);
}
p.x+=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy coordinate missing for 'l' at position " + tt.getStartPosition() + " in "+ str);
}
p.y+=tt.nval;
builder.lineTo(p.x,p.y);
nextCommand='l';
break;
case 'H':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x coordinate missing for 'H' at position " + tt.getStartPosition() + " in "+ str);
}
p.x=tt.nval;
builder.lineTo(p.x,p.y);
nextCommand='H';
break;
case 'h':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx coordinate missing for 'h' at position " + tt.getStartPosition() + " in "+ str);
}
p.x+=tt.nval;
builder.lineTo(p.x,p.y);
nextCommand='h';
break;
case 'V':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y coordinate missing for 'V' at position " + tt.getStartPosition() + " in "+ str);
}
p.y=tt.nval;
builder.lineTo(p.x,p.y);
nextCommand='V';
break;
case 'v':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy coordinate missing for 'v' at position " + tt.getStartPosition() + " in "+ str);
}
p.y+=tt.nval;
builder.lineTo(p.x,p.y);
nextCommand='v';
break;
case 'C':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x1 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);
}
c1.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y1 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);
}
c1.y=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x2 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);
}
c2.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y2 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);
}
c2.y=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);
}
p.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);
}
p.y=tt.nval;
builder.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);
nextCommand='C';
break;
case 'c':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx1 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);
}
c1.x=p.x + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy1 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);
}
c1.y=p.y + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx2 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);
}
c2.x=p.x + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy2 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);
}
c2.y=p.y + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);
}
p.x+=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);
}
p.y+=tt.nval;
builder.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);
nextCommand='c';
break;
case 'S':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x2 coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);
}
c2.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y2 coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);
}
c2.y=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);
}
p.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);
}
p.y=tt.nval;
builder.smoothCurveTo(c2.x,c2.y,p.x,p.y);
nextCommand='S';
break;
case 's':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx2 coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);
}
c2.x=p.x + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy2 coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);
}
c2.y=p.y + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);
}
p.x+=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);
}
p.y+=tt.nval;
builder.smoothCurveTo(c2.x,c2.y,p.x,p.y);
nextCommand='s';
break;
case 'Q':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x1 coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);
}
c1.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y1 coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);
}
c1.y=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);
}
p.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);
}
p.y=tt.nval;
builder.quadTo(c1.x,c1.y,p.x,p.y);
nextCommand='Q';
break;
case 'q':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx1 coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);
}
c1.x=p.x + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy1 coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);
}
c1.y=p.y + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);
}
p.x+=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);
}
p.y+=tt.nval;
builder.quadTo(c1.x,c1.y,p.x,p.y);
nextCommand='q';
break;
case 'T':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x coordinate missing for 'T' at position " + tt.getStartPosition() + " in "+ str);
}
p.x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y coordinate missing for 'T' at position " + tt.getStartPosition() + " in "+ str);
}
p.y=tt.nval;
builder.smoothQuadTo(p.x,p.y);
nextCommand='T';
break;
case 't':
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dx coordinate missing for 't' at position " + tt.getStartPosition() + " in "+ str);
}
p.x+=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("dy coordinate missing for 't' at position " + tt.getStartPosition() + " in "+ str);
}
p.y+=tt.nval;
builder.smoothQuadTo(p.x,p.y);
nextCommand='s';
break;
case 'A':
{
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("rx coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double rx=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("ry coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double ry=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x-axis-rotation missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double xAxisRotation=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("large-arc-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
boolean largeArcFlag=tt.nval != 0;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("sweep-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
boolean sweepFlag=tt.nval != 0;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double x=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double y=tt.nval;
builder.arcTo(rx,ry,xAxisRotation,x,y,largeArcFlag,sweepFlag);
p.x=x;
p.y=y;
nextCommand='A';
break;
}
case 'a':
{
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("rx coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double rx=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("ry coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double ry=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x-axis-rotation missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double xAxisRotation=tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("large-arc-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
boolean largeArcFlag=tt.nval != 0;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("sweep-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
boolean sweepFlag=tt.nval != 0;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("x coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double x=p.x + tt.nval;
if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
throw new IOException("y coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);
}
double y=p.y + tt.nval;
builder.arcTo(rx,ry,xAxisRotation,x,y,largeArcFlag,sweepFlag);
p.x=x;
p.y=y;
nextCommand='a';
break;
}
default :
throw new IOException("Illegal command: " + command);
}
}
}
 catch (IllegalPathStateException e) {
throw new IOException(e);
}
}
