{
  addFigureKeysAndNames("Layer",SimpleLayer.class,Figure.getDeclaredAndInheritedKeys(SimpleLayer.class));
  addFigureKeysAndNames("Rectangle",RectangleFigure.class,Figure.getDeclaredAndInheritedKeys(RectangleFigure.class));
  addFigureKeysAndNames("Group",GroupFigure.class,Figure.getDeclaredAndInheritedKeys(GroupFigure.class));
{
    Set<MapAccessor<?>> keys=Figure.getDeclaredAndInheritedKeys(SimpleDrawing.class);
    keys.remove(Drawing.USER_AGENT_STYLESHEETS);
    keys.remove(Drawing.AUTHOR_STYLESHEETS);
    keys.remove(Drawing.INLINE_STYLESHEETS);
    keys.remove(Drawing.DOCUMENT_HOME);
    addNodeListKey(TextFigure.class,"",TextFigure.TEXT);
    addFigureKeysAndNames("Drawing",SimpleDrawing.class,keys);
  }
{
    Set<MapAccessor<?>> keys=Figure.getDeclaredAndInheritedKeys(TextFigure.class);
    keys.remove(TextFigure.TEXT);
    addNodeListKey(TextFigure.class,"",TextFigure.TEXT);
    addFigureKeysAndNames("Text",TextFigure.class,keys);
  }
{
    Set<MapAccessor<?>> keys=Figure.getDeclaredAndInheritedKeys(LabelFigure.class);
    keys.remove(TextFigure.TEXT);
    addNodeListKey(LabelFigure.class,"",TextFigure.TEXT);
    addFigureKeysAndNames("Label",LabelFigure.class,keys);
  }
  addFigureKeysAndNames("Line",LineFigure.class,Figure.getDeclaredAndInheritedKeys(LineFigure.class));
  addFigureKeysAndNames("Ellipse",EllipseFigure.class,Figure.getDeclaredAndInheritedKeys(EllipseFigure.class));
  addFigureKeysAndNames("LineConnection",LineConnectionFigure.class,Figure.getDeclaredAndInheritedKeys(LineConnectionFigure.class));
  addFigureKeysAndNames("Image",ImageFigure.class,Figure.getDeclaredAndInheritedKeys(ImageFigure.class));
  addConverterForType(Rectangle2D.class,new Rectangle2DConverter());
  addConverterForType(String.class,new DefaultConverter());
  addConverterForType(Point2D.class,new XmlPoint2DConverter());
  addConverterForType(Point3D.class,new XmlPoint3DConverter());
  addConverterForType(SVGPath.class,new XmlSvgPathConverter());
  addConverterForType(Insets.class,new XmlInsetsConverter());
  addConverterForType(Double.class,new NumberConverter());
  addConverterForType(URL.class,new XmlUrlConverter());
  addConverterForType(URI.class,new XmlUriConverter());
  addConverterForType(Connector.class,new DefaultConnectorConverter());
  addConverterForType(Paint.class,new XmlPaintConverter());
  addConverterForType(Boolean.class,new XmlBooleanConverter());
  addConverterForType(TextAlignment.class,new XmlEnumConverter<TextAlignment>(TextAlignment.class));
  addConverterForType(VPos.class,new XmlEnumConverter<VPos>(VPos.class));
  addConverterForType(Font.class,new XmlFontConverter());
  addConverterForType(Rectangle2D.class,new XmlRectangle2DConverter());
  addConverter(StyleableFigure.STYLE_CLASS,new CssObservableWordListConverter());
  addConverter(StrokeableFigure.STROKE_DASH_ARRAY,new CssSizeListConverter());
  addConverter(StrokeableFigure.STROKE_LINE_CAP,new XmlEnumConverter<StrokeLineCap>(StrokeLineCap.class));
  addConverter(StrokeableFigure.STROKE_LINE_JOIN,new XmlEnumConverter<StrokeLineJoin>(StrokeLineJoin.class));
  addConverter(StrokeableFigure.STROKE_TYPE,new XmlEnumConverter<StrokeType>(StrokeType.class));
  removeKey(StyleableFigure.PSEUDO_CLASS_STATES);
  removeRedundantKeys();
  checkConverters();
}
