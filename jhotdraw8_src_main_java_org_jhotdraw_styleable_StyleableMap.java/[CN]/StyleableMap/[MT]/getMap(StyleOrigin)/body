{
  return new Map<K,V>(){
    @Override public int size(){
      throw new UnsupportedOperationException("Not supported.");
    }
    @Override public boolean isEmpty(){
      throw new UnsupportedOperationException("Not supported.");
    }
    @Override public boolean containsKey(    Object key){
      return StyleableMap.this.containsKey(origin,key);
    }
    @Override public boolean containsValue(    Object value){
      throw new UnsupportedOperationException("Not supported.");
    }
    @Override @SuppressWarnings("unchecked") public V get(    Object key){
      return StyleableMap.this.get(origin,(K)key);
    }
    @Override public V put(    K key,    V value){
      return StyleableMap.this.put(origin,key,value);
    }
    @Override @SuppressWarnings("unchecked") public V remove(    Object key){
      return StyleableMap.this.remove(origin,(K)key);
    }
    @Override public void putAll(    Map<? extends K,? extends V> m){
      throw new UnsupportedOperationException("Not supported.");
    }
    @Override public void clear(){
      throw new UnsupportedOperationException("Not supported.");
    }
    @Override public Set<K> keySet(){
      throw new UnsupportedOperationException("Not supported.");
    }
    @Override public Collection<V> values(){
      throw new UnsupportedOperationException("Not supported.");
    }
    @Override public Set<Entry<K,V>> entrySet(){
      throw new UnsupportedOperationException("Not supported.");
    }
  }
;
}
