{
  if (styledMap == null) {
    styledMap=new Map<K,V>(){
      @Override public int size(){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override public boolean isEmpty(){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override @SuppressWarnings("unchecked") public boolean containsKey(      Object key){
        return containsStyledKey((K)key);
      }
      @Override public boolean containsValue(      Object value){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override @SuppressWarnings("unchecked") public V get(      Object key){
        return getStyled((K)key);
      }
      @Override public V put(      K key,      V value){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override public V remove(      Object key){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override public void putAll(      Map<? extends K,? extends V> m){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override public void clear(){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override public Set<K> keySet(){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override public Collection<V> values(){
        throw new UnsupportedOperationException("Not supported.");
      }
      @Override public Set<Entry<K,V>> entrySet(){
        throw new UnsupportedOperationException("Not supported.");
      }
    }
;
  }
  return styledMap;
}
