{
  if (npoints <= 2 || !getBounds2D().contains(x,y)) {
    return false;
  }
  int hits=0;
  double lastx=xpoints[npoints - 1];
  double lasty=ypoints[npoints - 1];
  double curx, cury;
  for (int i=0; i < npoints; lastx=curx, lasty=cury, i++) {
    curx=xpoints[i];
    cury=ypoints[i];
    if (cury == lasty) {
      continue;
    }
    double leftx;
    if (curx < lastx) {
      if (x >= lastx) {
        continue;
      }
      leftx=curx;
    }
 else {
      if (x >= curx) {
        continue;
      }
      leftx=lastx;
    }
    double test1, test2;
    if (cury < lasty) {
      if (y < cury || y >= lasty) {
        continue;
      }
      if (x < leftx) {
        hits++;
        continue;
      }
      test1=x - curx;
      test2=y - cury;
    }
 else {
      if (y < lasty || y >= cury) {
        continue;
      }
      if (x < leftx) {
        hits++;
        continue;
      }
      test1=x - lastx;
      test2=y - lasty;
    }
    if (test1 < (test2 / (lasty - cury) * (lastx - curx))) {
      hits++;
    }
  }
  return ((hits & 1) != 0);
}
