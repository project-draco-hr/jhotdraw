{
  BezierPath bp=new BezierPath();
  GeneralPath left=new GeneralPath();
  GeneralPath right=new GeneralPath();
  double[] coords=new double[6];
  for (PathIterator i=s.getPathIterator(null,0.1d); !i.isDone(); i.next()) {
    int type=i.currentSegment(coords);
switch (type) {
case PathIterator.SEG_MOVETO:
      if (bp.size() != 0) {
        traceStroke(bp,left,right);
      }
    bp.clear();
  bp.setClosed(false);
bp.moveTo(coords[0],coords[1]);
break;
case PathIterator.SEG_LINETO:
if (coords[0] != bp.get(bp.size() - 1).x[0] || coords[1] != bp.get(bp.size() - 1).y[0]) {
bp.lineTo(coords[0],coords[1]);
}
break;
case PathIterator.SEG_QUADTO:
bp.quadTo(coords[0],coords[1],coords[2],coords[3]);
break;
case PathIterator.SEG_CUBICTO:
bp.curveTo(coords[0],coords[1],coords[2],coords[3],coords[4],coords[5]);
break;
case PathIterator.SEG_CLOSE:
bp.setClosed(true);
break;
}
}
if (bp.size() != 0) {
traceStroke(bp,left,right);
}
right.append(left,false);
return outlineStroke.createStrokedShape(right);
}
