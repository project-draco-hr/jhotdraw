{
  Effect first=null;
  Effect previous=null;
  while (tt.nextToken() == CssTokenizer.TT_FUNCTION) {
    Effect current=null;
switch (tt.currentStringValue()) {
case BLEND:
      current=parseBlend(tt);
    break;
case BLOOM:
  current=parseBloom(tt);
break;
case BOX_BLUR:
current=parseBoxBlur(tt);
break;
case COLOR_ADJUST:
current=parseColorAdjust(tt);
break;
case DROP_SHADOW:
current=parseDropShadow(tt);
break;
case GAUSSIAN_BLUR:
current=parseGaussianBlur(tt);
break;
case GLOW:
current=parseGlow(tt);
break;
case INNER_SHADOW:
current=parseInnerShadow(tt);
break;
case SHADOW:
current=parseShadow(tt);
break;
default :
throw new ParseException("CSS Effect: \"" + BLEND + ", "+ DROP_SHADOW+ "(\" or \""+ INNER_SHADOW+ "(\"  expected",tt.getStartPosition());
}
if (first == null) {
first=previous=current;
}
 else {
try {
previous.getClass().getDeclaredMethod("setInput",Effect.class).invoke(previous,current);
}
 catch (NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException ex) {
ParseException pe=new ParseException("CSS Effect: can not combine effects",tt.getStartPosition());
pe.initCause(ex);
throw pe;
}
previous=current;
}
if (tt.nextToken() != ',') {
tt.pushBack();
}
}
return first;
}
