{
  Effect first=null;
  Effect previous=null;
  while (tt.nextToken() == CssTokenizer.TT_FUNCTION) {
    Effect current=null;
switch (tt.currentStringValue()) {
case DROP_SHADOW:
      current=parseDropShadow(tt);
    break;
case INNER_SHADOW:
  current=parseInnerShadow(tt);
break;
default :
throw new ParseException("CSS Effect: \"" + DROP_SHADOW + "(\" or \""+ INNER_SHADOW+ "(\"  expected",tt.getPosition());
}
if (first == null) {
first=previous=current;
}
 else {
try {
previous.getClass().getDeclaredMethod("setInput",Effect.class).invoke(previous,current);
}
 catch (NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException ex) {
ParseException pe=new ParseException("CSS Effect: can not combine effects",tt.getPosition());
pe.initCause(ex);
throw pe;
}
previous=current;
}
}
return first;
}
