{
  if (isDisabled()) {
    return;
  }
  final Application app=getApplication();
{
    app.addDisabler(this);
    Optional<View> emptyView;
    if (reuseEmptyViews) {
      emptyView=app.getActiveView();
      if (!emptyView.isPresent() || !emptyView.get().isEmpty() || emptyView.get().isDisabled()) {
        emptyView=Optional.empty();
      }
    }
 else {
      emptyView=Optional.empty();
    }
    final View view;
    boolean disposeView;
    if (!emptyView.isPresent()) {
      view=app.getModel().createView();
      disposeView=true;
    }
 else {
      view=emptyView.get();
      disposeView=false;
    }
    URIChooser chooser=getChooser(view);
    Optional<URI> uri=chooser.showDialog(app.getNode());
    if (uri.isPresent()) {
      app.add(view);
      if (!getApplication().getModel().isAllowMultipleViewsPerURI()) {
        for (        View v : getApplication().views()) {
          if (v.getURI() != null && v.getURI().equals(uri.get())) {
            if (disposeView) {
              app.remove(view);
            }
            app.removeDisabler(this);
            v.getNode().getScene().getWindow().requestFocus();
            v.getNode().requestFocus();
            return;
          }
        }
      }
      openViewFromURI(view,uri.get(),chooser);
    }
 else {
      if (disposeView) {
        app.remove(view);
      }
      app.removeDisabler(this);
    }
  }
}
