{
  radials=new float[w * h];
  angulars=new float[w * h];
  alphas=new int[w * h];
  float radius=getRadius();
  float blend=(radius + 2f) / radius - 1f;
  int cx=w / 2;
  int cy=h / 2;
  float maxR=modelColorSpace.getMaxValue(radialIndex);
  float minR=modelColorSpace.getMinValue(radialIndex);
  float extentR=maxR - minR;
  float maxA=modelColorSpace.getMaxValue(angularIndex);
  float minA=modelColorSpace.getMinValue(angularIndex);
  float extentA=maxA - minA;
  for (int x=0; x < w; x++) {
    int kx=x - cx;
    int squarekx=kx * kx;
    for (int y=0; y < h; y++) {
      int ky=cy - y;
      int index=x + y * w;
      float radiusRatio=(float)(Math.sqrt(squarekx + ky * ky) / radius);
      if (radiusRatio <= 1f) {
        alphas[index]=0xff000000;
        radials[index]=radiusRatio * extentR + minR;
        radials[index]=(float)Math.round(radials[index] * radialQuantization) / (float)radialQuantization;
      }
 else {
        alphas[index]=(int)((blend - Math.min(blend,radiusRatio - 1f)) * 255 / blend) << 24;
        radials[index]=maxR;
      }
      if (alphas[index] != 0) {
        angulars[index]=(float)(Math.atan2(ky,kx) / Math.PI / 2d) * extentA + minA;
        angulars[index]=(float)Math.round(angulars[index] * angularQuantization) / (float)angularQuantization;
      }
    }
  }
  isLookupValid=true;
}
