{
  if (isUpdatingSlider++ == 0) {
    double value=getValue() / scaleFactor;
    if (getView() != null && attributeKey != null) {
      if (attributeRestoreData.isEmpty()) {
        Figure f=getView().getDrawing();
        attributeRestoreData.add(f.getAttributesRestoreData());
        attributeKey.set(f,value);
      }
 else {
        Figure f=getView().getDrawing();
        attributeKey.set(f,value);
      }
      if (!getModel().getValueIsAdjusting()) {
        final Figure editedFigure=getView().getDrawing();
        final LinkedList<Object> editUndoData=new LinkedList<Object>(attributeRestoreData);
        final double editRedoValue=value;
        UndoableEdit edit=new AbstractUndoableEdit(){
          @Override public String getPresentationName(){
            return labels.getString("attribute." + attributeKey.getKey() + ".text");
          }
          @Override public void undo() throws CannotRedoException {
            super.undo();
            Iterator<Object> di=editUndoData.iterator();
            editedFigure.willChange();
            editedFigure.restoreAttributesTo(di.next());
            editedFigure.changed();
          }
          public void redo() throws CannotRedoException {
            super.redo();
            editedFigure.willChange();
            attributeKey.basicSet(editedFigure,editRedoValue);
            editedFigure.changed();
          }
        }
;
        getView().getDrawing().fireUndoableEditHappened(edit);
      }
    }
  }
  isUpdatingSlider--;
}
