{
  ArrayList<ArrayList<Point2D>> segments;
  segments=splitAtCorners(digitizedPoints,77 / 180d * Math.PI,error * error);
  for (int i=0, n=segments.size(); i < n; i++) {
    ArrayList<Point2D> seg=segments.get(i);
    seg=removeClosePoints(seg,error * 2);
    seg=reduceNoise(seg,0.8);
    segments.set(i,seg);
  }
  boolean isEmpty=false;
  for (  ArrayList<Point2D> seg : segments) {
    if (seg.isEmpty()) {
      isEmpty=false;
      break;
    }
  }
  if (!isEmpty) {
    double errorSquared=error * error;
    boolean first=true;
    for (    ArrayList<Point2D> seg : segments) {
switch (seg.size()) {
case 0:
        break;
case 1:
      if (first) {
        builder.moveTo(seg.get(0));
        first=false;
      }
 else {
        builder.lineTo(seg.get(0));
      }
    break;
case 2:
  if (first) {
    builder.moveTo(seg.get(0));
    first=false;
  }
builder.lineTo(seg.get(1));
break;
default :
if (first) {
builder.moveTo(seg.get(0));
first=false;
}
Point2D tHat1;
Point2D tHat2;
tHat1=computeLeftTangent(seg,0);
tHat2=computeRightTangent(seg,seg.size() - 1);
fitCubic(builder,seg,0,seg.size() - 1,tHat1,tHat2,errorSquared);
break;
}
}
}
}
