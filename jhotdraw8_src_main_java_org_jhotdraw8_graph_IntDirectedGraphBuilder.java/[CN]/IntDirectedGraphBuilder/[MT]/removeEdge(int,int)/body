{
  if (vi < 0 || vi >= getVertexCount()) {
    throw new IllegalArgumentException("vi:" + i);
  }
  if (i < 0 || i >= getNextCount(vi)) {
    throw new IllegalArgumentException("i:" + i);
  }
  int prevEdgeId=SENTINEL;
  int edgeId=lastEdge[vi * LASTEDGE_NUM_FIELDS + LASTEDGE_POINTER_FIELD];
  for (int j=i - 1; j >= 0; j--) {
    prevEdgeId=edgeId;
    edgeId=edges[edgeId * EDGES_NUM_FIELDS + EDGES_POINTER_FIELD];
  }
  if (prevEdgeId == SENTINEL) {
    lastEdge[vi * LASTEDGE_NUM_FIELDS + LASTEDGE_POINTER_FIELD]=edges[edgeId * EDGES_NUM_FIELDS + EDGES_POINTER_FIELD];
  }
 else {
    edges[prevEdgeId * EDGES_NUM_FIELDS + EDGES_POINTER_FIELD]=edges[edgeId * EDGES_NUM_FIELDS + EDGES_POINTER_FIELD];
  }
  lastEdge[vi * LASTEDGE_NUM_FIELDS + LASTEDGE_COUNT_FIELD]--;
  edgeCount--;
  int moveEdgeId=edgeCount;
  if (edgeId != moveEdgeId) {
    edges[edgeId * EDGES_NUM_FIELDS + EDGES_VERTEX_FIELD]=edges[moveEdgeId * EDGES_NUM_FIELDS + EDGES_VERTEX_FIELD];
    edges[edgeId * EDGES_NUM_FIELDS + EDGES_POINTER_FIELD]=edges[moveEdgeId * EDGES_NUM_FIELDS + EDGES_POINTER_FIELD];
    boolean fixed=false;
    for (int v=0; v < vertexCount; v++) {
      if (lastEdge[v * LASTEDGE_NUM_FIELDS + LASTEDGE_COUNT_FIELD] > 0 && lastEdge[v * LASTEDGE_NUM_FIELDS + LASTEDGE_POINTER_FIELD] == moveEdgeId) {
        lastEdge[v * LASTEDGE_NUM_FIELDS + LASTEDGE_POINTER_FIELD]=edgeId;
        fixed=true;
        break;
      }
    }
    if (!fixed) {
      for (int e=0; e < edgeCount; e++) {
        if (edges[e * EDGES_NUM_FIELDS + EDGES_POINTER_FIELD] == moveEdgeId) {
          edges[e * EDGES_NUM_FIELDS + EDGES_POINTER_FIELD]=edgeId;
          fixed=true;
          break;
        }
      }
    }
  }
}
