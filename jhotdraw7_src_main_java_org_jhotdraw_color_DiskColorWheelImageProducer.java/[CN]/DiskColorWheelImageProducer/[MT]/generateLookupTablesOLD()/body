{
  radials=new float[w * h];
  angulars=new float[w * h];
  alphas=new int[w * h];
  float radius=getRadius();
  float blend=(radius + 2f) / radius - 1f;
  float maxR=modelColorSpace.getMaxValue(radialIndex);
  float minR=modelColorSpace.getMinValue(radialIndex);
  float extentR=maxR - minR;
  float maxA=modelColorSpace.getMaxValue(angularIndex);
  float minA=modelColorSpace.getMinValue(angularIndex);
  float extentA=maxA - minA;
  int side=Math.min(w,h);
  int cx=side / 2;
  int cy=side / 2;
  int xOffset=(w - side) / 2;
  int yOffset=(h - side) / 2 * w;
  float extentX=side - 1;
  float extentY=extentX;
  for (int x=0; x < side; x++) {
    float kx=(x - cx) / radius;
    if (flipX)     kx=-kx;
    float squarekx=kx * kx;
    for (int y=0; y < side; y++) {
      float ky=(cy - y) / radius;
      if (flipY)       ky=-ky;
      int index=x + y * w + xOffset + yOffset;
      float radiusRatio=(float)Math.sqrt(squarekx + ky * ky);
      if (radiusRatio <= 1f) {
        alphas[index]=0xff000000;
      }
 else {
        alphas[index]=(int)((blend - Math.min(blend,radiusRatio - 1f)) * 255 / blend) << 24;
      }
      if (alphas[index] != 0) {
      }
      float angle=(float)Math.atan2(ky,kx);
      float scale=(float)Math.max(Math.abs(Math.sin(angle)),Math.abs(Math.cos(angle))) + 0.1f;
      radials[index]=(kx / scale + 1f) / 2f * extentR + minR;
      angulars[index]=(ky / scale + 1f) / 2f * extentA + minA;
    }
  }
  isLookupValid=true;
}
