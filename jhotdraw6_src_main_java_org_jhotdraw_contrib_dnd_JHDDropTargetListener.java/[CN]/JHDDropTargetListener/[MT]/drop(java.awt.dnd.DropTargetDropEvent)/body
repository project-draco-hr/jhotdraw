{
  System.out.println("DropTargetDropEvent-drop");
  if (dtde.isDataFlavorSupported(DNDFiguresTransferable.DNDFiguresFlavor) == true) {
    log("DNDFiguresFlavor");
    if ((dtde.getDropAction() & DnDConstants.ACTION_COPY_OR_MOVE) != 0) {
      log("copy or move");
      if (dtde.isLocalTransfer() == false) {
        System.err.println("Intra-JVM Transfers not implemented for figures yet.");
        dtde.rejectDrop();
        return;
      }
      dtde.acceptDrop(dtde.getDropAction());
      try {
        setTargetUndoActivity(createTargetUndoActivity(view()));
        DNDFigures ff=(DNDFigures)DNDHelper.processReceivedData(DNDFiguresTransferable.DNDFiguresFlavor,dtde.getTransferable());
        getTargetUndoActivity().setAffectedFigures(ff.getFigures());
        Point theO=ff.getOrigin();
        view().clearSelection();
        Point newP=dtde.getLocation();
        int dx=newP.x - theO.x;
        int dy=newP.y - theO.y;
        log("mouse at " + newP);
        FigureEnumeration fe=view().insertFigures(getTargetUndoActivity().getAffectedFigures(),dx,dy,false);
        getTargetUndoActivity().setAffectedFigures(fe);
        if (dtde.getDropAction() == DnDConstants.ACTION_MOVE) {
          view().addToSelectionAll(getTargetUndoActivity().getAffectedFigures());
        }
        view().checkDamage();
        editor().getUndoManager().pushUndo(getTargetUndoActivity());
        editor().getUndoManager().clearRedos();
        editor().figureSelectionChanged(view());
        dtde.dropComplete(true);
      }
 catch (      NullPointerException npe) {
        npe.printStackTrace();
        dtde.dropComplete(false);
      }
    }
 else {
      dtde.rejectDrop();
    }
  }
 else   if (dtde.isDataFlavorSupported(DataFlavor.stringFlavor)) {
    log("String flavor dropped.");
    dtde.acceptDrop(dtde.getDropAction());
    Object o=DNDHelper.processReceivedData(DataFlavor.stringFlavor,dtde.getTransferable());
    if (o != null) {
      log("Received string flavored data.");
      dtde.getDropTargetContext().dropComplete(true);
    }
 else {
      dtde.getDropTargetContext().dropComplete(false);
    }
  }
 else   if (dtde.isDataFlavorSupported(DNDHelper.ASCIIFlavor) == true) {
    log("ASCII Flavor dropped.");
    dtde.acceptDrop(DnDConstants.ACTION_COPY);
    Object o=DNDHelper.processReceivedData(DNDHelper.ASCIIFlavor,dtde.getTransferable());
    if (o != null) {
      log("Received ASCII Flavored data.");
      dtde.getDropTargetContext().dropComplete(true);
    }
 else {
      dtde.getDropTargetContext().dropComplete(false);
    }
  }
 else   if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
    log("Java File List Flavor dropped.");
    dtde.acceptDrop(DnDConstants.ACTION_COPY);
    File[] fList=(File[])DNDHelper.processReceivedData(DataFlavor.javaFileListFlavor,dtde.getTransferable());
    if (fList != null) {
      log("Got list of files.");
      for (int x=0; x < fList.length; x++) {
        System.out.println(fList[x].getAbsolutePath());
      }
      dtde.getDropTargetContext().dropComplete(true);
    }
 else {
      dtde.getDropTargetContext().dropComplete(false);
    }
  }
  fLastX=0;
  fLastY=0;
}
