{
  Tag[] inline=tag.inlineTags();
  if (inline.length == 0 || "@see".equals(inline[0].kind())) {
    return inline;
  }
  String text=inline[0].text();
  int p0=text.indexOf(' ');
  int p1=text.indexOf(',',p0 + 1);
  int p2=text.indexOf('.',p1 + 1);
  String instantiatingType="";
  String patternName="";
  String patternRole="";
  String description="";
  if (p0 != -1 && p1 != -1 && p2 != -1) {
    instantiatingType=toQualifiedName(tag,text.substring(0,p0).trim());
    patternName=text.substring(p0 + 1,p1).trim();
    patternRole=text.substring(p1 + 1,p2).trim();
    description=text.substring(p2 + 1);
  }
 else {
    System.err.println(tag.position() + ": warning: DesignPatternTaglet illegal @" + NAME+ " tag. Expected \"@"+ NAME+ " className patternName, roleName. description.\"");
    description=text;
  }
  ArrayList<Tag> parsed=new ArrayList<Tag>(inline.length + 1);
  DesignPatternHeaderTag dpt=new DesignPatternHeaderTag(inline[0].holder(),instantiatingType,patternName,patternRole,inline[0].position());
  parsed.add(dpt);
  if (!description.isEmpty()) {
    parsed.add(new TextTag(inline[0].holder(),description,inline[0].position()));
  }
  for (int i=1; i < inline.length; i++) {
    parsed.add(inline[i]);
  }
  return parsed.toArray(new Tag[parsed.size()]);
}
