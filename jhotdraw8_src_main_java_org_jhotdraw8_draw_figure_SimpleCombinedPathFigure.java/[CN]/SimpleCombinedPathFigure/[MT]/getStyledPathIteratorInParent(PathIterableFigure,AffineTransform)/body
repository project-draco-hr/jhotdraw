{
  AffineTransform childTx=tx;
  final Transform localToParent=f.getLocalToParent();
  if (localToParent != null) {
    AffineTransform ltpTx=Transforms.toAWT(localToParent);
    if (tx != null) {
      childTx=(AffineTransform)tx.clone();
      childTx.concatenate(ltpTx);
    }
 else {
      childTx=ltpTx;
    }
  }
  PathIterator iter=f.getPathIterator(childTx);
  if (f instanceof StrokeableFigure) {
    Paint stroke=Paintable.getPaint(f.getStyled(STROKE));
    if (stroke != null) {
      double strokeWidth=f.getStyled(STROKE_WIDTH);
      if (strokeWidth > 0.0) {
        BasicStroke basicStroke;
        final ImmutableList<Double> dashArray=f.getStyled(STROKE_DASH_ARRAY);
        if (dashArray != null && !dashArray.isEmpty()) {
          double dashOffset=f.getStyled(STROKE_DASH_OFFSET);
          float[] dash=new float[dashArray.size()];
          boolean allZero=false;
          for (int i=0, n=dashArray.size(); i < n; i++) {
            dash[i]=dashArray.get(i).floatValue();
            allZero=allZero && dash[i] == 0f;
          }
          if (allZero) {
            dash=null;
          }
          basicStroke=new BasicStroke((float)strokeWidth,Shapes.awtCapFromFX(f.getStyled(STROKE_LINE_CAP)),Shapes.awtJoinFromFX(f.getStyled(STROKE_LINE_JOIN)),f.getStyled(STROKE_MITER_LIMIT).floatValue(),dash,(float)dashOffset);
        }
 else {
          basicStroke=new BasicStroke((float)strokeWidth,Shapes.awtCapFromFX(f.getStyled(STROKE_LINE_CAP)),Shapes.awtJoinFromFX(f.getStyled(STROKE_LINE_JOIN)),f.getStyled(STROKE_MITER_LIMIT).floatValue());
        }
        iter=basicStroke.createStrokedShape(Shapes.buildFromPathIterator(new AWTPathBuilder(),iter).get()).getPathIterator(null);
      }
    }
  }
  return iter;
}
