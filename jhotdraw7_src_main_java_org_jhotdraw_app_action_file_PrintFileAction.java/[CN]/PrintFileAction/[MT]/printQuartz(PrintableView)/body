{
  Frame frame=(Frame)SwingUtilities.getWindowAncestor(v.getComponent());
  final Pageable pageable=v.createPageable();
  final double resolution=300d;
  JobAttributes jobAttr=new JobAttributes();
  PageAttributes pageAttr=new PageAttributes();
  pageAttr.setMedia(PageAttributes.MediaType.A4);
  pageAttr.setPrinterResolution((int)resolution);
  final PrintJob pj=frame.getToolkit().getPrintJob(frame,"Job Title",jobAttr,pageAttr);
  getActiveView().setEnabled(false);
  new BackgroundTask(){
    @Override protected void construct() throws PrinterException {
      Paper paper=new Paper();
      paper.setSize(pj.getPageDimension().width / resolution * 72d,pj.getPageDimension().height / resolution * 72d);
      paper.setImageableArea(64d,32d,paper.getWidth() - 96d,paper.getHeight() - 64);
      PageFormat pageFormat=new PageFormat();
      pageFormat.setPaper(paper);
      try {
        for (int i=0, n=pageable.getNumberOfPages(); i < n; i++) {
          PageFormat pf=pageable.getPageFormat(i);
          pf=pageFormat;
          Graphics g=pj.getGraphics();
          if (g instanceof Graphics2D) {
            pageable.getPrintable(i).print(g,pf,i);
          }
 else {
            BufferedImage buf=new BufferedImage((int)(pf.getImageableWidth() * resolution / 72d),(int)(pf.getImageableHeight() * resolution / 72d),BufferedImage.TYPE_INT_RGB);
            Graphics2D bufG=buf.createGraphics();
            bufG.setBackground(Color.WHITE);
            bufG.fillRect(0,0,buf.getWidth(),buf.getHeight());
            bufG.scale(resolution / 72d,resolution / 72d);
            bufG.translate(-pf.getImageableX(),-pf.getImageableY());
            pageable.getPrintable(i).print(bufG,pf,i);
            bufG.dispose();
            g.drawImage(buf,(int)(pf.getImageableX() * resolution / 72d),(int)(pf.getImageableY() * resolution / 72d),null);
            buf.flush();
          }
          g.dispose();
        }
      }
  finally {
        pj.end();
      }
    }
    @Override protected void failed(    Throwable error){
      error.printStackTrace();
    }
    @Override protected void finished(){
      getActiveView().setEnabled(true);
    }
  }
.start();
}
