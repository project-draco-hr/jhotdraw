{
  final TextHolderFigure textOwner=(TextHolderFigure)getOwner();
  oldSize=newSize=textOwner.getFontSize();
switch (evt.getKeyCode()) {
case KeyEvent.VK_UP:
    if (newSize > 1) {
      newSize-=1f;
    }
  evt.consume();
break;
case KeyEvent.VK_DOWN:
newSize++;
evt.consume();
break;
case KeyEvent.VK_LEFT:
evt.consume();
break;
case KeyEvent.VK_RIGHT:
evt.consume();
break;
}
if (newSize != oldSize) {
restoreData=textOwner.getAttributesRestoreData();
textOwner.willChange();
textOwner.setFontSize(newSize);
textOwner.changed();
final Object editRestoreData=restoreData;
final float editNewSize=newSize;
UndoableEdit edit=new AbstractUndoableEdit(){
@Override public String getPresentationName(){
ResourceBundleUtil labels=ResourceBundleUtil.getLAFBundle("org.jhotdraw.draw.Labels",Locale.getDefault());
return labels.getString("attribute.fontSize");
}
@Override public void undo(){
super.undo();
textOwner.willChange();
textOwner.restoreAttributesTo(editRestoreData);
textOwner.changed();
}
@Override public void redo(){
super.redo();
textOwner.willChange();
textOwner.setFontSize(newSize);
textOwner.changed();
}
}
;
fireUndoableEditHappened(edit);
}
}
