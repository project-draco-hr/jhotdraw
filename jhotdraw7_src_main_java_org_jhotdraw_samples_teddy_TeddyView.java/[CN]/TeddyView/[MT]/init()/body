{
  initComponents();
  editor=createEditor();
  editorViewport=new EditorPanel();
  editorViewport.setEditor(editor);
  scrollPane.setViewportView(editorViewport);
  editor.addCaretListener(new CaretListener(){
    public void caretUpdate(    CaretEvent evt){
      TeddyView.this.caretUpdate(evt);
    }
  }
);
  scrollPane.getViewport().setBackground(editor.getBackground());
  scrollPane.getViewport().addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent evt){
      editor.requestFocus();
    }
  }
);
  Font font=getFont();
  MutableAttributeSet attrs=((StyledEditorKit)editor.getEditorKit()).getInputAttributes();
  StyleConstants.setFontFamily(attrs,font.getFamily());
  StyleConstants.setFontSize(attrs,font.getSize());
  StyleConstants.setItalic(attrs,(font.getStyle() & Font.ITALIC) != 0);
  StyleConstants.setBold(attrs,(font.getStyle() & Font.BOLD) != 0);
  statusBar.setVisible(prefs.getBoolean("statusBarVisible",false));
  editorViewport.setLineWrap(prefs.getBoolean("lineWrap",true));
  NumberedEditorKit editorKit=new NumberedEditorKit();
  ((NumberedViewFactory)editorKit.getViewFactory()).setLineNumbersVisible(prefs.getBoolean("lineNumbersVisible",false));
  editor.setEditorKit(editorKit);
  editor.setDocument(createDocument());
  setPreferredSize(new Dimension(400,400));
  undoManager=new UndoRedoManager();
  editor.getDocument().addUndoableEditListener(undoManager);
  undoManager.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      setHasUnsavedChanges(undoManager.hasSignificantEdits());
    }
  }
);
  initActions();
}
