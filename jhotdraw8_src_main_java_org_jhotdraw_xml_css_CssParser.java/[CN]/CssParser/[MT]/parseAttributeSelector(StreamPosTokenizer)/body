{
  if (tt.nextToken() != '[') {
    throw new IOException("AttributeSelector: '[' instead of " + value(tt) + " expected in line "+ tt.lineno());
  }
  if (tt.nextToken() != StreamPosTokenizer.TT_WORD) {
    throw new IOException("AttributeSelector: word instead of " + value(tt) + " expected in line "+ tt.lineno());
  }
  String attributeName=tt.sval;
  AbstractAttributeSelector selector;
switch (tt.nextToken()) {
case '=':
    if (tt.nextToken() != StreamPosTokenizer.TT_WORD && tt.ttype != '\'' && tt.ttype != '"') {
      throw new IOException("AttributeSelector: word or string instead of " + value(tt) + " expected in line "+ tt.lineno());
    }
  selector=new AttributeValueEqualsSelector(attributeName,tt.sval);
break;
case '~':
if (tt.nextToken() != '=') {
throw new IOException("AttributeSelector: '=' instead of " + value(tt) + " expected in line "+ tt.lineno());
}
if (tt.nextToken() != StreamPosTokenizer.TT_WORD && tt.ttype != '\'' && tt.ttype != '"') {
throw new IOException("AttributeSelector: word or string instead of " + value(tt) + " expected in line "+ tt.lineno());
}
selector=new AttributeValueContainsWordSelector(attributeName,tt.sval);
break;
case '|':
if (tt.nextToken() != '=') {
throw new IOException("AttributeSelector: '=' instead of " + value(tt) + " expected in line "+ tt.lineno());
}
if (tt.nextToken() != StreamPosTokenizer.TT_WORD && tt.ttype != '\'' && tt.ttype != '"') {
throw new IOException("AttributeSelector: word or string instead of " + value(tt) + " expected in line "+ tt.lineno());
}
selector=new AttributeValueStartsWithSelector(attributeName,tt.sval);
break;
case ']':
selector=new AttributeSelector(attributeName);
tt.pushBack();
break;
default :
throw new IOException("AttributeSelector: operator '=', '~=' or '|=' instead of " + value(tt) + " expected in line "+ tt.lineno());
}
if (tt.nextToken() != ']') {
throw new IOException("AttributeSelector: ']' instead of " + value(tt) + " expected in line "+ tt.lineno());
}
return selector;
}
