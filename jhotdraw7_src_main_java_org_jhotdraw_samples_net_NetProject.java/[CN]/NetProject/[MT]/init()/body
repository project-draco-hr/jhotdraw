{
  super.init();
  initComponents();
  JPanel zoomButtonPanel=new JPanel(new BorderLayout());
  scrollPane.setLayout(new PlacardScrollPaneLayout());
  scrollPane.setBorder(new EmptyBorder(0,0,0,0));
  setEditor(new DefaultDrawingEditor());
  view.setDOMFactory(new NetFactory());
  undo=new UndoRedoManager();
  view.setDrawing(new DefaultDrawing());
  view.getDrawing().addUndoableEditListener(undo);
  initActions();
  undo.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      setHasUnsavedChanges(undo.hasSignificantEdits());
    }
  }
);
  ResourceBundleUtil labels=ResourceBundleUtil.getLAFBundle("org.jhotdraw.draw.Labels");
  JPanel placardPanel=new JPanel(new BorderLayout());
  javax.swing.AbstractButton pButton;
  pButton=ToolBarButtonFactory.createZoomButton(view);
  pButton.putClientProperty("Quaqua.Button.style","placard");
  pButton.putClientProperty("Quaqua.Component.visualMargin",new Insets(0,0,0,0));
  pButton.setFont(UIManager.getFont("SmallSystemFont"));
  placardPanel.add(pButton,BorderLayout.WEST);
  toggleGridButton=pButton=ToolBarButtonFactory.createToggleGridButton(view);
  pButton.putClientProperty("Quaqua.Button.style","placard");
  pButton.putClientProperty("Quaqua.Component.visualMargin",new Insets(0,0,0,0));
  pButton.setFont(UIManager.getFont("SmallSystemFont"));
  labels.configureToolBarButton(pButton,"alignGridSmall");
  placardPanel.add(pButton,BorderLayout.EAST);
  scrollPane.add(placardPanel,JScrollPane.LOWER_LEFT_CORNER);
  prefs=Preferences.userNodeForPackage(getClass());
  toggleGridButton.setSelected(prefs.getBoolean("project.gridVisible",false));
  setScaleFactor(prefs.getDouble("project.scaleFactor",1d));
  view.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      String name=evt.getPropertyName();
      if (name.equals("constrainer")) {
        prefs.putBoolean("project.gridVisible",((Constrainer)evt.getNewValue()).isVisible());
        firePropertyChange("gridVisible",((Constrainer)evt.getOldValue()).isVisible(),((Constrainer)evt.getNewValue()).isVisible());
      }
 else       if (name.equals("scaleFactor")) {
        prefs.putDouble("project.scaleFactor",(Double)evt.getNewValue());
        firePropertyChange("scaleFactor",evt.getOldValue(),evt.getNewValue());
      }
    }
  }
);
}
