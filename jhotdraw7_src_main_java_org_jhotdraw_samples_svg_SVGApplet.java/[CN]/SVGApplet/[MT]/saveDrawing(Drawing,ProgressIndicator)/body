{
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  Dimension renderedSize=new Dimension(-1,-1);
  try {
    renderedSize.width=Integer.parseInt(getParameter("DrawingWidth"));
  }
 catch (  Exception e) {
  }
  try {
    renderedSize.height=Integer.parseInt(getParameter("DrawingHeight"));
  }
 catch (  Exception e) {
  }
  if (renderedSize.width == -1 || renderedSize.height == -1) {
    Rectangle2D.Double drawBounds=null;
    for (    Figure f : drawing.getChildren()) {
      if (drawBounds == null) {
        drawBounds=f.getDrawingArea();
      }
 else {
        drawBounds.add(f.getDrawingArea());
      }
    }
    if (renderedSize.width == -1) {
      renderedSize.width=(int)(Math.abs(drawBounds.x) + drawBounds.getWidth());
    }
    if (renderedSize.height == -1) {
      renderedSize.height=(int)(Math.abs(drawBounds.y) + drawBounds.getHeight());
    }
  }
  String imageExtension=getParameter("DrawingName");
  imageExtension=(imageExtension == null) ? "" : imageExtension.substring(imageExtension.lastIndexOf('.') + 1);
  if (imageExtension.equals("")) {
    imageExtension="svg";
  }
  byte[] drawingData=null;
  for (  OutputFormat format : drawing.getOutputFormats()) {
    if (imageExtension.equals(format.getFileExtension())) {
      if (format instanceof ImageOutputFormat) {
        ((ImageOutputFormat)format).write(out,drawing,new AffineTransform(),renderedSize);
      }
 else {
        format.write(out,drawing);
      }
      drawingData=out.toByteArray();
      break;
    }
  }
  if (drawingData == null) {
    throw new IOException("Unsupported file format.");
  }
  byte[] renderedData=null;
  byte[] imageMapData=null;
  if (imageExtension.startsWith("svg")) {
    out=new ByteArrayOutputStream();
    ImageOutputFormat imgOut=new ImageOutputFormat();
    imgOut.write(out,drawing,new AffineTransform(),renderedSize);
    renderedData=out.toByteArray();
    out=new ByteArrayOutputStream();
    ImageMapOutputFormat imgMapOut=new ImageMapOutputFormat();
    imgMapOut.write(out,drawing,new AffineTransform(),renderedSize);
    imageMapData=out.toByteArray();
  }
  HttpURLConnection conn=null;
  BufferedReader response=null;
  try {
    URL url=new URL(getDocumentBase(),getParameter("UploadURL"));
    conn=(HttpURLConnection)url.openConnection();
    ClientHttpRequest request=new ClientHttpRequest(conn);
    request.setParameter("Action",getParameter("UploadAction",""));
    request.setParameter("UploadSummary",getDrawingComponent().getSummary());
    request.setParameter("DrawingName",getParameter("DrawingName"));
    request.setParameter("DrawingRevision",getParameter("DrawingRevision",""));
    request.setParameter("DrawingWidth",Integer.toString(renderedSize.width));
    request.setParameter("DrawingHeight",Integer.toString(renderedSize.height));
    request.setParameter("DrawingData",getParameter("DrawingName"),new ByteArrayInputStream(drawingData));
    if (renderedData != null) {
      request.setParameter("RenderedImageData",getParameter("DrawingName") + ".png",new ByteArrayInputStream(renderedData));
    }
    if (imageMapData != null) {
      request.setParameter("ImageMapData",getParameter("DrawingName") + ".map",new ByteArrayInputStream(imageMapData));
    }
    request.post();
    int responseCode=conn.getResponseCode();
    response=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));
    StringBuilder responseText=new StringBuilder();
    for (String line; null != (line=response.readLine()); ) {
      responseText.append(line);
    }
    response.close();
    response=null;
    conn=null;
  }
 catch (  IOException e) {
    if (conn != null) {
      StringBuilder responseText=new StringBuilder();
      try {
        InputStream errorStream=conn.getErrorStream();
        if (errorStream == null) {
          responseText.append(conn.getResponseMessage());
        }
 else {
          response=new BufferedReader(new InputStreamReader(errorStream,"UTF-8"));
          for (String line; null != (line=response.readLine()); ) {
            responseText.append(line);
          }
        }
      }
  finally {
        if (response != null) {
          response.close();
          response=null;
        }
      }
      if (responseText.length() > 0) {
        IOException e2=new IOException(responseText.toString());
        e2.initCause(e);
        throw e2;
      }
 else {
        throw e;
      }
    }
  }
}
