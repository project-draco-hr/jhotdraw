{
  if (getParameter("Locale") != null) {
    Locale.setDefault(new Locale(getParameter("Locale")));
  }
  final ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Throwable e) {
  }
  try {
    PopupFactory.setSharedInstance(new PopupFactory());
  }
 catch (  Throwable e) {
  }
  Container c=getContentPane();
  final ProgressIndicator progress=new ProgressIndicator(getName(),labels.getString("progressInitializing"));
  c.add(progress);
  progress.revalidate();
  new Worker<Drawing>(){
    @Override protected Drawing construct() throws Exception {
      Thread t=new Thread(){
        @Override public void run(){
          drawingComponent=createDrawingComponent();
        }
      }
;
      t.start();
      progress.setNote(labels.getString("progressLoading"));
      Drawing drawing=loadDrawing(progress);
      progress.setNote(labels.getString("progressOpeningEditor"));
      progress.setIndeterminate(true);
      t.join();
      return drawing;
    }
    @Override protected void done(    Drawing result){
      Container c=getContentPane();
      c.setLayout(new BorderLayout());
      c.removeAll();
      c.add(drawingComponent.getComponent());
      initComponents();
      if (result != null) {
        setDrawing(result);
      }
      drawingComponent.revalidate();
    }
    @Override protected void failed(    Throwable result){
      Container c=getContentPane();
      c.setLayout(new BorderLayout());
      c.removeAll();
      Throwable error=result;
      error.printStackTrace();
      String message=(error.getMessage() == null) ? error.toString() : error.getMessage();
      MessagePanel mp=new MessagePanel(UIManager.getIcon("OptionPane.errorIcon"),labels.getFormatted("messageLoadFailed",htmlencode(getParameter("DrawingURL")),htmlencode(message)));
      c.add(mp);
      mp.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent evt){
          if ("close".equals(evt.getActionCommand())) {
            close();
          }
        }
      }
);
      mp.revalidate();
    }
    @Override protected void finished(){
      long end=System.currentTimeMillis();
      System.out.println("AbstractDrawingApplet startup latency:" + (end - start));
    }
  }
.start();
}
