{
  Point2D a, b, c, d;
  Point2D c3, c2, c1, c0;
  Intersection result=new Intersection(Status.NO_INTERSECTION);
  a=p1.multiply(-1);
  b=p2.multiply(3);
  c=p3.multiply(-3);
  d=a.add(b.add(c.add(p4)));
  c3=new Point2D(d.getX(),d.getY());
  a=p1.multiply(3);
  b=p2.multiply(-6);
  c=p3.multiply(3);
  d=a.add(b.add(c));
  c2=new Point2D(d.getX(),d.getY());
  a=p1.multiply(-3);
  b=p2.multiply(3);
  c=a.add(b);
  c1=new Point2D(c.getX(),c.getY());
  c0=new Point2D(p1.getX(),p1.getY());
  double rxrx=rx * rx;
  double ryry=ry * ry;
  final double c3x=c3.getX();
  final double c3y=c3.getY();
  final double c2x=c2.getX();
  final double c1x=c1.getX();
  final double c2y=c2.getY();
  final double c1y=c1.getY();
  final double ecx=ec.getX();
  final double c0x=c0.getX();
  final double c0y=c0.getY();
  final double ecy=ec.getY();
  Polynomial poly=new Polynomial(c3x * c3x * ryry + c3y * c3y * rxrx,2 * (c3x * c2x * ryry + c3y * c2y * rxrx),2 * (c3x * c1x * ryry + c3y * c1y * rxrx) + c2x * c2x * ryry + c2y * c2y * rxrx,2 * c3x * ryry* (c0x - ecx) + 2 * c3y * rxrx* (c0y - ecy) + 2 * (c2x * c1x * ryry + c2y * c1y * rxrx),2 * c2x * ryry* (c0x - ecx) + 2 * c2y * rxrx* (c0y - ecy) + c1x * c1x * ryry + c1y * c1y * rxrx,2 * c1x * ryry* (c0x - ecx) + 2 * c1y * rxrx* (c0y - ecy),c0x * c0x * ryry - 2 * c0y * ecy* rxrx - 2 * c0x * ecx* ryry + c0y * c0y * rxrx + ecx * ecx * ryry + ecy * ecy * rxrx - rxrx * ryry);
  double[] roots=poly.getRootsInInterval(0,1);
  for (int i=0; i < roots.length; i++) {
    double t=roots[i];
    result.appendPoint(c3.multiply(t * t * t).add(c2.multiply(t * t).add(c1.multiply(t).add(c0))),t);
  }
  if (result.size() > 0) {
    result.status=Status.INTERSECTION;
  }
  return result;
}
