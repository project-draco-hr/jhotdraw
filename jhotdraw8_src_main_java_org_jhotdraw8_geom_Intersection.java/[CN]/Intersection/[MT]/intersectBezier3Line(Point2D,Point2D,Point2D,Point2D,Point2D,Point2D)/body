{
  Point2D a, b, c, d;
  Point2D c3, c2, c1, c0;
  double cl;
  Point2D n;
  final Point2D min=minp(a1,a2);
  final Point2D max=maxp(a1,a2);
  Intersection result=new Intersection(Status.NO_INTERSECTION);
  a=p1.multiply(-1);
  b=p2.multiply(3);
  c=p3.multiply(-3);
  d=a.add(b.add(c.add(p4)));
  c3=new Point2D(d.getX(),d.getY());
  a=p1.multiply(3);
  b=p2.multiply(-6);
  c=p3.multiply(3);
  d=a.add(b.add(c));
  c2=new Point2D(d.getX(),d.getY());
  a=p1.multiply(-3);
  b=p2.multiply(3);
  c=a.add(b);
  c1=new Point2D(c.getX(),c.getY());
  c0=new Point2D(p1.getX(),p1.getY());
  n=new Point2D(a1.getY() - a2.getY(),a2.getX() - a1.getX());
  cl=a1.getX() * a2.getY() - a2.getX() * a1.getY();
  double[] roots=new Polynomial(n.dotProduct(c3),n.dotProduct(c2),n.dotProduct(c1),n.dotProduct(c0) + cl).getRoots();
  for (int i=0; i < roots.length; i++) {
    double t=roots[i];
    if (0 <= t && t <= 1) {
      Point2D p5=lerp(p1,p2,t);
      Point2D p6=lerp(p2,p3,t);
      Point2D p7=lerp(p3,p4,t);
      Point2D p8=lerp(p5,p6,t);
      Point2D p9=lerp(p6,p7,t);
      Point2D p10=lerp(p8,p9,t);
      if (a1.getX() == a2.getX()) {
        if (min.getY() <= p10.getY() && p10.getY() <= max.getY()) {
          result.status=Status.INTERSECTION;
          result.put(t,p10);
        }
      }
 else       if (a1.getY() == a2.getY()) {
        if (min.getX() <= p10.getX() && p10.getX() <= max.getX()) {
          result.status=Status.INTERSECTION;
          result.put(t,p10);
        }
      }
 else       if (gte(p10,min) && lte(p10,max)) {
        result.status=Status.INTERSECTION;
        result.put(t,p10);
      }
    }
  }
  return result;
}
