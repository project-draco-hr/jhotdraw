{
  Point2D a, b, c, d;
  Point2D c13, c12, c11, c10;
  Point2D c23, c22, c21, c20;
  Intersection result=new Intersection(Status.NO_INTERSECTION);
  a=a1.multiply(-1);
  b=a2.multiply(3);
  c=a3.multiply(-3);
  d=a.add(b.add(c.add(a4)));
  c13=new Point2D(d.getX(),d.getY());
  a=a1.multiply(3);
  b=a2.multiply(-6);
  c=a3.multiply(3);
  d=a.add(b.add(c));
  c12=new Point2D(d.getX(),d.getY());
  a=a1.multiply(-3);
  b=a2.multiply(3);
  c=a.add(b);
  c11=new Point2D(c.getX(),c.getY());
  c10=new Point2D(a1.getX(),a1.getY());
  a=b1.multiply(-1);
  b=b2.multiply(3);
  c=b3.multiply(-3);
  d=a.add(b.add(c.add(b4)));
  c23=new Point2D(d.getX(),d.getY());
  a=b1.multiply(3);
  b=b2.multiply(-6);
  c=b3.multiply(3);
  d=a.add(b.add(c));
  c22=new Point2D(d.getX(),d.getY());
  a=b1.multiply(-3);
  b=b2.multiply(3);
  c=a.add(b);
  c21=new Point2D(c.getX(),c.getY());
  c20=new Point2D(b1.getX(),b1.getY());
  final double c10x=c10.getX();
  double c10x2=c10x * c10x;
  double c10x3=c10x * c10x * c10x;
  final double c10y=c10.getY();
  double c10y2=c10y * c10y;
  double c10y3=c10y * c10y * c10y;
  final double c11x=c11.getX();
  double c11x2=c11x * c11x;
  double c11x3=c11x * c11x * c11x;
  final double c11y=c11.getY();
  double c11y2=c11y * c11y;
  double c11y3=c11y * c11y * c11y;
  final double c12x=c12.getX();
  double c12x2=c12x * c12x;
  double c12x3=c12x * c12x * c12x;
  final double c12y=c12.getY();
  double c12y2=c12y * c12y;
  double c12y3=c12y * c12y * c12y;
  final double c13x=c13.getX();
  double c13x2=c13x * c13x;
  double c13x3=c13x * c13x * c13x;
  final double c13y=c13.getY();
  double c13y2=c13y * c13y;
  double c13y3=c13y * c13y * c13y;
  final double c20x=c20.getX();
  double c20x2=c20x * c20x;
  double c20x3=c20x * c20x * c20x;
  final double c20y=c20.getY();
  double c20y2=c20y * c20y;
  double c20y3=c20y * c20y * c20y;
  final double c21x=c21.getX();
  double c21x2=c21x * c21x;
  double c21x3=c21x * c21x * c21x;
  final double c21y=c21.getY();
  double c21y2=c21y * c21y;
  final double c22x=c22.getX();
  double c22x2=c22x * c22x;
  double c22x3=c22x * c22x * c22x;
  final double c22y=c22.getY();
  double c22y2=c22y * c22y;
  final double c23x=c23.getX();
  double c23x2=c23x * c23x;
  double c23x3=c23x * c23x * c23x;
  final double c23y=c23.getY();
  double c23y2=c23y * c23y;
  double c23y3=c23y * c23y * c23y;
  Polynomial poly=new Polynomial(-c13x3 * c23y3 + c13y3 * c23x3 - 3 * c13x * c13y2* c23x2* c23y + 3 * c13x2 * c13y* c23x* c23y2,-6 * c13x * c22x* c13y2* c23x* c23y + 6 * c13x2 * c13y* c22y* c23x* c23y + 3 * c22x * c13y3* c23x2 - 3 * c13x3 * c22y* c23y2 - 3 * c13x * c13y2* c22y* c23x2 + 3 * c13x2 * c22x* c13y* c23y2,-6 * c21x * c13x* c13y2* c23x* c23y - 6 * c13x * c22x* c13y2* c22y* c23x + 6 * c13x2 * c22x* c13y* c22y* c23y + 3 * c21x * c13y3* c23x2 + 3 * c22x2 * c13y3* c23x + 3 * c21x * c13x2* c13y* c23y2 - 3 * c13x * c21y* c13y2* c23x2 - 3 * c13x * c22x2* c13y2* c23y + c13x2 * c13y * c23x* (6 * c21y * c23y + 3 * c22y2) + c13x3 * (-c21y * c23y2 - 2 * c22y2 * c23y - c23y * (2 * c21y * c23y + c22y2)),c11x * c12y * c13x* c13y* c23x* c23y - c11y * c12x * c13x* c13y* c23x* c23y + 6 * c21x * c22x* c13y3* c23x + 3 * c11x * c12x* c13x* c13y* c23y2 + 6 * c10x * c13x* c13y2* c23x* c23y - 3 * c11x * c12x* c13y2* c23x* c23y - 3 * c11y * c12y* c13x* c13y* c23x2 - 6 * c10y * c13x2* c13y* c23x* c23y - 6 * c20x * c13x* c13y2* c23x* c23y + 3 * c11y * c12y* c13x2* c23x* c23y - 2 * c12x * c12y2* c13x* c23x* c23y - 6 * c21x * c13x* c22x* c13y2* c23y - 6 * c21x * c13x* c13y2* c22y* c23x - 6 * c13x * c21y* c22x* c13y2* c23x + 6 * c21x * c13x2* c13y* c22y* c23y + 2 * c12x2 * c12y* c13y* c23x* c23y + c22x3 * c13y3 - 3 * c10x * c13y3* c23x2 + 3 * c10y * c13x3* c23y2 + 3 * c20x * c13y3* c23x2 + c12y3 * c13x * c23x2 - c12x3 * c13y * c23y2 - 3 * c10x * c13x2* c13y* c23y2 + 3 * c10y * c13x* c13y2* c23x2 - 2 * c11x * c12y* c13x2* c23y2 + c11x * c12y * c13y2* c23x2 - c11y * c12x * c13x2* c23y2 + 2 * c11y * c12x* c13y2* c23x2 + 3 * c20x * c13x2* c13y* c23y2 - c12x * c12y2 * c13y* c23x2 - 3 * c20y * c13x* c13y2* c23x2 + c12x2 * c12y * c13x* c23y2 - 3 * c13x * c22x2* c13y2* c22y + c13x2 * c13y * c23x* (6 * c20y * c23y + 6 * c21y * c22y) + c13x2 * c22x * c13y* (6 * c21y * c23y + 3 * c22y2) + c13x3 * (-2 * c21y * c22y* c23y - c20y * c23y2 - c22y * (2 * c21y * c23y + c22y2) - c23y * (2 * c20y * c23y + 2 * c21y * c22y)),6 * c11x * c12x* c13x* c13y* c22y* c23y + c11x * c12y * c13x* c22x* c13y* c23y + c11x * c12y * c13x* c13y* c22y* c23x - c11y * c12x * c13x* c22x* c13y* c23y - c11y * c12x * c13x* c13y* c22y* c23x - 6 * c11y * c12y* c13x* c22x* c13y* c23x - 6 * c10x * c22x* c13y3* c23x + 6 * c20x * c22x* c13y3* c23x + 6 * c10y * c13x3* c22y* c23y + 2 * c12y3 * c13x* c22x* c23x - 2 * c12x3 * c13y* c22y* c23y + 6 * c10x * c13x* c22x* c13y2* c23y + 6 * c10x * c13x* c13y2* c22y* c23x + 6 * c10y * c13x* c22x* c13y2* c23x - 3 * c11x * c12x* c22x* c13y2* c23y - 3 * c11x * c12x* c13y2* c22y* c23x + 2 * c11x * c12y* c22x* c13y2* c23x + 4 * c11y * c12x* c22x* c13y2* c23x - 6 * c10x * c13x2* c13y* c22y* c23y - 6 * c10y * c13x2* c22x* c13y* c23y - 6 * c10y * c13x2* c13y* c22y* c23x - 4 * c11x * c12y* c13x2* c22y* c23y - 6 * c20x * c13x* c22x* c13y2* c23y - 6 * c20x * c13x* c13y2* c22y* c23x - 2 * c11y * c12x* c13x2* c22y* c23y + 3 * c11y * c12y* c13x2* c22x* c23y + 3 * c11y * c12y* c13x2* c22y* c23x - 2 * c12x * c12y2* c13x* c22x* c23y - 2 * c12x * c12y2* c13x* c22y* c23x - 2 * c12x * c12y2* c22x* c13y* c23x - 6 * c20y * c13x* c22x* c13y2* c23x - 6 * c21x * c13x* c21y* c13y2* c23x - 6 * c21x * c13x* c22x* c13y2* c22y + 6 * c20x * c13x2* c13y* c22y* c23y + 2 * c12x2 * c12y* c13x* c22y* c23y + 2 * c12x2 * c12y* c22x* c13y* c23y + 2 * c12x2 * c12y* c13y* c22y* c23x + 3 * c21x * c22x2* c13y3 + 3 * c21x2 * c13y3* c23x - 3 * c13x * c21y* c22x2* c13y2 - 3 * c21x2 * c13x* c13y2* c23y + c13x2 * c22x * c13y* (6 * c20y * c23y + 6 * c21y * c22y) + c13x2 * c13y * c23x* (6 * c20y * c22y + 3 * c21y2) + c21x * c13x2 * c13y* (6 * c21y * c23y + 3 * c22y2) + c13x3 * (-2 * c20y * c22y* c23y - c23y * (2 * c20y * c22y + c21y2) - c21y * (2 * c21y * c23y + c22y2) - c22y * (2 * c20y * c23y + 2 * c21y * c22y)),c11x * c21x * c12y* c13x* c13y* c23y + c11x * c12y * c13x* c21y* c13y* c23x + c11x * c12y * c13x* c22x* c13y* c22y - c11y * c12x * c21x* c13x* c13y* c23y - c11y * c12x * c13x* c21y* c13y* c23x - c11y * c12x * c13x* c22x* c13y* c22y - 6 * c11y * c21x* c12y* c13x* c13y* c23x - 6 * c10x * c21x* c13y3* c23x + 6 * c20x * c21x* c13y3* c23x + 2 * c21x * c12y3* c13x* c23x + 6 * c10x * c21x* c13x* c13y2* c23y + 6 * c10x * c13x* c21y* c13y2* c23x + 6 * c10x * c13x* c22x* c13y2* c22y + 6 * c10y * c21x* c13x* c13y2* c23x - 3 * c11x * c12x* c21x* c13y2* c23y - 3 * c11x * c12x* c21y* c13y2* c23x - 3 * c11x * c12x* c22x* c13y2* c22y + 2 * c11x * c21x* c12y* c13y2* c23x + 4 * c11y * c12x* c21x* c13y2* c23x - 6 * c10y * c21x* c13x2* c13y* c23y - 6 * c10y * c13x2* c21y* c13y* c23x - 6 * c10y * c13x2* c22x* c13y* c22y - 6 * c20x * c21x* c13x* c13y2* c23y - 6 * c20x * c13x* c21y* c13y2* c23x - 6 * c20x * c13x* c22x* c13y2* c22y + 3 * c11y * c21x* c12y* c13x2* c23y - 3 * c11y * c12y* c13x* c22x2* c13y + 3 * c11y * c12y* c13x2* c21y* c23x + 3 * c11y * c12y* c13x2* c22x* c22y - 2 * c12x * c21x* c12y2* c13x* c23y - 2 * c12x * c21x* c12y2* c13y* c23x - 2 * c12x * c12y2* c13x* c21y* c23x - 2 * c12x * c12y2* c13x* c22x* c22y - 6 * c20y * c21x* c13x* c13y2* c23x - 6 * c21x * c13x* c21y* c22x* c13y2 + 6 * c20y * c13x2* c21y* c13y* c23x + 2 * c12x2 * c21x* c12y* c13y* c23y + 2 * c12x2 * c12y* c21y* c13y* c23x + 2 * c12x2 * c12y* c22x* c13y* c22y - 3 * c10x * c22x2* c13y3 + 3 * c20x * c22x2* c13y3 + 3 * c21x2 * c22x* c13y3 + c12y3 * c13x * c22x2 + 3 * c10y * c13x* c22x2* c13y2 + c11x * c12y * c22x2* c13y2 + 2 * c11y * c12x* c22x2* c13y2 - c12x * c12y2 * c22x2* c13y - 3 * c20y * c13x* c22x2* c13y2 - 3 * c21x2 * c13x* c13y2* c22y + c12x2 * c12y * c13x* (2 * c21y * c23y + c22y2) + c11x * c12x * c13x* c13y* (6 * c21y * c23y + 3 * c22y2) + c21x * c13x2 * c13y* (6 * c20y * c23y + 6 * c21y * c22y) + c12x3 * c13y * (-2 * c21y * c23y - c22y2) + c10y * c13x3 * (6 * c21y * c23y + 3 * c22y2) + c11y * c12x * c13x2* (-2 * c21y * c23y - c22y2) + c11x * c12y * c13x2* (-4 * c21y * c23y - 2 * c22y2) + c10x * c13x2 * c13y* (-6 * c21y * c23y - 3 * c22y2) + c13x2 * c22x * c13y* (6 * c20y * c22y + 3 * c21y2) + c20x * c13x2 * c13y* (6 * c21y * c23y + 3 * c22y2) + c13x3 * (-2 * c20y * c21y* c23y - c22y * (2 * c20y * c22y + c21y2) - c20y * (2 * c21y * c23y + c22y2) - c21y * (2 * c20y * c23y + 2 * c21y * c22y)),-c10x * c11x * c12y* c13x* c13y* c23y + c10x * c11y * c12x* c13x* c13y* c23y + 6 * c10x * c11y* c12y* c13x* c13y* c23x - 6 * c10y * c11x* c12x* c13x* c13y* c23y - c10y * c11x * c12y* c13x* c13y* c23x + c10y * c11y * c12x* c13x* c13y* c23x + c11x * c11y * c12x* c12y* c13x* c23y - c11x * c11y * c12x* c12y* c13y* c23x + c11x * c20x * c12y* c13x* c13y* c23y + c11x * c20y * c12y* c13x* c13y* c23x + c11x * c21x * c12y* c13x* c13y* c22y + c11x * c12y * c13x* c21y* c22x* c13y - c20x * c11y * c12x* c13x* c13y* c23y - 6 * c20x * c11y* c12y* c13x* c13y* c23x - c11y * c12x * c20y* c13x* c13y* c23x - c11y * c12x * c21x* c13x* c13y* c22y - c11y * c12x * c13x* c21y* c22x* c13y - 6 * c11y * c21x* c12y* c13x* c22x* c13y - 6 * c10x * c20x* c13y3* c23x - 6 * c10x * c21x* c22x* c13y3 - 2 * c10x * c12y3* c13x* c23x + 6 * c20x * c21x* c22x* c13y3 + 2 * c20x * c12y3* c13x* c23x + 2 * c21x * c12y3* c13x* c22x + 2 * c10y * c12x3* c13y* c23y - 6 * c10x * c10y* c13x* c13y2* c23x + 3 * c10x * c11x* c12x* c13y2* c23y - 2 * c10x * c11x* c12y* c13y2* c23x - 4 * c10x * c11y* c12x* c13y2* c23x + 3 * c10y * c11x* c12x* c13y2* c23x + 6 * c10x * c10y* c13x2* c13y* c23y + 6 * c10x * c20x* c13x* c13y2* c23y - 3 * c10x * c11y* c12y* c13x2* c23y + 2 * c10x * c12x* c12y2* c13x* c23y + 2 * c10x * c12x* c12y2* c13y* c23x + 6 * c10x * c20y* c13x* c13y2* c23x + 6 * c10x * c21x* c13x* c13y2* c22y + 6 * c10x * c13x* c21y* c22x* c13y2 + 4 * c10y * c11x* c12y* c13x2* c23y + 6 * c10y * c20x* c13x* c13y2* c23x + 2 * c10y * c11y* c12x* c13x2* c23y - 3 * c10y * c11y* c12y* c13x2* c23x + 2 * c10y * c12x* c12y2* c13x* c23x + 6 * c10y * c21x* c13x* c22x* c13y2 - 3 * c11x * c20x* c12x* c13y2* c23y + 2 * c11x * c20x* c12y* c13y2* c23x + c11x * c11y * c12y2* c13x* c23x - 3 * c11x * c12x* c20y* c13y2* c23x - 3 * c11x * c12x* c21x* c13y2* c22y - 3 * c11x * c12x* c21y* c22x* c13y2 + 2 * c11x * c21x* c12y* c22x* c13y2 + 4 * c20x * c11y* c12x* c13y2* c23x + 4 * c11y * c12x* c21x* c22x* c13y2 - 2 * c10x * c12x2* c12y* c13y* c23y - 6 * c10y * c20x* c13x2* c13y* c23y - 6 * c10y * c20y* c13x2* c13y* c23x - 6 * c10y * c21x* c13x2* c13y* c22y - 2 * c10y * c12x2* c12y* c13x* c23y - 2 * c10y * c12x2* c12y* c13y* c23x - 6 * c10y * c13x2* c21y* c22x* c13y - c11x * c11y * c12x2* c13y* c23y - 2 * c11x * c11y2* c13x* c13y* c23x + 3 * c20x * c11y* c12y* c13x2* c23y - 2 * c20x * c12x* c12y2* c13x* c23y - 2 * c20x * c12x* c12y2* c13y* c23x - 6 * c20x * c20y* c13x* c13y2* c23x - 6 * c20x * c21x* c13x* c13y2* c22y - 6 * c20x * c13x* c21y* c22x* c13y2 + 3 * c11y * c20y* c12y* c13x2* c23x + 3 * c11y * c21x* c12y* c13x2* c22y + 3 * c11y * c12y* c13x2* c21y* c22x - 2 * c12x * c20y* c12y2* c13x* c23x - 2 * c12x * c21x* c12y2* c13x* c22y - 2 * c12x * c21x* c12y2* c22x* c13y - 2 * c12x * c12y2* c13x* c21y* c22x - 6 * c20y * c21x* c13x* c22x* c13y2 - c11y2 * c12x * c12y* c13x* c23x + 2 * c20x * c12x2* c12y* c13y* c23y + 6 * c20y * c13x2* c21y* c22x* c13y + 2 * c11x2 * c11y* c13x* c13y* c23y + c11x2 * c12x * c12y* c13y* c23y + 2 * c12x2 * c20y* c12y* c13y* c23x + 2 * c12x2 * c21x* c12y* c13y* c22y + 2 * c12x2 * c12y* c21y* c22x* c13y + c21x3 * c13y3 + 3 * c10x2 * c13y3* c23x - 3 * c10y2 * c13x3* c23y + 3 * c20x2 * c13y3* c23x + c11y3 * c13x2 * c23x - c11x3 * c13y2 * c23y - c11x * c11y2 * c13x2* c23y + c11x2 * c11y * c13y2* c23x - 3 * c10x2 * c13x* c13y2* c23y + 3 * c10y2 * c13x2* c13y* c23x - c11x2 * c12y2 * c13x* c23y + c11y2 * c12x2 * c13y* c23x - 3 * c21x2 * c13x* c21y* c13y2 - 3 * c20x2 * c13x* c13y2* c23y + 3 * c20y2 * c13x2* c13y* c23x + c11x * c12x * c13x* c13y* (6 * c20y * c23y + 6 * c21y * c22y) + c12x3 * c13y * (-2 * c20y * c23y - 2 * c21y * c22y) + c10y * c13x3 * (6 * c20y * c23y + 6 * c21y * c22y) + c11y * c12x * c13x2* (-2 * c20y * c23y - 2 * c21y * c22y) + c12x2 * c12y * c13x* (2 * c20y * c23y + 2 * c21y * c22y) + c11x * c12y * c13x2* (-4 * c20y * c23y - 4 * c21y * c22y) + c10x * c13x2 * c13y* (-6 * c20y * c23y - 6 * c21y * c22y) + c20x * c13x2 * c13y* (6 * c20y * c23y + 6 * c21y * c22y) + c21x * c13x2 * c13y* (6 * c20y * c22y + 3 * c21y2) + c13x3 * (-2 * c20y * c21y* c22y - c20y2 * c23y - c21y * (2 * c20y * c22y + c21y2) - c20y * (2 * c20y * c23y + 2 * c21y * c22y)),-c10x * c11x * c12y* c13x* c13y* c22y + c10x * c11y * c12x* c13x* c13y* c22y + 6 * c10x * c11y* c12y* c13x* c22x* c13y - 6 * c10y * c11x* c12x* c13x* c13y* c22y - c10y * c11x * c12y* c13x* c22x* c13y + c10y * c11y * c12x* c13x* c22x* c13y + c11x * c11y * c12x* c12y* c13x* c22y - c11x * c11y * c12x* c12y* c22x* c13y + c11x * c20x * c12y* c13x* c13y* c22y + c11x * c20y * c12y* c13x* c22x* c13y + c11x * c21x * c12y* c13x* c21y* c13y - c20x * c11y * c12x* c13x* c13y* c22y - 6 * c20x * c11y* c12y* c13x* c22x* c13y - c11y * c12x * c20y* c13x* c22x* c13y - c11y * c12x * c21x* c13x* c21y* c13y - 6 * c10x * c20x* c22x* c13y3 - 2 * c10x * c12y3* c13x* c22x + 2 * c20x * c12y3* c13x* c22x + 2 * c10y * c12x3* c13y* c22y - 6 * c10x * c10y* c13x* c22x* c13y2 + 3 * c10x * c11x* c12x* c13y2* c22y - 2 * c10x * c11x* c12y* c22x* c13y2 - 4 * c10x * c11y* c12x* c22x* c13y2 + 3 * c10y * c11x* c12x* c22x* c13y2 + 6 * c10x * c10y* c13x2* c13y* c22y + 6 * c10x * c20x* c13x* c13y2* c22y - 3 * c10x * c11y* c12y* c13x2* c22y + 2 * c10x * c12x* c12y2* c13x* c22y + 2 * c10x * c12x* c12y2* c22x* c13y + 6 * c10x * c20y* c13x* c22x* c13y2 + 6 * c10x * c21x* c13x* c21y* c13y2 + 4 * c10y * c11x* c12y* c13x2* c22y + 6 * c10y * c20x* c13x* c22x* c13y2 + 2 * c10y * c11y* c12x* c13x2* c22y - 3 * c10y * c11y* c12y* c13x2* c22x + 2 * c10y * c12x* c12y2* c13x* c22x - 3 * c11x * c20x* c12x* c13y2* c22y + 2 * c11x * c20x* c12y* c22x* c13y2 + c11x * c11y * c12y2* c13x* c22x - 3 * c11x * c12x* c20y* c22x* c13y2 - 3 * c11x * c12x* c21x* c21y* c13y2 + 4 * c20x * c11y* c12x* c22x* c13y2 - 2 * c10x * c12x2* c12y* c13y* c22y - 6 * c10y * c20x* c13x2* c13y* c22y - 6 * c10y * c20y* c13x2* c22x* c13y - 6 * c10y * c21x* c13x2* c21y* c13y - 2 * c10y * c12x2* c12y* c13x* c22y - 2 * c10y * c12x2* c12y* c22x* c13y - c11x * c11y * c12x2* c13y* c22y - 2 * c11x * c11y2* c13x* c22x* c13y + 3 * c20x * c11y* c12y* c13x2* c22y - 2 * c20x * c12x* c12y2* c13x* c22y - 2 * c20x * c12x* c12y2* c22x* c13y - 6 * c20x * c20y* c13x* c22x* c13y2 - 6 * c20x * c21x* c13x* c21y* c13y2 + 3 * c11y * c20y* c12y* c13x2* c22x + 3 * c11y * c21x* c12y* c13x2* c21y - 2 * c12x * c20y* c12y2* c13x* c22x - 2 * c12x * c21x* c12y2* c13x* c21y - c11y2 * c12x * c12y* c13x* c22x + 2 * c20x * c12x2* c12y* c13y* c22y - 3 * c11y * c21x2* c12y* c13x* c13y + 6 * c20y * c21x* c13x2* c21y* c13y + 2 * c11x2 * c11y* c13x* c13y* c22y + c11x2 * c12x * c12y* c13y* c22y + 2 * c12x2 * c20y* c12y* c22x* c13y + 2 * c12x2 * c21x* c12y* c21y* c13y - 3 * c10x * c21x2* c13y3 + 3 * c20x * c21x2* c13y3 + 3 * c10x2 * c22x* c13y3 - 3 * c10y2 * c13x3* c22y + 3 * c20x2 * c22x* c13y3 + c21x2 * c12y3 * c13x + c11y3 * c13x2 * c22x - c11x3 * c13y2 * c22y + 3 * c10y * c21x2* c13x* c13y2 - c11x * c11y2 * c13x2* c22y + c11x * c21x2 * c12y* c13y2 + 2 * c11y * c12x* c21x2* c13y2 + c11x2 * c11y * c22x* c13y2 - c12x * c21x2 * c12y2* c13y - 3 * c20y * c21x2* c13x* c13y2 - 3 * c10x2 * c13x* c13y2* c22y + 3 * c10y2 * c13x2* c22x* c13y - c11x2 * c12y2 * c13x* c22y + c11y2 * c12x2 * c22x* c13y - 3 * c20x2 * c13x* c13y2* c22y + 3 * c20y2 * c13x2* c22x* c13y + c12x2 * c12y * c13x* (2 * c20y * c22y + c21y2) + c11x * c12x * c13x* c13y* (6 * c20y * c22y + 3 * c21y2) + c12x3 * c13y * (-2 * c20y * c22y - c21y2) + c10y * c13x3 * (6 * c20y * c22y + 3 * c21y2) + c11y * c12x * c13x2* (-2 * c20y * c22y - c21y2) + c11x * c12y * c13x2* (-4 * c20y * c22y - 2 * c21y2) + c10x * c13x2 * c13y* (-6 * c20y * c22y - 3 * c21y2) + c20x * c13x2 * c13y* (6 * c20y * c22y + 3 * c21y2) + c13x3 * (-2 * c20y * c21y2 - c20y2 * c22y - c20y * (2 * c20y * c22y + c21y2)),-c10x * c11x * c12y* c13x* c21y* c13y + c10x * c11y * c12x* c13x* c21y* c13y + 6 * c10x * c11y* c21x* c12y* c13x* c13y - 6 * c10y * c11x* c12x* c13x* c21y* c13y - c10y * c11x * c21x* c12y* c13x* c13y + c10y * c11y * c12x* c21x* c13x* c13y - c11x * c11y * c12x* c21x* c12y* c13y + c11x * c11y * c12x* c12y* c13x* c21y + c11x * c20x * c12y* c13x* c21y* c13y + 6 * c11x * c12x* c20y* c13x* c21y* c13y + c11x * c20y * c21x* c12y* c13x* c13y - c20x * c11y * c12x* c13x* c21y* c13y - 6 * c20x * c11y* c21x* c12y* c13x* c13y - c11y * c12x * c20y* c21x* c13x* c13y - 6 * c10x * c20x* c21x* c13y3 - 2 * c10x * c21x* c12y3* c13x + 6 * c10y * c20y* c13x3* c21y + 2 * c20x * c21x* c12y3* c13x + 2 * c10y * c12x3* c21y* c13y - 2 * c12x3 * c20y* c21y* c13y - 6 * c10x * c10y* c21x* c13x* c13y2 + 3 * c10x * c11x* c12x* c21y* c13y2 - 2 * c10x * c11x* c21x* c12y* c13y2 - 4 * c10x * c11y* c12x* c21x* c13y2 + 3 * c10y * c11x* c12x* c21x* c13y2 + 6 * c10x * c10y* c13x2* c21y* c13y + 6 * c10x * c20x* c13x* c21y* c13y2 - 3 * c10x * c11y* c12y* c13x2* c21y + 2 * c10x * c12x* c21x* c12y2* c13y + 2 * c10x * c12x* c12y2* c13x* c21y + 6 * c10x * c20y* c21x* c13x* c13y2 + 4 * c10y * c11x* c12y* c13x2* c21y + 6 * c10y * c20x* c21x* c13x* c13y2 + 2 * c10y * c11y* c12x* c13x2* c21y - 3 * c10y * c11y* c21x* c12y* c13x2 + 2 * c10y * c12x* c21x* c12y2* c13x - 3 * c11x * c20x* c12x* c21y* c13y2 + 2 * c11x * c20x* c21x* c12y* c13y2 + c11x * c11y * c21x* c12y2* c13x - 3 * c11x * c12x* c20y* c21x* c13y2 + 4 * c20x * c11y* c12x* c21x* c13y2 - 6 * c10x * c20y* c13x2* c21y* c13y - 2 * c10x * c12x2* c12y* c21y* c13y - 6 * c10y * c20x* c13x2* c21y* c13y - 6 * c10y * c20y* c21x* c13x2* c13y - 2 * c10y * c12x2* c21x* c12y* c13y - 2 * c10y * c12x2* c12y* c13x* c21y - c11x * c11y * c12x2* c21y* c13y - 4 * c11x * c20y* c12y* c13x2* c21y - 2 * c11x * c11y2* c21x* c13x* c13y + 3 * c20x * c11y* c12y* c13x2* c21y - 2 * c20x * c12x* c21x* c12y2* c13y - 2 * c20x * c12x* c12y2* c13x* c21y - 6 * c20x * c20y* c21x* c13x* c13y2 - 2 * c11y * c12x* c20y* c13x2* c21y + 3 * c11y * c20y* c21x* c12y* c13x2 - 2 * c12x * c20y* c21x* c12y2* c13x - c11y2 * c12x * c21x* c12y* c13x + 6 * c20x * c20y* c13x2* c21y* c13y + 2 * c20x * c12x2* c12y* c21y* c13y + 2 * c11x2 * c11y* c13x* c21y* c13y + c11x2 * c12x * c12y* c21y* c13y + 2 * c12x2 * c20y* c21x* c12y* c13y + 2 * c12x2 * c20y* c12y* c13x* c21y + 3 * c10x2 * c21x* c13y3 - 3 * c10y2 * c13x3* c21y + 3 * c20x2 * c21x* c13y3 + c11y3 * c21x * c13x2 - c11x3 * c21y * c13y2 - 3 * c20y2 * c13x3* c21y - c11x * c11y2 * c13x2* c21y + c11x2 * c11y * c21x* c13y2 - 3 * c10x2 * c13x* c21y* c13y2 + 3 * c10y2 * c21x* c13x2* c13y - c11x2 * c12y2 * c13x* c21y + c11y2 * c12x2 * c21x* c13y - 3 * c20x2 * c13x* c21y* c13y2 + 3 * c20y2 * c21x* c13x2* c13y,c10x * c10y * c11x* c12y* c13x* c13y - c10x * c10y * c11y* c12x* c13x* c13y + c10x * c11x * c11y* c12x* c12y* c13y - c10y * c11x * c11y* c12x* c12y* c13x - c10x * c11x * c20y* c12y* c13x* c13y + 6 * c10x * c20x* c11y* c12y* c13x* c13y + c10x * c11y * c12x* c20y* c13x* c13y - c10y * c11x * c20x* c12y* c13x* c13y - 6 * c10y * c11x* c12x* c20y* c13x* c13y + c10y * c20x * c11y* c12x* c13x* c13y - c11x * c20x * c11y* c12x* c12y* c13y + c11x * c11y * c12x* c20y* c12y* c13x + c11x * c20x * c20y* c12y* c13x* c13y - c20x * c11y * c12x* c20y* c13x* c13y - 2 * c10x * c20x* c12y3* c13x + 2 * c10y * c12x3* c20y* c13y - 3 * c10x * c10y* c11x* c12x* c13y2 - 6 * c10x * c10y* c20x* c13x* c13y2 + 3 * c10x * c10y* c11y* c12y* c13x2 - 2 * c10x * c10y* c12x* c12y2* c13x - 2 * c10x * c11x* c20x* c12y* c13y2 - c10x * c11x * c11y* c12y2* c13x + 3 * c10x * c11x* c12x* c20y* c13y2 - 4 * c10x * c20x* c11y* c12x* c13y2 + 3 * c10y * c11x* c20x* c12x* c13y2 + 6 * c10x * c10y* c20y* c13x2* c13y + 2 * c10x * c10y* c12x2* c12y* c13y + 2 * c10x * c11x* c11y2* c13x* c13y + 2 * c10x * c20x* c12x* c12y2* c13y + 6 * c10x * c20x* c20y* c13x* c13y2 - 3 * c10x * c11y* c20y* c12y* c13x2 + 2 * c10x * c12x* c20y* c12y2* c13x + c10x * c11y2 * c12x* c12y* c13x + c10y * c11x * c11y* c12x2* c13y + 4 * c10y * c11x* c20y* c12y* c13x2 - 3 * c10y * c20x* c11y* c12y* c13x2 + 2 * c10y * c20x* c12x* c12y2* c13x + 2 * c10y * c11y* c12x* c20y* c13x2 + c11x * c20x * c11y* c12y2* c13x - 3 * c11x * c20x* c12x* c20y* c13y2 - 2 * c10x * c12x2* c20y* c12y* c13y - 6 * c10y * c20x* c20y* c13x2* c13y - 2 * c10y * c20x* c12x2* c12y* c13y - 2 * c10y * c11x2* c11y* c13x* c13y - c10y * c11x2 * c12x* c12y* c13y - 2 * c10y * c12x2* c20y* c12y* c13x - 2 * c11x * c20x* c11y2* c13x* c13y - c11x * c11y * c12x2* c20y* c13y + 3 * c20x * c11y* c20y* c12y* c13x2 - 2 * c20x * c12x* c20y* c12y2* c13x - c20x * c11y2 * c12x* c12y* c13x + 3 * c10y2 * c11x* c12x* c13x* c13y + 3 * c11x * c12x* c20y2* c13x* c13y + 2 * c20x * c12x2* c20y* c12y* c13y - 3 * c10x2 * c11y* c12y* c13x* c13y + 2 * c11x2 * c11y* c20y* c13x* c13y + c11x2 * c12x * c20y* c12y* c13y - 3 * c20x2 * c11y* c12y* c13x* c13y - c10x3 * c13y3 + c10y3 * c13x3 + c20x3 * c13y3 - c20y3 * c13x3 - 3 * c10x * c20x2* c13y3 - c10x * c11y3 * c13x2 + 3 * c10x2 * c20x* c13y3 + c10y * c11x3 * c13y2 + 3 * c10y * c20y2* c13x3 + c20x * c11y3 * c13x2 + c10x2 * c12y3 * c13x - 3 * c10y2 * c20y* c13x3 - c10y2 * c12x3 * c13y + c20x2 * c12y3 * c13x - c11x3 * c20y * c13y2 - c12x3 * c20y2 * c13y - c10x * c11x2 * c11y* c13y2 + c10y * c11x * c11y2* c13x2 - 3 * c10x * c10y2* c13x2* c13y - c10x * c11y2 * c12x2* c13y + c10y * c11x2 * c12y2* c13x - c11x * c11y2 * c20y* c13x2 + 3 * c10x2 * c10y* c13x* c13y2 + c10x2 * c11x * c12y* c13y2 + 2 * c10x2 * c11y* c12x* c13y2 - 2 * c10y2 * c11x* c12y* c13x2 - c10y2 * c11y * c12x* c13x2 + c11x2 * c20x * c11y* c13y2 - 3 * c10x * c20y2* c13x2* c13y + 3 * c10y * c20x2* c13x* c13y2 + c11x * c20x2 * c12y* c13y2 - 2 * c11x * c20y2* c12y* c13x2 + c20x * c11y2 * c12x2* c13y - c11y * c12x * c20y2* c13x2 - c10x2 * c12x * c12y2* c13y - 3 * c10x2 * c20y* c13x* c13y2 + 3 * c10y2 * c20x* c13x2* c13y + c10y2 * c12x2 * c12y* c13x - c11x2 * c20y * c12y2* c13x + 2 * c20x2 * c11y* c12x* c13y2 + 3 * c20x * c20y2* c13x2* c13y - c20x2 * c12x * c12y2* c13y - 3 * c20x2 * c20y* c13x* c13y2 + c12x2 * c20y2 * c12y* c13x);
  double[] roots=poly.getRootsInInterval(0,1);
  for (int i=0; i < roots.length; i++) {
    double s=roots[i];
    double[] xRoots=new Polynomial(c13x,c12x,c11x,c10x - c20x - s * c21x - s * s * c22x - s * s * s* c23x).getRoots();
    double[] yRoots=new Polynomial(c13y,c12y,c11y,c10y - c20y - s * c21y - s * s * c22y - s * s * s* c23y).getRoots();
    if (xRoots.length > 0 && yRoots.length > 0) {
      double TOLERANCE=1e-4;
      checkRoots:       for (int j=0; j < xRoots.length; j++) {
        double xRoot=xRoots[j];
        if (0 <= xRoot && xRoot <= 1) {
          for (int k=0; k < yRoots.length; k++) {
            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {
              result.put(xRoot,c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20))));
              break checkRoots;
            }
          }
        }
      }
    }
  }
  if (result.size() > 0) {
    result.status=Status.INTERSECTION;
  }
  return result;
}
