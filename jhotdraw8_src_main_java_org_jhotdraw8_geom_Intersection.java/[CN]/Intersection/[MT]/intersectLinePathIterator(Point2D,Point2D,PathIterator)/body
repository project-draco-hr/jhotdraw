{
  Intersection result=new Intersection(Status.NO_INTERSECTION);
  final double ax=a.getX();
  final double ay=a.getY();
  final double bx=b.getX();
  final double by=b.getY();
  final double[] seg=new double[6];
  double firstx=0, firsty=0;
  double lastx=0, lasty=0;
  double x, y;
  for (; !pit.isDone(); pit.next()) {
    Intersection inter;
switch (pit.currentSegment(seg)) {
case PathIterator.SEG_CLOSE:
      inter=Intersection.intersectLineLine(ax,ay,bx,by,lastx,lasty,firstx,firsty);
    result.appendPoints(inter.points,inter.ts);
  break;
case PathIterator.SEG_CUBICTO:
break;
case PathIterator.SEG_LINETO:
x=seg[0];
y=seg[1];
inter=Intersection.intersectLineLine(ax,ay,bx,by,lastx,lasty,x,y);
result.appendPoints(inter.points,inter.ts);
lastx=x;
lasty=y;
break;
case PathIterator.SEG_MOVETO:
lastx=firstx=seg[0];
lasty=firsty=seg[1];
break;
case PathIterator.SEG_QUADTO:
break;
}
}
if (!result.isEmpty()) {
result.status=Status.INTERSECTION;
}
return result;
}
