{
  final ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");
  LinkedList<Action> actions=new LinkedList<Action>();
  if (get(TRANSFORM) != null) {
    actions.add(new AbstractAction(labels.getString("edit.removeTransform.text")){
      @Override public void actionPerformed(      ActionEvent evt){
        willChange();
        fireUndoableEditHappened(TRANSFORM.setUndoable(SVGImageFigure.this,null));
        changed();
      }
    }
);
  }
  if (bufferedImage != null) {
    if (rectangle.width != bufferedImage.getWidth() || rectangle.height != bufferedImage.getHeight()) {
      actions.add(new AbstractAction(labels.getString("edit.setToImageSize.text")){
        @Override public void actionPerformed(        ActionEvent evt){
          Object geometry=getTransformRestoreData();
          willChange();
          rectangle=new Rectangle2D.Double(rectangle.x - (bufferedImage.getWidth() - rectangle.width) / 2d,rectangle.y - (bufferedImage.getHeight() - rectangle.height) / 2d,bufferedImage.getWidth(),bufferedImage.getHeight());
          fireUndoableEditHappened(new TransformRestoreEdit(SVGImageFigure.this,geometry,getTransformRestoreData()));
          changed();
        }
      }
);
    }
    double imageRatio=bufferedImage.getHeight() / (double)bufferedImage.getWidth();
    double figureRatio=rectangle.height / rectangle.width;
    if (Math.abs(imageRatio - figureRatio) > 0.001) {
      actions.add(new AbstractAction(labels.getString("edit.adjustHeightToImageAspect.text")){
        @Override public void actionPerformed(        ActionEvent evt){
          Object geometry=getTransformRestoreData();
          willChange();
          double newHeight=bufferedImage.getHeight() * rectangle.width / bufferedImage.getWidth();
          rectangle=new Rectangle2D.Double(rectangle.x,rectangle.y - (newHeight - rectangle.height) / 2d,rectangle.width,newHeight);
          fireUndoableEditHappened(new TransformRestoreEdit(SVGImageFigure.this,geometry,getTransformRestoreData()));
          changed();
        }
      }
);
      actions.add(new AbstractAction(labels.getString("edit.adjustWidthToImageAspect.text")){
        @Override public void actionPerformed(        ActionEvent evt){
          Object geometry=getTransformRestoreData();
          willChange();
          double newWidth=bufferedImage.getWidth() * rectangle.height / bufferedImage.getHeight();
          rectangle=new Rectangle2D.Double(rectangle.x - (newWidth - rectangle.width) / 2d,rectangle.y,newWidth,rectangle.height);
          fireUndoableEditHappened(new TransformRestoreEdit(SVGImageFigure.this,geometry,getTransformRestoreData()));
          changed();
        }
      }
);
    }
  }
  return actions;
}
