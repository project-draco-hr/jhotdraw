{
  CssTokenizerInterface tt=new CssTokenizer(new CharBufferReader(in));
  tt.setSkipWhitespaces(true);
  if (tt.nextToken() == CssTokenizer.TT_IDENT) {
    if ("none".equals(tt.currentStringValue())) {
      in.position(in.limit());
      return null;
    }
 else {
      throw new ParseException("CSS RadialGradient: \"<none>\" or \"<radial-gradient>(\"  expected",tt.getStartPosition());
    }
  }
  if (tt.currentToken() != CssTokenizer.TT_FUNCTION) {
    throw new ParseException("CSS RadialGradient: \"<radial-gradient>(\"  expected",tt.getStartPosition());
  }
switch (tt.currentStringValue()) {
case "radial-gradient":
    break;
default :
  throw new ParseException("CSS RadialGradient: \"<radial-gradient>(\"  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
}
double focusAngle=0;
double focusDistance=0;
double centerX=0.5;
double centerY=0.5;
double radius=1;
Boolean isProportional=null;
while (tt.nextToken() == CssTokenizer.TT_IDENT) {
if ("focus-angle".equals(tt.currentStringValue())) {
switch (tt.nextToken()) {
case CssTokenizer.TT_DIMENSION:
    if (!"deg".equals(tt.currentStringValue())) {
      throw new ParseException("CSS RadialGradient: expected focus-angle given in degrees with unit  \"deg\", found: " + tt.currentStringValue(),tt.getStartPosition());
    }
  focusAngle=tt.currentNumericValue().doubleValue();
break;
case CssTokenizer.TT_NUMBER:
focusAngle=tt.currentNumericValue().doubleValue();
break;
default :
throw new ParseException("CSS RadialGradient: focus-angle  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
}
}
 else if ("focus-distance".equals(tt.currentStringValue())) {
switch (tt.nextToken()) {
case CssTokenizer.TT_PERCENTAGE:
focusDistance=tt.currentNumericValue().doubleValue() / 100;
break;
case CssTokenizer.TT_NUMBER:
focusDistance=tt.currentNumericValue().doubleValue();
break;
default :
throw new ParseException("CSS RadialGradient: focus-distance  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
}
}
 else if ("center".equals(tt.currentStringValue())) {
switch (tt.nextToken()) {
case CssTokenizer.TT_PERCENTAGE:
if (isProportional == null) {
isProportional=true;
}
if (!isProportional) throw new ParseException("CSS RadialGradient: absolute value  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
centerX=tt.currentNumericValue().doubleValue() / 100;
break;
case CssTokenizer.TT_NUMBER:
if (isProportional == null) {
isProportional=false;
}
if (isProportional) throw new ParseException("CSS RadialGradient: percentage  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
centerX=tt.currentNumericValue().doubleValue();
break;
default :
throw new ParseException("CSS RadialGradient: center x-value  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
}
switch (tt.nextToken()) {
case CssTokenizer.TT_PERCENTAGE:
if (isProportional == null) {
isProportional=true;
}
if (!isProportional) throw new ParseException("CSS RadialGradient: absolute value  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
centerY=tt.currentNumericValue().doubleValue() / 100;
break;
case CssTokenizer.TT_NUMBER:
if (isProportional == null) {
isProportional=false;
}
if (isProportional) throw new ParseException("CSS RadialGradient: percentage  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
centerY=tt.currentNumericValue().doubleValue();
break;
default :
throw new ParseException("CSS RadialGradient: center y-value  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
}
}
 else if ("radius".equals(tt.currentStringValue())) {
switch (tt.nextToken()) {
case CssTokenizer.TT_PERCENTAGE:
if (isProportional == null) {
isProportional=true;
}
if (!isProportional) throw new ParseException("CSS RadialGradient: absolute value expected, found: " + tt.currentStringValue(),tt.getStartPosition());
radius=tt.currentNumericValue().doubleValue() / 100;
break;
case CssTokenizer.TT_NUMBER:
if (isProportional == null) {
isProportional=false;
}
if (isProportional) throw new ParseException("CSS RadialGradient: percentage  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
radius=tt.currentNumericValue().doubleValue();
break;
default :
throw new ParseException("CSS RadialGradient: center x-value  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
}
}
 else {
tt.pushBack();
break;
}
if (tt.nextToken() != ',') {
tt.pushBack();
}
}
CycleMethod cycleMethod=CycleMethod.NO_CYCLE;
if (tt.nextToken() == CssTokenizer.TT_IDENT) {
if ("repeat".equals(tt.currentStringValue())) {
cycleMethod=CycleMethod.REPEAT;
}
 else if ("reflect".equals(tt.currentStringValue())) {
cycleMethod=CycleMethod.REFLECT;
}
 else {
tt.pushBack();
}
}
 else {
tt.pushBack();
}
if (tt.nextToken() != ',') {
tt.pushBack();
}
List<CssStop> stops=new ArrayList<>();
while (tt.nextToken() != ')' && tt.currentToken() != CssTokenizer.TT_EOF) {
tt.pushBack();
stops.add(parseColorStop(tt));
if (tt.nextToken() != ',') {
tt.pushBack();
}
}
if (tt.currentToken() != ')') {
throw new ParseException("CSS RadialGradient: ')'  expected, found: " + tt.currentStringValue(),tt.getStartPosition());
}
tt.skipWhitespace();
if (isProportional == null) isProportional=true;
return new CssRadialGradient(focusAngle,focusDistance,centerX,centerY,radius,isProportional,cycleMethod,stops.toArray(new CssStop[stops.size()]));
}
