{
  CssTokenizerInterface tt=new CssTokenizer(new StringReader(in.toString()));
  tt.setSkipWhitespaces(true);
  if (tt.nextToken() == CssTokenizer.TT_IDENT) {
    if ("none".equals(tt.currentStringValue())) {
      in.position(in.limit());
      return null;
    }
 else {
      throw new ParseException("CSS RadialGradient: \"<none>\" or \"<radial-gradient>(\"  expected",tt.getPosition());
    }
  }
  if (tt.currentToken() != CssTokenizer.TT_FUNCTION) {
    throw new ParseException("CSS RadialGradient: \"<radial-gradient>(\"  expected",tt.getPosition());
  }
  boolean isRadial=false;
  String func;
switch (tt.currentStringValue()) {
case "radial-gradient":
    isRadial=true;
  break;
default :
throw new ParseException("CSS RadialGradient: \"<radial-gradient>(\"  expected, found: " + tt.currentStringValue(),tt.getPosition());
}
boolean needComma=false;
PointToPoint fromTo=null;
if (tt.nextToken() == CssTokenizer.TT_IDENT && "from".equals(tt.currentStringValue())) {
fromTo=parsePointToPoint(tt);
needComma=true;
}
 else if (tt.currentToken() == CssTokenizer.TT_IDENT && "to".equals(tt.currentStringValue())) {
fromTo=null;
needComma=true;
}
 else {
fromTo=new PointToPoint(0.0,0.0,0.0,1.0,true);
tt.pushBack();
}
if (needComma) {
if (tt.nextToken() != ',') {
throw new ParseException("CSS RadialGradient: ','  expected, found: " + tt.currentStringValue(),tt.getPosition());
}
needComma=false;
}
CycleMethod cycleMethod=CycleMethod.NO_CYCLE;
if (tt.nextToken() == CssTokenizer.TT_IDENT) {
if ("repeat".equals(tt.currentStringValue())) {
cycleMethod=CycleMethod.REPEAT;
needComma=true;
}
 else if ("reflect".equals(tt.currentStringValue())) {
cycleMethod=CycleMethod.REFLECT;
needComma=true;
}
 else {
tt.pushBack();
}
}
 else {
tt.pushBack();
}
if (needComma) {
if (tt.nextToken() != ',') {
throw new ParseException("CSS RadialGradient: ','  expected, found: " + tt.currentStringValue(),tt.getPosition());
}
needComma=false;
}
List<CssStop> stops=new ArrayList<>();
do {
stops.add(parseColorStop(tt));
}
 while (tt.nextToken() == ',');
if (tt.currentToken() != ')') {
throw new ParseException("CSS RadialGradient: ')'  expected, found: " + tt.currentStringValue(),tt.getPosition());
}
tt.skipWhitespace();
in.position(tt.getPosition());
return null;
}
