{
  if (points.length < 3) {
    return points.clone();
  }
  Point[] sorted=points.clone();
  Arrays.sort(sorted,new Comparator<Point>(){
    @Override public int compare(    Point o1,    Point o2){
      int v=o1.x - o2.x;
      return (v == 0) ? o1.y - o2.y : v;
    }
  }
);
  Point[] hull=new Point[sorted.length + 2];
  int upper=0;
  hull[upper++]=sorted[0];
  hull[upper++]=sorted[1];
  for (int i=2; i < sorted.length; i++) {
    hull[upper++]=sorted[i];
    while (upper > 2 && !isRightTurn(hull[upper - 3],hull[upper - 2],hull[upper - 1])) {
      hull[upper - 2]=hull[upper - 1];
      upper--;
    }
  }
  int lower=upper;
  hull[lower++]=sorted[sorted.length - 2];
  for (int i=sorted.length - 3; i >= 0; i--) {
    hull[lower++]=sorted[i];
    while (lower - upper > 1 && !isRightTurn(hull[lower - 3],hull[lower - 2],hull[lower - 1])) {
      hull[lower - 2]=hull[lower - 1];
      lower--;
    }
  }
  lower-=1;
  Point[] convexHull=new Point[lower];
  System.arraycopy(hull,0,convexHull,0,lower);
  return convexHull;
}
