{
  int numCoords=0;
  int type=0;
  int size=nodes.size();
  if (index > size)   return SEG_CLOSE;
  BezierNode previous=nodes.get((index + size - 1) % size);
  BezierNode current=nodes.get(index % size);
  if (index == 0) {
    type=SEG_LINETO;
    coords[0]=(float)current.getX0();
    coords[1]=(float)current.getY0();
    return type;
  }
  if (!previous.isC2()) {
    if (!current.isC1()) {
      numCoords=1;
      type=SEG_LINETO;
      coords[0]=(float)current.getX0();
      coords[1]=(float)current.getY0();
    }
 else {
      numCoords=2;
      type=SEG_QUADTO;
      coords[0]=(float)current.getX1();
      coords[1]=(float)current.getY1();
      coords[2]=(float)current.getX0();
      coords[3]=(float)current.getY0();
    }
  }
 else {
    if (!current.isC1()) {
      numCoords=2;
      type=SEG_QUADTO;
      coords[0]=(float)previous.getX2();
      coords[1]=(float)previous.getY2();
      coords[2]=(float)current.getX0();
      coords[3]=(float)current.getY0();
    }
 else {
      numCoords=3;
      type=SEG_CUBICTO;
      coords[0]=(float)previous.getX2();
      coords[1]=(float)previous.getY2();
      coords[2]=(float)current.getX1();
      coords[3]=(float)current.getY1();
      coords[4]=(float)current.getX0();
      coords[5]=(float)current.getY0();
    }
  }
  if (affine != null) {
    affine.transform(coords,0,coords,0,numCoords);
  }
  return type;
}
