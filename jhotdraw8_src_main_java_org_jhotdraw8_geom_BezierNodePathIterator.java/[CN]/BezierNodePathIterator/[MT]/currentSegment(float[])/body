{
  int numCoords=0;
  int type=0;
  if (index == nodes.size()) {
    if (nodes.size() > 1) {
      BezierNode previous=nodes.get(nodes.size() - 1);
      BezierNode current=nodes.get(0);
      if (!previous.isC2()) {
        if (!current.isC1()) {
          numCoords=1;
          type=SEG_LINETO;
          coords[0]=(float)current.getX0();
          coords[1]=(float)current.getY0();
        }
 else {
          numCoords=2;
          type=SEG_QUADTO;
          coords[0]=(float)current.getX1();
          coords[1]=(float)current.getY1();
          coords[2]=(float)current.getX0();
          coords[3]=(float)current.getY0();
        }
      }
 else {
        if (!current.isC1()) {
          numCoords=2;
          type=SEG_QUADTO;
          coords[0]=(float)previous.getX2();
          coords[1]=(float)previous.getY2();
          coords[2]=(float)current.getX0();
          coords[3]=(float)current.getY0();
        }
 else {
          numCoords=3;
          type=SEG_CUBICTO;
          coords[0]=(float)previous.getX2();
          coords[1]=(float)previous.getY2();
          coords[2]=(float)current.getX1();
          coords[3]=(float)current.getY1();
          coords[4]=(float)current.getX0();
          coords[5]=(float)current.getY0();
        }
      }
    }
  }
 else   if (index > nodes.size()) {
    return SEG_CLOSE;
  }
 else   if (index == 0) {
    BezierNode current=nodes.get(index);
    coords[0]=(float)current.getX0();
    coords[1]=(float)current.getY0();
    numCoords=1;
    type=SEG_MOVETO;
  }
 else   if (index < nodes.size()) {
    BezierNode current=nodes.get(index);
    BezierNode previous=nodes.get(index - 1);
    if (current.isMoveTo()) {
      numCoords=1;
      type=SEG_MOVETO;
      coords[0]=(float)current.getX0();
      coords[1]=(float)current.getY0();
    }
 else     if (!previous.isC2()) {
      if (current.isC1()) {
        numCoords=1;
        type=SEG_LINETO;
        coords[0]=(float)current.getX0();
        coords[1]=(float)current.getY0();
      }
 else {
        numCoords=2;
        type=SEG_QUADTO;
        coords[0]=(float)current.getX1();
        coords[1]=(float)current.getY1();
        coords[2]=(float)current.getX0();
        coords[3]=(float)current.getY0();
      }
    }
 else {
      if (!current.isC1()) {
        numCoords=2;
        type=SEG_QUADTO;
        coords[0]=(float)previous.getX2();
        coords[1]=(float)previous.getY2();
        coords[2]=(float)current.getX0();
        coords[3]=(float)current.getY0();
      }
 else {
        numCoords=3;
        type=SEG_CUBICTO;
        coords[0]=(float)previous.getX2();
        coords[1]=(float)previous.getY2();
        coords[2]=(float)current.getX1();
        coords[3]=(float)current.getY1();
        coords[4]=(float)current.getX0();
        coords[5]=(float)current.getY0();
      }
    }
  }
  if (affine != null) {
    affine.transform(coords,0,coords,0,numCoords);
  }
  return type;
}
