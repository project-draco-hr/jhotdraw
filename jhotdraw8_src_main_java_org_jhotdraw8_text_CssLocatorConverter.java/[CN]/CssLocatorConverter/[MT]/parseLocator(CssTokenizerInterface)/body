{
  Locator color=null;
  tt.setSkipWhitespaces(true);
switch (tt.nextToken()) {
case CssTokenizerInterface.TT_FUNCTION:
    if (!"relative".equals(tt.currentStringValue())) {
      throw new ParseException("Locator: function 'relative(' expected, found:" + tt.currentValue(),tt.getStartPosition());
    }
  break;
default :
throw new ParseException("Locator: function expected, found:" + tt.currentValue(),tt.getStartPosition());
}
double x, y;
switch (tt.nextToken()) {
case CssTokenizerInterface.TT_NUMBER:
x=tt.currentNumericValue().doubleValue();
break;
case CssTokenizer.TT_PERCENTAGE:
x=tt.currentNumericValue().doubleValue() / 100.0;
break;
default :
throw new ParseException("RelativeLocator: x-value expected but found " + tt.currentValue(),tt.getStartPosition());
}
switch (tt.nextToken()) {
case ',':
break;
default :
tt.pushBack();
break;
}
switch (tt.nextToken()) {
case CssTokenizerInterface.TT_NUMBER:
y=tt.currentNumericValue().doubleValue();
break;
case CssTokenizer.TT_PERCENTAGE:
y=tt.currentNumericValue().doubleValue() / 100.0;
break;
default :
throw new ParseException("RelativeLocator: y-value expected but found " + tt.currentValue(),tt.getStartPosition());
}
if (tt.nextToken() != ')') {
throw new ParseException("RelativeLocator: ')' expected but found " + tt.currentValue(),tt.getStartPosition());
}
return new RelativeLocator(x,y);
}
