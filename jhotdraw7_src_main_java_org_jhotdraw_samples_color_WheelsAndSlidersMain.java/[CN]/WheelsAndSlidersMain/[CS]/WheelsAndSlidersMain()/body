{
  initComponents();
  models=new LinkedList<ColorSliderModel>();
  handler=new Handler();
  previewLabel.setOpaque(true);
  chooserPanel.add(createColorWheelChooser(new HSVRGBColorSystem(),0,1,2,JColorWheel.Type.SQUARE));
  chooserPanel.add(createColorWheelChooser(new HSLRGBColorSystem()));
  chooserPanel.add(createColorWheelChooser(new HSLRGBColorSystem(),0,2,1));
  chooserPanel.add(new JPanel());
  chooserPanel.add(createColorWheelChooser(new HSVRYBColorSystem()));
  chooserPanel.add(createColorWheelChooser(new HSLRYBColorSystem()));
  chooserPanel.add(createColorWheelChooser(new HSLRYBColorSystem(),0,2,1));
  chooserPanel.add(new JPanel());
  chooserPanel.add(createColorWheelChooser(new ColorSpaceColorSystem(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_LINEAR_RGB),"Linear RGB"),0,1,2,JColorWheel.Type.SQUARE));
  chooserPanel.add(createColorWheelChooser(new ColorSpaceColorSystem(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_CIEXYZ),"CIE XYZ"),1,0,2,JColorWheel.Type.SQUARE));
  chooserPanel.add(createColorWheelChooser(new ColorSpaceColorSystem(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_PYCC),"Photo YCC"),1,2,0,JColorWheel.Type.SQUARE));
  chooserPanel.add(new JPanel());
  chooserPanel.add(createColorWheelChooser(new ColorSpaceColorSystem(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_sRGB),"sRGB"),0,1,2,JColorWheel.Type.SQUARE));
  chooserPanel.add(new JPanel());
  chooserPanel.add(createColorWheelChooser(new MunsellUPLabColorSystem(),2,1,0,JColorWheel.Type.SQUARE));
  chooserPanel.add(createColorWheelChooser(new MunsellUPLabColorSystem(),2,1,0,JColorWheel.Type.POLAR));
  chooserPanel.add(createSliderChooser(new RGBColorSystem()));
  chooserPanel.add(createSliderChooser(new CMYKICCColorSystem()));
  chooserPanel.add(createSliderChooser(new CMYKNominalColorSystem()));
  chooserPanel.add(createSliderChooser(new MunsellUPLabColorSystem()));
}
