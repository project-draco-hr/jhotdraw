{
  double[] coords=new double[6];
  ArrayList<Subpath> subpaths=new ArrayList<>();
{
    int prevType=-1;
    double lastX=0;
    double lastY=0;
    double firstX=0;
    double firstY=0;
    boolean inSubpath=false;
    for (PathIterator i=s.getPathIterator(null); !i.isDone(); i.next()) {
      int type=i.currentSegment(coords);
switch (type) {
case PathIterator.SEG_MOVETO:
        if (inSubpath) {
          subpaths.add(new Subpath(prevType,firstX,firstY,lastX,lastY,false));
        }
      lastX=coords[0];
    lastY=coords[1];
  firstX=lastX;
firstY=lastY;
inSubpath=true;
break;
case PathIterator.SEG_LINETO:
lastX=coords[0];
lastY=coords[1];
break;
case PathIterator.SEG_QUADTO:
lastX=coords[2];
lastY=coords[3];
break;
case PathIterator.SEG_CUBICTO:
lastX=coords[4];
lastY=coords[5];
break;
case PathIterator.SEG_CLOSE:
if (inSubpath) {
subpaths.add(new Subpath(prevType,firstX,firstY,lastX,lastY,true));
inSubpath=false;
}
break;
}
prevType=type;
}
if (inSubpath) {
subpaths.add(new Subpath(prevType,firstX,firstY,lastX,lastY,false));
}
}
out=new Path2D.Double();
{
boolean inSubpath=false;
int si=0;
double x=0, c1x, c2x;
double y=0, c1y, c2y;
for (PathIterator i=s.getPathIterator(null); !i.isDone(); i.next()) {
int type=i.currentSegment(coords);
Subpath sp=subpaths.get(si);
switch (type) {
case PathIterator.SEG_MOVETO:
x=coords[0];
y=coords[1];
if (sp.closed) {
prevX=sp.lastX;
prevY=sp.lastY;
prevTangent=Geom.hcrossProduct(sp.lastX,sp.lastY,sp.firstX,sp.firstY);
}
 else {
prevTangent=null;
}
movePending=true;
moveTo(x,y);
if (inSubpath) {
si++;
}
inSubpath=true;
break;
case PathIterator.SEG_LINETO:
x=coords[0];
y=coords[1];
lineTo(x,y);
break;
case PathIterator.SEG_QUADTO:
c1x=coords[0];
c1y=coords[1];
x=coords[2];
y=coords[3];
quadTo(c1x,c1y,x,y);
break;
case PathIterator.SEG_CUBICTO:
c1x=coords[0];
c1y=coords[1];
c2x=coords[2];
c2y=coords[3];
x=coords[4];
y=coords[5];
curveTo(c1x,c1y,c2x,c2y,x,y);
break;
case PathIterator.SEG_CLOSE:
closePath(sp.firstX,sp.lastY);
if (inSubpath) {
si++;
inSubpath=false;
}
break;
}
prevX=x;
prevY=y;
}
}
return out;
}
