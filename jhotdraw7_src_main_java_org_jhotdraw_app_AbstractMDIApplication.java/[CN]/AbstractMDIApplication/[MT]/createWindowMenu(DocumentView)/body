{
  ResourceMap labels=getResourceMap();
  JMenu m;
  JMenuItem mi;
  m=new JMenu();
  final JMenu windowMenu=m;
  m.setName("Window.Menu");
  labels.injectComponent(m);
  m.add(getAction(ArrangeAction.CASCADE_ID));
  m.add(getAction(ArrangeAction.VERTICAL_ID));
  m.add(getAction(ArrangeAction.HORIZONTAL_ID));
  m.addSeparator();
  for (  DocumentView pr : getViews()) {
    if (pr.getAction(FocusAction.ID) != null) {
      windowMenu.add(pr.getAction(FocusAction.ID));
    }
  }
  if (toolBarActions.size() > 0) {
    m.addSeparator();
    for (    Action a : toolBarActions) {
      JCheckBoxMenuItem cbmi=new JCheckBoxMenuItem(a);
      Actions.configureJCheckBoxMenuItem(cbmi,a);
      m.add(cbmi);
    }
  }
  addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      String name=evt.getPropertyName();
      System.out.println(this + "." + name);
      if (name == PROP_VIEW_COUNT) {
        JMenu m=windowMenu;
        m.removeAll();
        m.add(getAction(ArrangeAction.CASCADE_ID));
        m.add(getAction(ArrangeAction.VERTICAL_ID));
        m.add(getAction(ArrangeAction.HORIZONTAL_ID));
        m.addSeparator();
        for (        DocumentView v : getViews()) {
          if (v.getAction(FocusAction.ID) != null) {
            m.add(v.getAction(FocusAction.ID));
          }
        }
        if (toolBarActions.size() > 0) {
          m.addSeparator();
          for (          Action a : toolBarActions) {
            JCheckBoxMenuItem cbmi=new JCheckBoxMenuItem(a);
            Actions.configureJCheckBoxMenuItem(cbmi,a);
            m.add(cbmi);
          }
        }
      }
    }
  }
);
  return m;
}
