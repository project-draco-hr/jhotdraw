{
  this.figures=new LinkedList<Figure>();
  IXMLParser parser;
  try {
    parser=XMLParserFactory.createDefaultXMLParser();
  }
 catch (  Exception ex) {
    InternalError e=new InternalError("Unable to instantiate NanoXML Parser");
    e.initCause(ex);
    throw e;
  }
  IXMLReader reader=new StdXMLReader(in);
  parser.setReader(reader);
  try {
    document=(IXMLElement)parser.parse();
  }
 catch (  XMLException ex) {
    IOException e=new IOException(ex.getMessage());
    e.initCause(ex);
    throw e;
  }
  IXMLElement svg=document;
  Stack<Iterator> stack=new Stack<Iterator>();
  LinkedList<IXMLElement> ll=new LinkedList<IXMLElement>();
  ll.add(document);
  stack.push(ll.iterator());
  while (!stack.empty() && stack.peek().hasNext()) {
    Iterator<IXMLElement> iter=stack.peek();
    IXMLElement node=iter.next();
    Iterator<IXMLElement> children=node.getChildren().iterator();
    if (!iter.hasNext()) {
      stack.pop();
    }
    if (children.hasNext()) {
      stack.push(children);
    }
    if (node.getName() != null && node.getName().equals("svg") && (node.getNamespace() == null || node.getNamespace().equals(SVG_NAMESPACE))) {
      svg=node;
      break;
    }
  }
  if (svg.getName() == null || !svg.getName().equals("svg") || (svg.getNamespace() != null && !svg.getNamespace().equals(SVG_NAMESPACE))) {
    throw new IOException("'svg' element expected: " + svg.getName());
  }
  initStorageContext();
  flattenStyles(svg);
  readSVGElement(svg);
  for (  Object o : elementObjects.values()) {
    if (o instanceof Figure) {
      Figure f=(Figure)o;
      if (FILL_GRADIENT.get(f) != null) {
        FILL_GRADIENT.get(f).makeRelativeToFigureBounds(f);
      }
      if (STROKE_GRADIENT.get(f) != null) {
        STROKE_GRADIENT.get(f).makeRelativeToFigureBounds(f);
      }
    }
  }
  return figures;
}
