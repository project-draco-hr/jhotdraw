{
  long start;
  if (DEBUG) {
    start=System.currentTimeMillis();
  }
  this.figures=new LinkedList<Figure>();
  IXMLParser parser;
  try {
    parser=XMLParserFactory.createDefaultXMLParser();
  }
 catch (  Exception ex) {
    InternalError e=new InternalError("Unable to instantiate NanoXML Parser");
    e.initCause(ex);
    throw e;
  }
  if (DEBUG) {
    System.out.println("SVGInputFormat parser created " + (System.currentTimeMillis() - start));
  }
  IXMLReader reader=new StdXMLReader(in);
  parser.setReader(reader);
  if (DEBUG) {
    System.out.println("SVGInputFormat reader created " + (System.currentTimeMillis() - start));
  }
  try {
    document=(IXMLElement)parser.parse();
  }
 catch (  XMLException ex) {
    IOException e=new IOException(ex.getMessage());
    e.initCause(ex);
    throw e;
  }
  if (DEBUG) {
    System.out.println("SVGInputFormat document created " + (System.currentTimeMillis() - start));
  }
  IXMLElement svg=document;
  Stack<Iterator<IXMLElement>> stack=new Stack<Iterator<IXMLElement>>();
  LinkedList<IXMLElement> ll=new LinkedList<IXMLElement>();
  ll.add(document);
  stack.push(ll.iterator());
  while (!stack.empty() && stack.peek().hasNext()) {
    Iterator<IXMLElement> iter=stack.peek();
    IXMLElement node=iter.next();
    Iterator<IXMLElement> children=(node.getChildren() == null) ? null : node.getChildren().iterator();
    if (!iter.hasNext()) {
      stack.pop();
    }
    if (children != null && children.hasNext()) {
      stack.push(children);
    }
    if (node.getName() != null && node.getName().equals("svg") && (node.getNamespace() == null || node.getNamespace().equals(SVG_NAMESPACE))) {
      svg=node;
      break;
    }
  }
  if (svg.getName() == null || !svg.getName().equals("svg") || (svg.getNamespace() != null && !svg.getNamespace().equals(SVG_NAMESPACE))) {
    throw new IOException("'svg' element expected: " + svg.getName());
  }
  initStorageContext(document);
  flattenStyles(svg);
  readElement(svg);
  if (DEBUG) {
    long end=System.currentTimeMillis();
    System.out.println("SVGInputFormat elapsed:" + (end - start));
  }
  if (replace) {
    drawing.removeAllChildren();
  }
  drawing.addAll(figures);
  if (replace) {
    Viewport viewport=viewportStack.firstElement();
    drawing.set(VIEWPORT_FILL,VIEWPORT_FILL.get(viewport.attributes));
    drawing.set(VIEWPORT_FILL_OPACITY,VIEWPORT_FILL_OPACITY.get(viewport.attributes));
    drawing.set(VIEWPORT_HEIGHT,VIEWPORT_HEIGHT.get(viewport.attributes));
    drawing.set(VIEWPORT_WIDTH,VIEWPORT_WIDTH.get(viewport.attributes));
  }
  document.dispose();
  identifiedElements.clear();
  elementObjects.clear();
  viewportStack.clear();
  styleManager.clear();
  document=null;
  identifiedElements=null;
  elementObjects=null;
  viewportStack=null;
  styleManager=null;
}
