{
  Object objectValue;
  String value;
  double doubleValue;
  objectValue=readInheritAttribute(elem,"fill",null);
  if (objectValue != null) {
    objectValue=toPaint(elem,(String)objectValue);
    if (objectValue instanceof Color) {
      FILL_COLOR.set(a,(Color)objectValue);
    }
 else     if (objectValue instanceof Gradient) {
      FILL_GRADIENT.set(a,(Gradient)objectValue);
    }
 else     if (objectValue == null) {
      FILL_COLOR.set(a,null);
    }
 else {
      FILL_COLOR.set(a,null);
      if (DEBUG) {
        System.out.println("SVGInputFormat not implemented  fill=" + objectValue);
      }
    }
  }
  objectValue=readInheritAttribute(elem,"fill-opacity",null);
  if (objectValue != null) {
    FILL_OPACITY.set(a,toDouble(elem,(String)objectValue,1d,0d,1d));
  }
  value=readInheritAttribute(elem,"fill-rule",null);
  if (value != null) {
    WINDING_RULE.set(a,SVG_FILL_RULES.get(value));
  }
  objectValue=toPaint(elem,readInheritAttribute(elem,"stroke",null));
  if (objectValue != null) {
    if (objectValue instanceof Color) {
      STROKE_COLOR.set(a,(Color)objectValue);
    }
 else     if (objectValue instanceof Gradient) {
      STROKE_GRADIENT.set(a,(Gradient)objectValue);
    }
  }
  value=readInheritAttribute(elem,"stroke-dasharray",null);
  if (value != null && !value.equals("none")) {
    String[] values=toCommaSeparatedArray(value);
    double[] dashes=new double[values.length];
    for (int i=0; i < values.length; i++) {
      dashes[i]=toNumber(elem,values[i]);
    }
    STROKE_DASHES.set(a,dashes);
  }
  objectValue=readInheritAttribute(elem,"stroke-dashoffset",null);
  if (objectValue != null) {
    doubleValue=toNumber(elem,(String)objectValue);
    STROKE_DASH_PHASE.set(a,doubleValue);
    IS_STROKE_DASH_FACTOR.set(a,false);
  }
  value=readInheritAttribute(elem,"stroke-linecap",null);
  if (value != null) {
    STROKE_CAP.set(a,SVG_STROKE_LINECAPS.get(value));
  }
  value=readInheritAttribute(elem,"stroke-linejoin",null);
  if (value != null) {
    STROKE_JOIN.set(a,SVG_STROKE_LINEJOINS.get(value));
  }
  objectValue=readInheritAttribute(elem,"stroke-miterlimit",null);
  if (objectValue != null) {
    doubleValue=toDouble(elem,(String)objectValue,4d,1d,Double.MAX_VALUE);
    STROKE_MITER_LIMIT.set(a,doubleValue);
    IS_STROKE_MITER_LIMIT_FACTOR.set(a,false);
  }
  objectValue=readInheritAttribute(elem,"stroke-opacity",null);
  if (objectValue != null) {
    STROKE_OPACITY.set(a,toDouble(elem,(String)objectValue,1d,0d,1d));
  }
  objectValue=readInheritAttribute(elem,"stroke-width",null);
  if (objectValue != null) {
    doubleValue=toNumber(elem,(String)objectValue);
    STROKE_WIDTH.set(a,doubleValue);
  }
}
