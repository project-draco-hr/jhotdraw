{
  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();
  readCoreAttributes(elem,a);
  double cx=toNumber(elem,readAttribute(elem,"cx","0.5"));
  double cy=toNumber(elem,readAttribute(elem,"cy","0.5"));
  double r=toNumber(elem,readAttribute(elem,"r","0.5"));
  boolean isRelativeToFigureBounds=readAttribute(elem,"gradientUnits","objectBoundingBox").equals("objectBoundingBox");
  ArrayList<IXMLElement> stops=elem.getChildrenNamed("stop",SVG_NAMESPACE);
  if (stops.size() == 0) {
    stops=elem.getChildrenNamed("stop");
  }
  if (stops.size() == 0) {
    String xlink=readAttribute(elem,"xlink:href","");
    if (xlink.startsWith("#") && elementObjects.get(identifiedElements.get(xlink.substring(1))) != null) {
      stops=identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop",SVG_NAMESPACE);
      if (stops.size() == 0) {
        stops=identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop");
      }
    }
  }
  double[] stopOffsets=new double[stops.size()];
  Color[] stopColors=new Color[stops.size()];
  double[] stopOpacities=new double[stops.size()];
  for (int i=0; i < stops.size(); i++) {
    IXMLElement stopElem=stops.get(i);
    String offsetStr=readAttribute(stopElem,"offset","0");
    if (offsetStr.endsWith("%")) {
      stopOffsets[i]=toDouble(stopElem,offsetStr.substring(0,offsetStr.length() - 1),0,0,100) / 100d;
    }
 else {
      stopOffsets[i]=toDouble(stopElem,offsetStr,0,0,1);
    }
    stopColors[i]=toColor(stopElem,readAttribute(stopElem,"stop-color","black"));
    if (stopColors[i] == null) {
      stopColors[i]=new Color(0x0,true);
    }
    stopOpacities[i]=toDouble(stopElem,readAttribute(stopElem,"stop-opacity","1"),1,0,1);
  }
  AffineTransform tx=toTransform(elem,readAttribute(elem,"gradientTransform","none"));
  Gradient gradient=factory.createRadialGradient(cx,cy,r,stopOffsets,stopColors,stopOpacities,isRelativeToFigureBounds,tx);
  elementObjects.put(elem,gradient);
}
