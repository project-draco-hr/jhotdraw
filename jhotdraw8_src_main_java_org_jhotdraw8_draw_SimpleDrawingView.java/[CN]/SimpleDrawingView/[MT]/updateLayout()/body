{
  if (node == null) {
    return;
  }
  Bounds bounds=drawingPane.getLayoutBounds();
  double f=getZoomFactor();
  double x=bounds.getMinX() * f;
  double y=bounds.getMinY() * f;
  double w=bounds.getWidth() * f;
  double h=bounds.getHeight() * f;
  Bounds scaledBounds=new BoundingBox(x,y,w,h);
  if (Objects.equals(scaledBounds,previousScaledBounds)) {
    return;
  }
  previousScaledBounds=scaledBounds;
  Drawing d=getDrawing();
  double dw=d.get(Drawing.WIDTH);
  double dh=d.get(Drawing.HEIGHT);
  if (d != null) {
    canvasPane.setTranslateX(max(0,-x));
    canvasPane.setTranslateY(max(0,-y));
    canvasPane.setWidth(dw * f);
    canvasPane.setHeight(dh * f);
  }
  double padding=20;
  double lw=max(max(0,x) + w,max(0,-x) + dw * f);
  double lh=max(max(0,y) + h,max(0,-y) + dh * f);
  drawingPane.setTranslateX(padding);
  drawingPane.setTranslateY(padding);
  canvasPane.setTranslateX(padding);
  canvasPane.setTranslateY(padding);
  toolPane.resize(lw + padding * 2,lh + padding * 2);
  toolPane.layout();
  overlaysPane.setClip(new Rectangle(0,0,lw + padding * 2,lh + padding * 2));
  rootPane.setPrefSize(lw + padding * 2,lh + padding * 2);
  rootPane.setMaxSize(lw + padding * 2,lh + padding * 2);
  invalidateWorldViewTransforms();
  invalidateHandleNodes();
}
