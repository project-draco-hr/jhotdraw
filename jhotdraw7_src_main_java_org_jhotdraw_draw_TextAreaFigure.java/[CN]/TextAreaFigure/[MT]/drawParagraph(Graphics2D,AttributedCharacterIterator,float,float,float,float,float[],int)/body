{
  int[] tabLocations=new int[tabCount + 1];
  int i=0;
  for (char c=styledText.first(); c != styledText.DONE; c=styledText.next()) {
    if (c == '\t') {
      tabLocations[i++]=styledText.getIndex();
    }
  }
  tabLocations[tabCount]=styledText.getEndIndex() - 1;
  LineBreakMeasurer measurer=new LineBreakMeasurer(styledText,getFontRenderContext());
  int currentTab=0;
  while (measurer.getPosition() < styledText.getEndIndex() && verticalPos <= maxVerticalPos) {
    boolean lineContainsText=false;
    boolean lineComplete=false;
    float maxAscent=0, maxDescent=0;
    float horizontalPos=leftMargin;
    LinkedList<TextLayout> layouts=new LinkedList<TextLayout>();
    LinkedList<Float> penPositions=new LinkedList<Float>();
    while (!lineComplete && verticalPos <= maxVerticalPos) {
      float wrappingWidth=rightMargin - horizontalPos;
      TextLayout layout=null;
      layout=measurer.nextLayout(wrappingWidth,tabLocations[currentTab] + 1,lineContainsText);
      if (layout != null) {
        layouts.add(layout);
        penPositions.add(horizontalPos);
        horizontalPos+=layout.getAdvance();
        maxAscent=Math.max(maxAscent,layout.getAscent());
        maxDescent=Math.max(maxDescent,layout.getDescent() + layout.getLeading());
      }
 else {
        lineComplete=true;
      }
      lineContainsText=true;
      if (measurer.getPosition() == tabLocations[currentTab] + 1) {
        currentTab++;
      }
      if (measurer.getPosition() == styledText.getEndIndex())       lineComplete=true;
 else       if (tabStops.length == 0 || horizontalPos >= tabStops[tabStops.length - 1])       lineComplete=true;
      if (!lineComplete) {
        int j;
        for (j=0; horizontalPos >= tabStops[j]; j++) {
        }
        horizontalPos=tabStops[j];
      }
    }
    verticalPos+=maxAscent;
    Iterator<TextLayout> layoutEnum=layouts.iterator();
    Iterator<Float> positionEnum=penPositions.iterator();
    while (layoutEnum.hasNext()) {
      TextLayout nextLayout=layoutEnum.next();
      float nextPosition=positionEnum.next();
      nextLayout.draw(g,nextPosition,verticalPos);
    }
    verticalPos+=maxDescent;
  }
  return verticalPos;
}
