{
  double[] currentCorners=new double[8];
  double[] prevCorners=new double[8];
  Point2D.Double intersect;
  if (bp.isClosed()) {
    BezierPath.Node prev=bp.get(bp.size() - 1);
    for (int i=0; i < bp.size(); i++) {
      BezierPath.Node node=bp.get(i);
      if (prev.x[0] == node.x[0] && prev.y[0] == node.y[0]) {
        bp.remove(i--);
      }
 else {
        prev=node;
      }
    }
  }
 else {
    BezierPath.Node prev=bp.get(0);
    for (int i=1; i < bp.size(); i++) {
      BezierPath.Node node=bp.get(i);
      if (prev.x[0] == node.x[0] && prev.y[0] == node.y[0]) {
        bp.remove(i--);
      }
 else {
        prev=node;
      }
    }
  }
  if (bp.isClosed() && bp.size() > 1) {
    prevCorners=computeThickLine(bp.get(bp.size() - 1).x[0],bp.get(bp.size() - 1).y[0],bp.get(0).x[0],bp.get(0).y[0],innerWidth,prevCorners);
    currentCorners=computeThickLine(bp.get(0).x[0],bp.get(0).y[0],bp.get(1).x[0],bp.get(1).y[0],innerWidth,currentCorners);
    intersect=Geom.intersectAWT(prevCorners[0],prevCorners[1],prevCorners[4],prevCorners[5],currentCorners[0],currentCorners[1],currentCorners[4],currentCorners[5],miterLimit);
    if (intersect != null) {
      right.moveTo(intersect.x,intersect.y);
    }
 else {
      right.moveTo(prevCorners[4],prevCorners[5]);
      right.lineTo(currentCorners[0],currentCorners[1]);
    }
    intersect=Geom.intersectAWT(prevCorners[2],prevCorners[3],prevCorners[6],prevCorners[7],currentCorners[2],currentCorners[3],currentCorners[6],currentCorners[7],miterLimit);
    if (intersect != null) {
      left.moveTo(intersect.x,intersect.y);
    }
 else {
      left.moveTo(prevCorners[6],prevCorners[7]);
      left.lineTo(currentCorners[2],currentCorners[3]);
    }
  }
 else {
    if (bp.size() > 1) {
      currentCorners=computeThickLine(bp.get(0).x[0],bp.get(0).y[0],bp.get(1).x[0],bp.get(1).y[0],innerWidth,currentCorners);
      right.moveTo(currentCorners[0],currentCorners[1]);
      left.moveTo(currentCorners[2],currentCorners[3]);
    }
  }
  for (int i=1, n=bp.size() - 1; i < n; i++) {
    double[] tmp=prevCorners;
    prevCorners=currentCorners;
    currentCorners=computeThickLine(bp.get(i).x[0],bp.get(i).y[0],bp.get(i + 1).x[0],bp.get(i + 1).y[0],innerWidth,tmp);
    intersect=Geom.intersectAWT(prevCorners[0],prevCorners[1],prevCorners[4],prevCorners[5],currentCorners[0],currentCorners[1],currentCorners[4],currentCorners[5],miterLimit);
    if (intersect != null) {
      right.lineTo(intersect.x,intersect.y);
    }
 else {
      right.lineTo(prevCorners[4],prevCorners[5]);
      right.lineTo(currentCorners[0],currentCorners[1]);
    }
    intersect=Geom.intersectAWT(prevCorners[2],prevCorners[3],prevCorners[6],prevCorners[7],currentCorners[2],currentCorners[3],currentCorners[6],currentCorners[7],miterLimit);
    if (intersect != null) {
      left.lineTo(intersect.x,intersect.y);
    }
 else {
      left.lineTo(prevCorners[6],prevCorners[7]);
      left.lineTo(currentCorners[2],currentCorners[3]);
    }
  }
  if (bp.isClosed() && bp.size() > 0) {
    double[] tmp=prevCorners;
    prevCorners=currentCorners;
    currentCorners=computeThickLine(bp.get(bp.size() - 1).x[0],bp.get(bp.size() - 1).y[0],bp.get(0).x[0],bp.get(0).y[0],innerWidth,tmp);
    intersect=Geom.intersectAWT(prevCorners[0],prevCorners[1],prevCorners[4],prevCorners[5],currentCorners[0],currentCorners[1],currentCorners[4],currentCorners[5],miterLimit);
    if (intersect != null) {
      right.lineTo(intersect.x,intersect.y);
    }
 else {
      right.lineTo(prevCorners[4],prevCorners[5]);
      right.lineTo(currentCorners[0],currentCorners[1]);
    }
    intersect=Geom.intersectAWT(prevCorners[2],prevCorners[3],prevCorners[6],prevCorners[7],currentCorners[2],currentCorners[3],currentCorners[6],currentCorners[7],miterLimit);
    if (intersect != null) {
      left.lineTo(intersect.x,intersect.y);
    }
 else {
      left.lineTo(prevCorners[6],prevCorners[7]);
      left.lineTo(currentCorners[2],currentCorners[3]);
    }
    right.closePath();
    left.closePath();
  }
 else {
    if (bp.size() > 1) {
      right.lineTo(currentCorners[4],currentCorners[5]);
      left.lineTo(currentCorners[6],currentCorners[7]);
    }
  }
}
