{
  CssColor color=null;
switch (tt.nextToken()) {
case CssTokenizerInterface.TT_HASH:
    color=new CssColor('#' + tt.currentStringValue(),Color.web('#' + tt.currentStringValue()));
  break;
case CssTokenizerInterface.TT_IDENT:
color=new CssColor(tt.currentStringValue(),Color.web(tt.currentStringValue()));
break;
case CssTokenizerInterface.TT_FUNCTION:
StringBuilder buf=new StringBuilder(tt.currentStringValue());
buf.append('(');
double[] values=new double[4];
int i=0;
switch (tt.currentStringValue()) {
case "rgb":
while (i < 3 && (tt.nextToken() == CssTokenizerInterface.TT_NUMBER || tt.currentToken() == CssTokenizerInterface.TT_PERCENTAGE)) {
buf.append(numberConverter.toString(tt.currentNumericValue()));
if (tt.currentToken() == CssTokenizerInterface.TT_PERCENTAGE) {
buf.append('%');
}
values[i++]=tt.currentToken() == CssTokenizerInterface.TT_NUMBER ? tt.currentNumericValue().doubleValue() / 255.0 : tt.currentNumericValue().doubleValue() / 100.0;
if (i < 3) {
if (tt.nextToken() != ',') {
throw new ParseException("CssColor rgb comma expected but found " + tt.currentStringValue(),tt.getPosition());
}
 else {
buf.append(tt.currentStringValue());
}
}
}
if (i == 3) {
buf.append(')');
color=new CssColor(buf.toString(),new Color(clamp(values[0],0,1),clamp(values[1],0,1),clamp(values[2],0,1),1.0));
}
 else {
throw new ParseException("CssColor rgb values expected but found " + tt.currentStringValue(),tt.getPosition());
}
break;
case "rgba":
while (i < 4 && (tt.nextToken() == CssTokenizerInterface.TT_NUMBER || tt.currentToken() == CssTokenizerInterface.TT_PERCENTAGE)) {
buf.append(numberConverter.toString(tt.currentNumericValue()));
if (tt.currentToken() == CssTokenizerInterface.TT_PERCENTAGE) {
buf.append('%');
}
if (i < 3) {
values[i++]=tt.currentToken() == CssTokenizerInterface.TT_NUMBER ? tt.currentNumericValue().doubleValue() / 255.0 : tt.currentNumericValue().doubleValue() / 100.0;
}
 else {
values[i++]=tt.currentToken() == CssTokenizerInterface.TT_NUMBER ? tt.currentNumericValue().doubleValue() : tt.currentNumericValue().doubleValue() / 100.0;
}
if (i < 4) {
if (tt.nextToken() != ',') {
throw new ParseException("CssColor rgba comma expected but found " + tt.currentStringValue(),tt.getPosition());
}
 else {
buf.append(tt.currentStringValue());
}
}
}
if (i == 4) {
buf.append(')');
color=new CssColor(buf.toString(),new Color(clamp(values[0],0,1),clamp(values[1],0,1),clamp(values[2],0,1),clamp(values[3],0,1)));
}
 else {
throw new ParseException("CssColor rgba values expected but found " + tt.currentStringValue(),tt.getPosition());
}
break;
case "hsb":
while (i < 3 && (tt.nextToken() == CssTokenizerInterface.TT_NUMBER || tt.currentToken() == CssTokenizerInterface.TT_PERCENTAGE)) {
buf.append(numberConverter.toString(tt.currentNumericValue()));
if (tt.currentToken() == CssTokenizerInterface.TT_PERCENTAGE) {
buf.append('%');
}
if (i < 1) {
values[i++]=tt.currentToken() == CssTokenizerInterface.TT_NUMBER ? tt.currentNumericValue().doubleValue() : tt.currentNumericValue().doubleValue() * 3.6;
}
 else {
values[i++]=tt.currentToken() == CssTokenizerInterface.TT_NUMBER ? tt.currentNumericValue().doubleValue() : tt.currentNumericValue().doubleValue() / 100.0;
}
if (i < 3) {
if (tt.nextToken() != ',') {
throw new ParseException("CssColor hsb comma expected but found " + tt.currentStringValue(),tt.getPosition());
}
 else {
buf.append(tt.currentStringValue());
}
}
}
if (i == 3) {
buf.append(')');
color=new CssColor(buf.toString(),Color.hsb(values[0],clamp(values[1],0,1),clamp(values[2],0,1)));
}
 else {
throw new ParseException("CssColor hsb values expected but found " + tt.currentStringValue(),tt.getPosition());
}
break;
case "hsba":
while (i < 4 && (tt.nextToken() == CssTokenizerInterface.TT_NUMBER || tt.currentToken() == CssTokenizerInterface.TT_PERCENTAGE)) {
buf.append(numberConverter.toString(tt.currentNumericValue()));
if (tt.currentToken() == CssTokenizerInterface.TT_PERCENTAGE) {
buf.append('%');
}
if (i < 1) {
values[i++]=tt.currentToken() == CssTokenizerInterface.TT_NUMBER ? tt.currentNumericValue().doubleValue() : tt.currentNumericValue().doubleValue() * 3.6;
}
 else if (i < 3) {
values[i++]=tt.currentToken() == CssTokenizerInterface.TT_NUMBER ? tt.currentNumericValue().doubleValue() : tt.currentNumericValue().doubleValue() / 100.0;
}
 else {
values[i++]=tt.currentToken() == CssTokenizerInterface.TT_NUMBER ? tt.currentNumericValue().doubleValue() : tt.currentNumericValue().doubleValue() / 100.0;
}
if (i < 4) {
if (tt.nextToken() != ',') {
throw new ParseException("CssColor hsba comma expected but found " + tt.currentStringValue(),tt.getPosition());
}
 else {
buf.append(tt.currentStringValue());
}
}
}
if (i == 4) {
buf.append(')');
color=new CssColor(buf.toString(),Color.hsb(values[0],clamp(values[1],0,1),clamp(values[2],0,1),clamp(values[3],0,1)));
}
 else {
throw new ParseException("CssColor hsba values expected but found " + tt.currentStringValue(),tt.getPosition());
}
break;
default :
throw new ParseException("CssColor expected but found " + tt.currentStringValue(),tt.getPosition());
}
if (tt.nextToken() != ')') {
throw new ParseException("CssColor ')' expected but found " + tt.currentStringValue(),tt.getPosition());
}
break;
default :
throw new ParseException("CssColor expected but found " + tt.currentStringValue(),tt.getPosition());
}
return color;
}
