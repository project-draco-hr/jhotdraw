{
  double startX=0.0, startY=0.0, endX=0.0, endY=1.0;
  Boolean isProportional=true;
  String h=null;
  String v=null;
  while (tt.nextToken() == CssTokenizer.TT_IDENT) {
switch (tt.currentStringValue()) {
case "top":
      if (v != null) {
        throw new ParseException("CSS LinearGradient: you already specified '" + v + "', found: "+ tt.currentStringValue()+ " ttype:"+ tt.currentToken(),tt.getStartPosition());
      }
    v=tt.currentStringValue();
  break;
case "bottom":
if (v != null) {
  throw new ParseException("CSS LinearGradient: you already specified '" + v + "', found: "+ tt.currentStringValue()+ " ttype:"+ tt.currentToken(),tt.getStartPosition());
}
v=tt.currentStringValue();
break;
case "left":
if (h != null) {
throw new ParseException("CSS LinearGradient: you already specified '" + h + "', found: "+ tt.currentStringValue()+ " ttype:"+ tt.currentToken(),tt.getStartPosition());
}
h=tt.currentStringValue();
break;
case "right":
if (h != null) {
throw new ParseException("CSS LinearGradient: you already specified '" + h + "', found: "+ tt.currentStringValue()+ " ttype:"+ tt.currentToken(),tt.getStartPosition());
}
h=tt.currentStringValue();
break;
default :
throw new ParseException("CSS LinearGradient: 'top', 'bottom', 'left' or 'right' expected, found: " + tt.currentStringValue() + " ttype:"+ tt.currentToken(),tt.getStartPosition());
}
}
tt.pushBack();
switch (h + " " + v) {
case "null null":
throw new ParseException("CSS LinearGradient: 'top', 'bottom', 'left' or 'right' expected after 'to'.",tt.getStartPosition());
case "left null":
startX=1.0;
startY=endX=endY=0.0;
break;
case "right null":
startX=startY=endY=0.0;
endX=1.0;
break;
case "null top":
startX=endX=endY=0.0;
startY=1.0;
break;
case "null bottom":
startX=startY=endX=0.0;
endY=1.0;
break;
case "left top":
startX=startY=1.0;
endX=endY=0.0;
break;
case "left bottom":
startX=endY=1.0;
startY=endX=0.0;
break;
case "right top":
startX=endY=0.0;
startY=endX=1.0;
break;
case "right bottom":
startX=startY=0.0;
endX=endY=1.0;
break;
}
return new PointToPoint(startX,startY,endX,endY,isProportional);
}
