{
  if (value == null) {
    out.append("none");
  }
 else {
    CssLinearGradient lg=value;
    final boolean proportional=lg.isProportional();
    final String unit=proportional ? "%" : "px";
    out.append("linear-gradient(");
    boolean needsSpace=false;
    boolean needsComma=false;
{
      final double startX=lg.getStartX();
      final double startY=lg.getStartY();
      if (startX != 0.0 || startY != 0.0) {
        out.append("from ").append(doubleConverter.toString(startX)).append(unit).append(' ').append(doubleConverter.toString(startY)).append(unit);
        needsSpace=true;
        needsComma=true;
      }
    }
{
      final double endX=lg.getEndX();
      final double endY=lg.getEndY();
      if (endX != 0.0 || endY != 0.0) {
        if (needsSpace) {
          out.append(' ');
        }
        out.append("to ").append(doubleConverter.toString(endX)).append(unit).append(' ').append(doubleConverter.toString(endY)).append(unit);
        needsSpace=true;
        needsComma=true;
      }
    }
{
switch (lg.getCycleMethod()) {
case NO_CYCLE:
        break;
case REPEAT:
      if (needsComma) {
        out.append(", ");
      }
    out.append("repeat");
  needsComma=true;
break;
case REFLECT:
if (needsComma) {
out.append(", ");
}
out.append("reflect");
needsComma=true;
break;
default :
throw new UnsupportedOperationException("not yet implemented");
}
for (CssStop stop : lg.getStops()) {
if (needsComma) {
out.append(", ");
}
colorConverter.toString(out,idFactory,stop.getColor());
if (stop.getOffset() != null) {
out.append(' ');
if (proportional) {
doubleConverter.toString(out,idFactory,stop.getOffset() * 100.0);
out.append('%');
}
 else {
doubleConverter.toString(out,idFactory,stop.getOffset());
}
}
needsComma=true;
}
}
out.append(")");
}
}
