{
  if (value == null) {
    out.append("none");
  }
 else {
    out.append("linear-gradient(");
    CssLinearGradient lg=value;
    final boolean proportional=lg.isProportional();
    final double startX=lg.getStartX();
    final double startY=lg.getStartY();
    final double endX=lg.getEndX();
    final double endY=lg.getEndY();
    final boolean needsFromTo;
    boolean needsSpace=false;
    boolean needsComma=false;
    if (proportional) {
      if (startX == 0.0 && startY == 0.0 & endX == 0.0 && endY == 0.0) {
        needsFromTo=true;
      }
 else       if (startX == 0.0 && startY == 0.0 & endX == 0.0 && endY == 1.0) {
        needsFromTo=false;
      }
 else       if (startX == 0.0 && startY == 0.0 & endX == 1.0 && endY == 0.0) {
        out.append("to right");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 0.0 && startY == 0.0 & endX == 1.0 && endY == 1.0) {
        out.append("to right bottom");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 0.0 && startY == 1.0 & endX == 0.0 && endY == 0.0) {
        out.append("to top");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 0.0 && startY == 1. & endX == 0.0 && endY == 1.0) {
        needsFromTo=true;
      }
 else       if (startX == 0.0 && startY == 1.0 & endX == 1.0 && endY == 0.0) {
        out.append("to right top");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 0.0 && startY == 1.0 & endX == 1.0 && endY == 1.0) {
        out.append("to right");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 1.0 && startY == 0.0 & endX == 0.0 && endY == 0.0) {
        out.append("to left");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 1.0 && startY == 0.0 & endX == 0.0 && endY == 1.0) {
        out.append("to left bottom");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 1.0 && startY == 0.0 & endX == 1.0 && endY == 0.0) {
        needsFromTo=true;
      }
 else       if (startX == 1.0 && startY == 0.0 & endX == 1.0 && endY == 1.0) {
        needsFromTo=false;
      }
 else       if (startX == 1.0 && startY == 1.0 & endX == 0.0 && endY == 0.0) {
        out.append("to left top");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 1.0 && startY == 1.0 & endX == 0.0 && endY == 1.0) {
        out.append("to left");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 1.0 && startY == 1.0 & endX == 1.0 && endY == 0.0) {
        out.append("to top");
        needsComma=true;
        needsFromTo=false;
      }
 else       if (startX == 1.0 && startY == 1.0 & endX == 1.0 && endY == 1.0) {
        needsFromTo=true;
      }
 else {
        needsFromTo=true;
      }
    }
 else {
      needsFromTo=true;
    }
    if (needsFromTo) {
      final String unit=proportional ? "%" : "";
{
        out.append("from ").append(doubleConverter.toString(proportional ? startX * 100.0 : startX)).append(unit).append(' ').append(doubleConverter.toString(proportional ? startY * 100.0 : startY)).append(unit);
        needsSpace=true;
        needsComma=true;
      }
{
        if (needsSpace) {
          out.append(' ');
        }
        out.append("to ").append(doubleConverter.toString(proportional ? endX * 100.0 : endX)).append(unit).append(' ').append(doubleConverter.toString(proportional ? endY * 100.0 : endY)).append(unit);
        needsSpace=true;
        needsComma=true;
      }
    }
{
switch (lg.getCycleMethod()) {
case NO_CYCLE:
        break;
case REPEAT:
      if (needsComma) {
        out.append(", ");
      }
    out.append("repeat");
  needsComma=true;
break;
case REFLECT:
if (needsComma) {
out.append(", ");
}
out.append("reflect");
needsComma=true;
break;
default :
throw new UnsupportedOperationException("not yet implemented");
}
for (CssStop stop : lg.getStops()) {
if (needsComma) {
out.append(", ");
}
colorConverter.toString(out,idFactory,stop.getColor());
if (stop.getOffset() != null) {
out.append(' ');
doubleConverter.toString(out,idFactory,stop.getOffset() * 100.0);
out.append('%');
}
needsComma=true;
}
}
out.append(")");
}
}
