{
  CssTokenizerInterface tt=new CssTokenizer(new StringReader(in.toString()));
  tt.setSkipWhitespaces(true);
  if (tt.nextToken() == CssTokenizer.TT_IDENT) {
    if ("none".equals(tt.currentStringValue())) {
      in.position(in.limit());
      return null;
    }
 else {
      throw new ParseException("CSS LinearGradient: \"<none>\" or \"<linear-gradient>(\"  expected",tt.getPosition());
    }
  }
  if (tt.currentToken() != CssTokenizer.TT_FUNCTION || !"linear-gradient".equals(tt.currentStringValue())) {
    throw new ParseException("CSS LinearGradient: \"<linear-gradient>(\"  expected, found: " + tt.currentStringValue(),tt.getPosition());
  }
  PointToPoint fromTo=null;
  if (tt.nextToken() == CssTokenizer.TT_IDENT && "from".equals(tt.currentStringValue())) {
    fromTo=parsePointToPoint(tt);
  }
 else   if (tt.currentToken() == CssTokenizer.TT_IDENT && "to".equals(tt.currentStringValue())) {
    fromTo=parseSideOrCorner(tt);
  }
 else {
    fromTo=new PointToPoint(0.0,0.0,0.0,1.0,true);
    tt.pushBack();
  }
  if (tt.nextToken() != ',') {
    tt.pushBack();
  }
  CycleMethod cycleMethod=CycleMethod.NO_CYCLE;
  if (tt.nextToken() == CssTokenizer.TT_IDENT) {
    if ("repeat".equals(tt.currentStringValue())) {
      cycleMethod=CycleMethod.REPEAT;
    }
 else     if ("reflect".equals(tt.currentStringValue())) {
      cycleMethod=CycleMethod.REFLECT;
    }
 else {
      tt.pushBack();
    }
  }
 else {
    tt.pushBack();
  }
  if (tt.nextToken() != ',') {
    tt.pushBack();
  }
  List<CssStop> stops=new ArrayList<>();
  while (tt.nextToken() != ')' && tt.currentToken() != CssTokenizer.TT_EOF) {
    tt.pushBack();
    stops.add(parseColorStop(tt));
    if (tt.nextToken() != ',') {
      tt.pushBack();
    }
  }
  if (tt.currentToken() != ')') {
    throw new ParseException("CSS LinearGradient: ')'  expected, found: " + tt.currentStringValue(),tt.getPosition());
  }
  tt.skipWhitespace();
  in.position(tt.getPosition());
  return new CssLinearGradient(fromTo.startX,fromTo.startY,fromTo.endX,fromTo.endY,fromTo.isProportional,cycleMethod,stops.toArray(new CssStop[stops.size()]));
}
