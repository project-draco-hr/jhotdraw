{
  factory.reset();
  if (oldDrawing != null) {
    Figure probe=readNode(doc.getDocumentElement());
    if (probe instanceof Clipping) {
      for (      Figure f : oldDrawing.preorderIterable()) {
        factory.createId(f);
      }
    }
 else {
      factory.reset();
    }
  }
  figureToElementMap.clear();
  Drawing external=null;
  Clipping clipping=null;
  NodeList list=doc.getChildNodes();
  comments=new ArrayList<>();
  for (int i=0; i < list.getLength(); i++) {
    Node node=list.item(i);
switch (node.getNodeType()) {
case Node.PROCESSING_INSTRUCTION_NODE:
      readProcessingInstruction(doc,(ProcessingInstruction)node,external);
    break;
case Node.COMMENT_NODE:
  comments.add(((Comment)node).getTextContent());
break;
case Node.ELEMENT_NODE:
Figure f=readNodesRecursively(node);
if (f instanceof Drawing) {
external=(Drawing)f;
}
 else if (f instanceof Clipping) {
clipping=(Clipping)f;
}
}
}
if (external == null && clipping == null) {
if (namespaceURI == null) {
throw new IOException("The document does not contain a drawing.");
}
 else {
throw new IOException("The document does not contain a drawing in namespace \"" + namespaceURI + "\".");
}
}
if (external != null) {
external.set(Drawing.DOCUMENT_HOME,getExternalHome());
external.set(XML_EPILOG_COMMENT_KEY,comments);
}
try {
for (Map.Entry<Figure,Element> entry : figureToElementMap.entrySet()) {
readElementAttributes(entry.getKey(),entry.getValue());
readElementNodeList(entry.getKey(),entry.getValue());
}
}
  finally {
figureToElementMap.clear();
}
comments=null;
if (external != null) {
Drawing internal=factory.fromExternalDrawing(external);
internal.updateCss();
return internal;
}
 else {
return clipping;
}
}
