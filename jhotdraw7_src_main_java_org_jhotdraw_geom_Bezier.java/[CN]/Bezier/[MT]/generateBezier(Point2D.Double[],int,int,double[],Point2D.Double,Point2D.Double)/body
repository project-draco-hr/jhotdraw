{
  int i;
  Point2D.Double[][] A=new Point2D.Double[MAXPOINTS][2];
  int nPts;
  double[][] C=new double[2][2];
  double[] X=new double[2];
  double det_C0_C1, det_C0_X, det_X_C1;
  double alpha_l, alpha_r;
  Point2D.Double tmp=new Point2D.Double();
  Point2D.Double[] bezCurve;
  bezCurve=new Point2D.Double[4];
  for (i=0; i < bezCurve.length; i++) {
    bezCurve[i]=new Point2D.Double();
  }
  nPts=last - first + 1;
  for (i=0; i < nPts; i++) {
    Point2D.Double v1, v2;
    v1=(Point2D.Double)tHat1.clone();
    v2=(Point2D.Double)tHat2.clone();
    v2Scale(v1,b1(uPrime[i]));
    v2Scale(v2,b2(uPrime[i]));
    A[i][0]=v1;
    A[i][1]=v2;
  }
  C[0][0]=0.0;
  C[0][1]=0.0;
  C[1][0]=0.0;
  C[1][1]=0.0;
  X[0]=0.0;
  X[1]=0.0;
  for (i=0; i < nPts; i++) {
    C[0][0]+=v2Dot(A[i][0],A[i][0]);
    C[0][1]+=v2Dot(A[i][0],A[i][1]);
    C[1][0]=C[0][1];
    C[1][1]+=v2Dot(A[i][1],A[i][1]);
    tmp=v2SubII(d[first + i],v2AddII(v2ScaleIII(d[first],b0(uPrime[i])),v2AddII(v2ScaleIII(d[first],b1(uPrime[i])),v2AddII(v2ScaleIII(d[last],b2(uPrime[i])),v2ScaleIII(d[last],b3(uPrime[i]))))));
    X[0]+=v2Dot(A[i][0],tmp);
    X[1]+=v2Dot(A[i][1],tmp);
  }
  det_C0_C1=C[0][0] * C[1][1] - C[1][0] * C[0][1];
  det_C0_X=C[0][0] * X[1] - C[0][1] * X[0];
  det_X_C1=X[0] * C[1][1] - X[1] * C[0][1];
  if (det_C0_C1 == 0.0) {
    det_C0_C1=(C[0][0] * C[1][1]) * 10e-12;
  }
  alpha_l=det_X_C1 / det_C0_C1;
  alpha_r=det_C0_X / det_C0_C1;
  if (alpha_l < 1.0e-6 || alpha_r < 1.0e-6) {
    double dist=v2DistanceBetween2Points(d[last],d[first]) / 3.0;
    bezCurve[0]=d[first];
    bezCurve[3]=d[last];
    v2Add(bezCurve[0],v2Scale(tHat1,dist),bezCurve[1]);
    v2Add(bezCurve[3],v2Scale(tHat2,dist),bezCurve[2]);
    return (bezCurve);
  }
  bezCurve[0]=d[first];
  bezCurve[3]=d[last];
  v2Add(bezCurve[0],v2Scale(tHat1,alpha_l),bezCurve[1]);
  v2Add(bezCurve[3],v2Scale(tHat2,alpha_r),bezCurve[2]);
  return (bezCurve);
}
