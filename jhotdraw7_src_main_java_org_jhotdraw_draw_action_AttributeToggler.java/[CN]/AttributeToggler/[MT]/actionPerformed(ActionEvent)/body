{
  if (compatibleTextAction != null) {
    Component focusOwner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();
    if (focusOwner != null && focusOwner instanceof JTextComponent) {
      compatibleTextAction.actionPerformed(evt);
      return;
    }
  }
  Iterator i=getView().getSelectedFigures().iterator();
  Object toggleValue=value1;
  if (i.hasNext()) {
    Figure f=(Figure)i.next();
    Object attr=f.getAttribute(key);
    if (value1 == null && attr == null || (value1 != null && attr != null && attr.equals(value1))) {
      toggleValue=value2;
    }
  }
  final Object newValue=toggleValue;
  final ArrayList<Figure> selectedFigures=new ArrayList(getView().getSelectedFigures());
  final ArrayList<Object> restoreData=new ArrayList<Object>(selectedFigures.size());
  for (  Figure figure : selectedFigures) {
    restoreData.add(figure.getAttributesRestoreData());
    key.set(figure,newValue);
  }
  UndoableEdit edit=new AbstractUndoableEdit(){
    public String getPresentationName(){
      String name=(String)getValue(Actions.UNDO_PRESENTATION_NAME_KEY);
      if (name == null) {
        name=(String)getValue(AbstractAction.NAME);
      }
      if (name == null) {
        ResourceBundleUtil labels=ResourceBundleUtil.getLAFBundle("org.jhotdraw.draw.Labels");
        name=labels.getString("attribute");
      }
      return name;
    }
    public void undo(){
      super.undo();
      Iterator<Object> iRestore=restoreData.iterator();
      for (      Figure figure : selectedFigures) {
        figure.willChange();
        figure.restoreAttributesTo(iRestore.next());
        figure.changed();
      }
    }
    public void redo(){
      super.redo();
      for (      Figure figure : selectedFigures) {
        restoreData.add(figure.getAttributesRestoreData());
        key.set(figure,newValue);
      }
    }
  }
;
  getView().getDrawing().fireUndoableEditHappened(edit);
}
