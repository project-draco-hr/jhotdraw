{
  final ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");
  LinkedList<Action> actions=new LinkedList<Action>();
  if (get(TRANSFORM) != null) {
    actions.add(new AbstractAction(labels.getString("edit.removeTransform.text")){
      @Override public void actionPerformed(      ActionEvent evt){
        willChange();
        fireUndoableEditHappened(TRANSFORM.setUndoable(SVGPathFigure.this,null));
        changed();
      }
    }
);
    actions.add(new AbstractAction(labels.getString("edit.flattenTransform.text")){
      @Override public void actionPerformed(      ActionEvent evt){
        final Object restoreData=getTransformRestoreData();
        UndoableEdit edit=new AbstractUndoableEdit(){
          @Override public String getPresentationName(){
            return labels.getString("edit.flattenTransform.text");
          }
          @Override public void undo() throws CannotUndoException {
            super.undo();
            willChange();
            restoreTransformTo(restoreData);
            changed();
          }
          @Override public void redo() throws CannotRedoException {
            super.redo();
            willChange();
            restoreTransformTo(restoreData);
            flattenTransform();
            changed();
          }
        }
;
        willChange();
        flattenTransform();
        changed();
        fireUndoableEditHappened(edit);
      }
    }
);
  }
  if (getChild(getChildCount() - 1).get(PATH_CLOSED)) {
    actions.add(new AbstractAction(labels.getString("attribute.openPath.text")){
      @Override public void actionPerformed(      ActionEvent evt){
        willChange();
        for (        Figure child : getChildren()) {
          getDrawing().fireUndoableEditHappened(PATH_CLOSED.setUndoable(child,false));
        }
        changed();
      }
    }
);
  }
 else {
    actions.add(new AbstractAction(labels.getString("attribute.closePath.text")){
      @Override public void actionPerformed(      ActionEvent evt){
        willChange();
        for (        Figure child : getChildren()) {
          getDrawing().fireUndoableEditHappened(PATH_CLOSED.setUndoable(child,true));
        }
        changed();
      }
    }
);
  }
  if (get(WINDING_RULE) != WindingRule.EVEN_ODD) {
    actions.add(new AbstractAction(labels.getString("attribute.windingRule.evenOdd.text")){
      @Override public void actionPerformed(      ActionEvent evt){
        willChange();
        getDrawing().fireUndoableEditHappened(WINDING_RULE.setUndoable(SVGPathFigure.this,WindingRule.EVEN_ODD));
        changed();
      }
    }
);
  }
 else {
    actions.add(new AbstractAction(labels.getString("attribute.windingRule.nonZero.text")){
      @Override public void actionPerformed(      ActionEvent evt){
        willChange();
        set(WINDING_RULE,WindingRule.NON_ZERO);
        changed();
        getDrawing().fireUndoableEditHappened(WINDING_RULE.setUndoable(SVGPathFigure.this,WindingRule.NON_ZERO));
      }
    }
);
  }
  return actions;
}
