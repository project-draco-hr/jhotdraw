{
  final ResourceBundleUtil labels=ResourceBundleUtil.getLAFBundle("org.jhotdraw.samples.svg.Labels");
  LinkedList<Action> actions=new LinkedList<Action>();
  if (TRANSFORM.get(this) != null) {
    actions.add(new AbstractAction(labels.getString("removeTransform")){
      public void actionPerformed(      ActionEvent evt){
        ResourceBundleUtil labels=ResourceBundleUtil.getLAFBundle("org.jhotdraw.samples.svg.Labels");
        SVGPathFigure.this.willChange();
        fireUndoableEditHappened(TRANSFORM.setUndoable(SVGPathFigure.this,null,labels));
        SVGPathFigure.this.changed();
      }
    }
);
    actions.add(new AbstractAction(labels.getString("flattenTransform")){
      public void actionPerformed(      ActionEvent evt){
        final Object restoreData=getTransformRestoreData();
        UndoableEdit edit=new AbstractUndoableEdit(){
          public String getPresentationName(){
            return labels.getString("flattenTransform");
          }
          public void undo() throws CannotUndoException {
            super.undo();
            willChange();
            restoreTransformTo(restoreData);
            changed();
          }
          public void redo() throws CannotRedoException {
            super.redo();
            willChange();
            restoreTransformTo(restoreData);
            flattenTransform();
            changed();
          }
        }
;
        willChange();
        flattenTransform();
        changed();
        fireUndoableEditHappened(edit);
      }
    }
);
  }
  if (CLOSED.get(getChild(getChildCount() - 1))) {
    actions.add(new AbstractAction(labels.getString("openPath")){
      public void actionPerformed(      ActionEvent evt){
        SVGPathFigure.this.willChange();
        for (        Figure child : getChildren()) {
          getDrawing().fireUndoableEditHappened(CLOSED.setUndoable(child,false,labels));
        }
        SVGPathFigure.this.changed();
      }
    }
);
  }
 else {
    actions.add(new AbstractAction(labels.getString("closePath")){
      public void actionPerformed(      ActionEvent evt){
        SVGPathFigure.this.willChange();
        for (        Figure child : getChildren()) {
          getDrawing().fireUndoableEditHappened(CLOSED.setUndoable(child,true,labels));
        }
        SVGPathFigure.this.changed();
      }
    }
);
  }
  if (WINDING_RULE.get(this) != WindingRule.EVEN_ODD) {
    actions.add(new AbstractAction(labels.getString("windingRule.evenOdd")){
      public void actionPerformed(      ActionEvent evt){
        SVGPathFigure.this.willChange();
        getDrawing().fireUndoableEditHappened(WINDING_RULE.setUndoable(SVGPathFigure.this,WindingRule.EVEN_ODD,labels));
        SVGPathFigure.this.changed();
      }
    }
);
  }
 else {
    actions.add(new AbstractAction(labels.getString("windingRule.nonZero")){
      public void actionPerformed(      ActionEvent evt){
        WINDING_RULE.set(SVGPathFigure.this,WindingRule.NON_ZERO);
        getDrawing().fireUndoableEditHappened(WINDING_RULE.setUndoable(SVGPathFigure.this,WindingRule.NON_ZERO,labels));
      }
    }
);
  }
  return actions;
}
