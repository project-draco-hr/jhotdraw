{
  if ((str == null || str.length() - pp.getIndex() <= 0)) {
    return null;
  }
  if (str.startsWith("NaN",pp.getIndex())) {
    pp.setIndex(pp.getIndex() + 3);
    return Double.NaN;
  }
  if (str.startsWith("INF",pp.getIndex())) {
    pp.setIndex(pp.getIndex() + 3);
    return Double.POSITIVE_INFINITY;
  }
  if (str.startsWith("-INF",pp.getIndex())) {
    pp.setIndex(pp.getIndex() + 4);
    return Double.NEGATIVE_INFINITY;
  }
  int end=pp.getIndex();
{
    boolean noMoreSigns=false;
    boolean noMorePoints=false;
    boolean noMoreEs=false;
    Outer:     for (; end < str.length(); end++) {
      char c=str.charAt(end);
switch (c) {
case '+':
case '-':
        if (noMoreSigns) {
          break Outer;
        }
      noMoreSigns=true;
    break;
case '.':
  if (noMorePoints) {
    break Outer;
  }
noMoreSigns=true;
noMorePoints=true;
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
noMoreSigns=true;
break;
case 'e':
case 'E':
if (noMoreEs) {
break Outer;
}
noMoreSigns=false;
noMorePoints=false;
noMoreEs=true;
break;
default :
break Outer;
}
}
}
String text=str.substring(pp.getIndex(),end);
Double value=0.0;
try {
value=Double.parseDouble(text);
}
 catch (NumberFormatException e) {
pp.setErrorIndex(pp.getIndex());
return null;
}
if (!isValid(value)) {
pp.setErrorIndex(pp.getIndex());
return null;
}
pp.setIndex(end);
return value;
}
