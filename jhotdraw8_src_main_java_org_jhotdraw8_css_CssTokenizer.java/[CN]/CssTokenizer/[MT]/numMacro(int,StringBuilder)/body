{
  boolean hasSign=false;
  if (ch == '-') {
    hasSign=true;
    buf.append('-');
    ch=in.nextChar();
  }
 else   if (ch == '+') {
    hasSign=true;
    ch=in.nextChar();
  }
  boolean hasDecimals=false;
  boolean hasFractionalsOrExponent=false;
  while ('0' <= ch && ch <= '9') {
    hasDecimals=true;
    buf.append((char)ch);
    ch=in.nextChar();
  }
  if (ch == '.') {
    hasFractionalsOrExponent=true;
    int next=in.nextChar();
    if (!('0' <= next && next <= '9')) {
      in.pushBack(next);
      if (hasDecimals) {
        in.pushBack(ch);
        return true;
      }
      return false;
    }
    buf.append('.');
    ch=next;
    while ('0' <= ch && ch <= '9') {
      buf.append((char)ch);
      ch=in.nextChar();
    }
  }
  if ((hasDecimals || hasFractionalsOrExponent) && (ch == 'e' || ch == 'E')) {
    hasFractionalsOrExponent=true;
    buf.append('E');
    int expchar=ch;
    ch=in.nextChar();
    if (ch == '-') {
      buf.append('-');
      ch=in.nextChar();
    }
 else     if (ch == '+') {
      ch=in.nextChar();
    }
    boolean hasExponents=false;
    while ('0' <= ch && ch <= '9') {
      hasExponents=true;
      buf.append((char)ch);
      ch=in.nextChar();
    }
    if (!hasExponents) {
      in.pushBack(ch);
      ch=expchar;
      buf.setLength(buf.length() - 1);
    }
  }
  if (!hasDecimals && !hasFractionalsOrExponent) {
    if (hasSign) {
      in.pushBack(ch);
      buf.setLength(buf.length() - 1);
    }
    return false;
  }
  try {
    stringValue=buf.toString();
    if (hasFractionalsOrExponent) {
      numericValue=Double.parseDouble(stringValue);
    }
 else {
      numericValue=Integer.parseInt(stringValue);
    }
  }
 catch (  NumberFormatException e) {
    throw new InternalError("Tokenizer is broken.",e);
  }
  in.pushBack(ch);
  return true;
}
