{
  final View view=(View)getActiveView();
  if (view.isEnabled()) {
    ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");
    oldFocusOwner=SwingUtilities.getWindowAncestor(view.getComponent()).getFocusOwner();
    view.setEnabled(false);
    try {
      URIChooser fileChooser=getApplication().getExportChooser(view);
      JSheet.showSheet(fileChooser,view.getComponent(),labels.getString("filechooser.export"),new SheetListener(){
        @Override public void optionSelected(        final SheetEvent evt){
          if (evt.getOption() == JFileChooser.APPROVE_OPTION) {
            final URI uri=evt.getChooser().getSelectedURI();
            if (!getApplication().getModel().isAllowMultipleViewsPerURI()) {
              for (              View v : getApplication().getViews()) {
                if (v != view && v.getURI() != null && v.getURI().equals(uri)) {
                  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");
                  JSheet.showMessageSheet(view.getComponent(),labels.getFormatted("file.export.couldntExportIntoOpenFile.message",evt.getFileChooser().getSelectedFile().getName()));
                  view.setEnabled(true);
                  return;
                }
              }
            }
            if (evt.getChooser() instanceof JFileURIChooser) {
              exportView(view,uri,evt.getChooser());
            }
 else {
              exportView(view,uri,null);
            }
          }
 else {
            view.setEnabled(true);
            if (oldFocusOwner != null) {
              oldFocusOwner.requestFocus();
            }
          }
        }
      }
);
    }
 catch (    Error err) {
      view.setEnabled(true);
      throw err;
    }
  }
}
