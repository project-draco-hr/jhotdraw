{
  final View view=getActiveView();
  if (view.isEnabled()) {
    ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");
    oldFocusOwner=SwingUtilities.getWindowAncestor(view.getComponent()).getFocusOwner();
    view.setEnabled(false);
    try {
      URIChooser fileChooser=getApplication().getExportChooser(view);
      if (proposeFileName) {
        URI proposedURI=view.getURI();
        if (proposedURI != null) {
          try {
            URI selectedURI=fileChooser.getSelectedURI();
            File selectedFolder;
            if (selectedURI == null) {
              Preferences prefs=Preferences.userNodeForPackage(getApplication().getModel().getClass());
              try {
                selectedURI=new URI(prefs.get("recentExportFile",new File(proposedURI).getParentFile().toURI().toString()));
                selectedFolder=new File(selectedURI).getParentFile();
              }
 catch (              URISyntaxException ex) {
                selectedFolder=new File(proposedURI).getParentFile();
              }
            }
 else {
              selectedFolder=new File(selectedURI).getParentFile();
            }
            File file=new File(selectedFolder,new File(proposedURI).getName());
            String name=file.getName();
            int p=name.lastIndexOf('.');
            if (p != -1) {
              name=name.substring(0,p);
              file=new File(selectedFolder,name);
              proposedURI=file.toURI();
            }
          }
 catch (          IllegalArgumentException e) {
          }
        }
        fileChooser.setSelectedURI(proposedURI);
      }
      JSheet.showSheet(fileChooser,view.getComponent(),labels.getString("filechooser.export"),new SheetListener(){
        @Override public void optionSelected(        final SheetEvent evt){
          if (evt.getOption() == JFileChooser.APPROVE_OPTION) {
            URI uri=evt.getChooser().getSelectedURI();
            if ((evt.getChooser() instanceof JFileURIChooser) && evt.getFileChooser().getFileFilter() instanceof ExtensionFileFilter) {
              uri=((ExtensionFileFilter)evt.getFileChooser().getFileFilter()).makeAcceptable(evt.getFileChooser().getSelectedFile()).toURI();
            }
 else {
              uri=evt.getChooser().getSelectedURI();
            }
            Preferences prefs=Preferences.userNodeForPackage(getApplication().getModel().getClass());
            prefs.put("recentExportFile",uri.toString());
            if (evt.getChooser() instanceof JFileURIChooser) {
              exportView(view,uri,evt.getChooser());
            }
 else {
              exportView(view,uri,null);
            }
          }
 else {
            view.setEnabled(true);
            if (oldFocusOwner != null) {
              oldFocusOwner.requestFocus();
            }
          }
        }
      }
);
    }
 catch (    Error err) {
      view.setEnabled(true);
      throw err;
    }
catch (    Throwable err) {
      view.setEnabled(true);
      err.printStackTrace();
    }
  }
}
