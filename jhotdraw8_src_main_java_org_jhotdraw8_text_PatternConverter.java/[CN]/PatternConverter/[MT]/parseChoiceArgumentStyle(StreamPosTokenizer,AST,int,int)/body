{
  ChoiceArgument argument=new ChoiceArgument();
  argument.index=index;
  ArrayList<Double> limits=new ArrayList<>();
  StringBuilder style=new StringBuilder();
  int depth=0;
  while ((tt.nextToken() != '}' || depth > 0) && tt.ttype != StreamPosTokenizer.TT_EOF) {
    tt.pushBack();
    int startPosition=tt.getStartPosition();
    while (((tt.nextToken() != '#' && tt.ttype != '}') || depth > 0) && tt.ttype != StreamPosTokenizer.TT_EOF) {
switch (tt.ttype) {
case '\'':
        style.append((tt.sval.isEmpty()) ? "\'" : tt.sval);
      break;
default :
    style.append((char)tt.ttype);
  break;
}
}
try {
double limit=Double.parseDouble(style.toString());
limits.add(limit);
}
 catch (NumberFormatException e) {
throw new IOException("Choice Argument: Illegal number format for limit: '" + style + "' @"+ (startPosition + offset));
}
style.delete(0,style.length());
if (tt.ttype != '#') {
tt.pushBack();
}
int itemPosition=tt.getEndPosition();
while (((tt.nextToken() != '|' && tt.ttype != '}') || depth > 0) && tt.ttype != StreamPosTokenizer.TT_EOF) {
switch (tt.ttype) {
case '\'':
style.append((tt.sval.isEmpty()) ? "\'" : tt.sval);
break;
case '{':
style.append('{');
depth++;
break;
case '}':
style.append('}');
depth--;
break;
default :
style.append((char)tt.ttype);
break;
}
}
AST child=new AST();
argument.limits=new double[limits.size()];
for (int i=0, n=limits.size(); i < n; i++) {
argument.limits[i]=limits.get(i);
}
argument.children.add(child);
parseTextFormatPattern(style.toString(),child,offset + itemPosition);
style.delete(0,style.length());
if (tt.ttype != '|') {
tt.pushBack();
}
}
parent.children.add(argument);
}
