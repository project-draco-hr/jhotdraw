{
  for (  Map.Entry<AttributeKey<?>,Object> entry : a.entrySet()) {
    getEditor().setDefaultAttribute((AttributeKey<Object>)entry.getKey(),entry.getValue());
  }
  final ArrayList<Figure> selectedFigures=new ArrayList<Figure>(figures);
  final ArrayList<Object> restoreData=new ArrayList<Object>(selectedFigures.size());
  for (  Figure figure : selectedFigures) {
    restoreData.add(figure.getAttributesRestoreData());
    figure.willChange();
    for (    Map.Entry<AttributeKey<?>,Object> entry : a.entrySet()) {
      figure.set((AttributeKey<Object>)entry.getKey(),entry.getValue());
    }
    figure.changed();
  }
  UndoableEdit edit=new AbstractUndoableEdit(){
    private static final long serialVersionUID=1L;
    @Override public String getPresentationName(){
      String name=(String)getValue(ActionUtil.UNDO_PRESENTATION_NAME_KEY);
      if (name == null) {
        name=(String)getValue(AbstractAction.NAME);
      }
      if (name == null) {
        ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");
        name=labels.getString("attribute.text");
      }
      return name;
    }
    @Override public void undo(){
      super.undo();
      Iterator<Object> iRestore=restoreData.iterator();
      for (      Figure figure : selectedFigures) {
        figure.willChange();
        figure.restoreAttributesTo(iRestore.next());
        figure.changed();
      }
    }
    @Override public void redo(){
      super.redo();
      for (      Figure figure : selectedFigures) {
        figure.willChange();
        for (        Map.Entry<AttributeKey<?>,Object> entry : a.entrySet()) {
          figure.set((AttributeKey<Object>)entry.getKey(),entry.getValue());
        }
        figure.changed();
      }
    }
  }
;
  getDrawing().fireUndoableEditHappened(edit);
}
