{
  final Application app=getApplication();
  if (!getApplication().getModel().isAllowMultipleViewsPerURI()) {
    for (    View vw : getApplication().getViews()) {
      if (vw.getURI() != null && vw.getURI().equals(uri)) {
        vw.getComponent().requestFocus();
        return;
      }
    }
  }
  if (v == null) {
    View emptyView=app.getActiveView();
    if (emptyView == null || emptyView.getURI() != null || emptyView.hasUnsavedChanges()) {
      emptyView=null;
    }
    if (emptyView == null) {
      v=app.createView();
      app.add(v);
      app.show(v);
    }
 else {
      v=emptyView;
    }
  }
  final View view=v;
  app.setEnabled(true);
  view.setEnabled(false);
  int multipleOpenId=1;
  for (  View aView : app.views()) {
    if (aView != view && aView.getURI() != null && aView.getURI().equals(uri)) {
      multipleOpenId=Math.max(multipleOpenId,aView.getMultipleOpenId() + 1);
    }
  }
  view.setMultipleOpenId(multipleOpenId);
  view.execute(new Worker<Object>(){
    @Override protected Object construct() throws IOException {
      boolean exists=true;
      try {
        File f=new File(uri);
        exists=f.exists();
      }
 catch (      IllegalArgumentException e) {
      }
      if (exists) {
        view.read(uri,null);
        return null;
      }
 else {
        ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");
        throw new IOException(labels.getFormatted("file.load.fileDoesNotExist.message",URIUtil.getName(uri)));
      }
    }
    @Override protected void done(    Object value){
      final Application app=getApplication();
      view.setURI(uri);
      app.addRecentURI(uri);
      Frame w=(Frame)SwingUtilities.getWindowAncestor(view.getComponent());
      if (w != null) {
        w.setExtendedState(w.getExtendedState() & ~Frame.ICONIFIED);
        w.toFront();
      }
      view.getComponent().requestFocus();
      app.setEnabled(true);
    }
    @Override protected void failed(    Throwable error){
      error.printStackTrace();
      ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");
      JSheet.showMessageSheet(view.getComponent(),"<html>" + UIManager.getString("OptionPane.css") + "<b>"+ labels.getFormatted("file.load.couldntLoad.message",URIUtil.getName(uri))+ "</b><p>"+ error,JOptionPane.ERROR_MESSAGE,new SheetListener(){
        @Override public void optionSelected(        SheetEvent evt){
        }
      }
);
    }
    @Override protected void finished(){
      view.setEnabled(true);
    }
  }
);
}
