{
switch (collection.size()) {
case 0:
    return (ImmutableSet<T>)EMPTY;
case 1:
  if (collection.contains(item)) {
    return (ImmutableSet<T>)EMPTY;
  }
 else   if (collection instanceof ImmutableSet) {
    return (ImmutableSet<T>)collection;
  }
 else {
    return new ImmutableSet(true,Collections.singleton(item));
  }
case 2:
if (collection.contains(item)) {
  Iterator<T> iter=collection.iterator();
  T one=iter.next();
  T two=iter.next();
  return new ImmutableSet(true,Collections.singleton(one.equals(item) ? two : one));
}
 else {
  if (collection instanceof ImmutableSet) {
    return (ImmutableSet<T>)collection;
  }
  return new ImmutableSet(collection);
}
default :
if (collection.contains(item)) {
Set<T> a=new LinkedHashSet<T>(collection);
a.remove(item);
return new ImmutableSet<T>(true,a);
}
 else {
if (collection instanceof ImmutableSet) {
  return (ImmutableSet<T>)collection;
}
return new ImmutableSet(collection);
}
}
}
