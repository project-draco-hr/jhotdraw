{
  String componentName=component.getName();
  if (componentName != null) {
    boolean matchingResourceFound=false;
    for (    String key : keySet()) {
      int i=key.lastIndexOf(".");
      if ((i != -1) && componentName.equals(key.substring(0,i))) {
        matchingResourceFound=true;
        break;
      }
    }
    if (!matchingResourceFound) {
      return;
    }
    BeanInfo beanInfo=null;
    try {
      beanInfo=Introspector.getBeanInfo(component.getClass());
    }
 catch (    IntrospectionException e) {
      String msg="introspection failed";
      RuntimeException re=new PropertyInjectionException(msg,null,component,null);
      re.initCause(e);
      throw re;
    }
    PropertyDescriptor[] pds=beanInfo.getPropertyDescriptors();
    if ((pds != null) && (pds.length > 0)) {
      for (      String key : keySet()) {
        int i=key.lastIndexOf(".");
        String keyComponentName=(i == -1) ? null : key.substring(0,i);
        if (componentName.equals(keyComponentName)) {
          if ((i + 1) == key.length()) {
            String msg="component resource lacks property name suffix";
            logger.warning(msg);
            break;
          }
          String propertyName=key.substring(i + 1);
          boolean matchingPropertyFound=false;
          for (          PropertyDescriptor pd : pds) {
            if (pd.getName().equals(propertyName)) {
              injectComponentProperty(component,pd,key);
              matchingPropertyFound=true;
              break;
            }
          }
          if (!matchingPropertyFound) {
            String msg=String.format("[resource %s] component named %s doesn't have a property named %s",key,componentName,propertyName);
            logger.warning(msg);
          }
        }
      }
    }
  }
}
