{
  checkNullKey(key);
  if (type == null) {
    throw new IllegalArgumentException("null type");
  }
  if (type.isPrimitive()) {
    if (type == Boolean.TYPE) {
      type=Boolean.class;
    }
 else     if (type == Character.TYPE) {
      type=Character.class;
    }
 else     if (type == Byte.TYPE) {
      type=Byte.class;
    }
 else     if (type == Short.TYPE) {
      type=Short.class;
    }
 else     if (type == Integer.TYPE) {
      type=Integer.class;
    }
 else     if (type == Long.TYPE) {
      type=Long.class;
    }
 else     if (type == Float.TYPE) {
      type=Float.class;
    }
 else     if (type == Double.TYPE) {
      type=Double.class;
    }
  }
  Object value=null;
  ResourceMap resourceMapNode=this;
  while (resourceMapNode != null) {
    if (resourceMapNode.containsResourceKey(key)) {
      value=resourceMapNode.getResource(key);
      break;
    }
    resourceMapNode=resourceMapNode.getParent();
  }
  if ((value instanceof String) && ((String)value).contains("${")) {
    value=evaluateStringExpression((String)value);
    resourceMapNode.putResource(key,value);
  }
  if (value != null) {
    Class valueClass=value.getClass();
    if (!type.isAssignableFrom(valueClass)) {
      if (value instanceof String) {
        ResourceConverter stringConverter=ResourceConverter.forType(type);
        if (stringConverter != null) {
          String sValue=(String)value;
          try {
            value=stringConverter.parseString(sValue,resourceMapNode);
            resourceMapNode.putResource(key,value);
          }
 catch (          ResourceConverterException e) {
            String msg="string conversion failed";
            LookupException lfe=new LookupException(msg,key,type);
            lfe.initCause(e);
            throw lfe;
          }
        }
 else {
          String msg="no StringConverter for required type";
          throw new LookupException(msg,key,type);
        }
      }
 else {
        String msg="named resource has wrong type";
        throw new LookupException(msg,key,type);
      }
    }
  }
  return value;
}
