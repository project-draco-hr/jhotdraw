{
  double ax=a1.getX();
  double ay=a1.getY();
  double bx=a2.getX();
  double by=a2.getY();
  Point2D a, b, c, d;
  Point2D c3, c2, c1, c0;
  double cl;
  Point2D n;
  final Point2D amin=minp(a1,a2);
  final Point2D amax=maxp(a1,a2);
  List<Map.Entry<Double,Point2D>> result=new ArrayList<>();
  a=p1.multiply(-1);
  b=p2.multiply(3);
  c=p3.multiply(-3);
  d=a.add(b.add(c.add(p4)));
  c3=new Point2D(d.getX(),d.getY());
  a=p1.multiply(3);
  b=p2.multiply(-6);
  c=p3.multiply(3);
  d=a.add(b.add(c));
  c2=new Point2D(d.getX(),d.getY());
  a=p1.multiply(-3);
  b=p2.multiply(3);
  c=a.add(b);
  c1=new Point2D(c.getX(),c.getY());
  c0=new Point2D(p1.getX(),p1.getY());
  n=new Point2D(a1.getY() - a2.getY(),a2.getX() - a1.getX());
  cl=a1.getX() * a2.getY() - a2.getX() * a1.getY();
  final Polynomial polynomial=new Polynomial(n.dotProduct(c3),n.dotProduct(c2),n.dotProduct(c1),n.dotProduct(c0) + cl);
  double[] roots=polynomial.getRoots();
  Intersection.Status status=Intersection.Status.NO_INTERSECTION;
  for (int i=0; i < roots.length; i++) {
    double t=roots[i];
    if (0 <= t && t <= 1) {
      Point2D p5=lerp(p1,p2,t);
      Point2D p6=lerp(p2,p3,t);
      Point2D p7=lerp(p3,p4,t);
      Point2D p8=lerp(p5,p6,t);
      Point2D p9=lerp(p6,p7,t);
      Point2D p10=lerp(p8,p9,t);
      if (a1.getX() == a2.getX()) {
        if (amin.getY() <= p10.getY() && p10.getY() <= amax.getY()) {
          status=Intersection.Status.INTERSECTION;
          result.add(new AbstractMap.SimpleEntry<>(pointOnLine(p10.getX(),p10.getY(),ax,ay,bx,by),p10));
        }
      }
 else       if (a1.getY() == a2.getY()) {
        if (amin.getX() <= p10.getX() && p10.getX() <= amax.getX()) {
          status=Intersection.Status.INTERSECTION;
          result.add(new AbstractMap.SimpleEntry<>(pointOnLine(p10.getX(),p10.getY(),ax,ay,bx,by),p10));
        }
      }
 else       if (gte(p10,amin) && lte(p10,amax)) {
        status=Intersection.Status.INTERSECTION;
        result.add(new AbstractMap.SimpleEntry<>(pointOnLine(p10.getX(),p10.getY(),ax,ay,bx,by),p10));
      }
    }
  }
  return new Intersection(status,result);
}
