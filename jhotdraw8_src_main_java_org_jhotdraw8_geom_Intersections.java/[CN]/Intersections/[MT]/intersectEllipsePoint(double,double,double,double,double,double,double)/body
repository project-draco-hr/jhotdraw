{
  List<Map.Entry<Double,Point2D>> result=new ArrayList<>();
  final Point2D origin, dir, center, diff, mDir, mDiff;
  origin=new Point2D(px,py);
  dir=new Point2D(cx,cy).subtract(px,py);
  center=new Point2D(cx,cy);
  mDir=new Point2D(dir.getX() / (rx * rx),dir.getY() / (ry * ry));
  mDiff=mDir.multiply(-1);
  final double a, b, c, d;
  a=dir.dotProduct(mDir);
  b=dir.dotProduct(mDiff);
  c=dir.dotProduct(mDir) - 1.0;
  d=b * b - a * c;
  Intersection.Status status=Intersection.Status.NO_INTERSECTION;
  if (d < -EPSILON) {
    status=Intersection.Status.NO_INTERSECTION_OUTSIDE;
  }
 else   if (d > 0) {
    final double root, t0, t1;
    root=Math.sqrt(d);
    t0=(-b - root) / a;
    t1=(-b + root) / a;
    if ((t0 < 0 || 1 < t0) && (t1 < 0 || 1 < t1)) {
      if ((t0 < 0 && t1 < 0) || (t0 > 1 && t1 > 1)) {
        status=Intersection.Status.NO_INTERSECTION_OUTSIDE;
      }
 else {
        status=Intersection.Status.NO_INTERSECTION_INSIDE;
      }
    }
 else {
      status=Intersection.Status.INTERSECTION;
      if (0 <= t0 && t0 <= 1) {
        result.add(new AbstractMap.SimpleEntry<>(t0,lerp(px,py,cx,cy,t0)));
      }
      if (0 <= t1 && t1 <= 1) {
        result.add(new AbstractMap.SimpleEntry<>(t1,lerp(px,py,cx,cy,t1)));
      }
    }
  }
 else {
    final double t=-b / a;
    if (0 <= t && t <= 1) {
      status=Intersection.Status.INTERSECTION;
      result.add(new AbstractMap.SimpleEntry<>(t,lerp(px,py,cx,cy,t)));
    }
 else {
      status=Intersection.Status.NO_INTERSECTION_OUTSIDE;
    }
  }
  return new Intersection(status,result);
}
