{
  Point2D a, b, c, d;
  List<Map.Entry<Double,Point2D>> result=new ArrayList<>();
  final Point2D c3, c2, c1, c0;
  c3=p0.multiply(-1).add(p1.multiply(3).add(p2.multiply(-3).add(p3)));
  c2=p0.multiply(3).add(p1.multiply(-6).add(p2.multiply(3)));
  c1=p0.multiply(-3).add(p1.multiply(3));
  c0=p0;
  final double rxrx, ryry, c3x, c3y, c2x, c1x, c2y, c1y, ecx, c0x, c0y, ecy;
  rxrx=rx * rx;
  ryry=ry * ry;
  c3x=c3.getX();
  c3y=c3.getY();
  c2x=c2.getX();
  c1x=c1.getX();
  c2y=c2.getY();
  c1y=c1.getY();
  ecx=ec.getX();
  c0x=c0.getX();
  c0y=c0.getY();
  ecy=ec.getY();
  Polynomial poly=new Polynomial(c3x * c3x * ryry + c3y * c3y * rxrx,2 * (c3x * c2x * ryry + c3y * c2y * rxrx),2 * (c3x * c1x * ryry + c3y * c1y * rxrx) + c2x * c2x * ryry + c2y * c2y * rxrx,2 * c3x * ryry* (c0x - ecx) + 2 * c3y * rxrx* (c0y - ecy) + 2 * (c2x * c1x * ryry + c2y * c1y * rxrx),2 * c2x * ryry* (c0x - ecx) + 2 * c2y * rxrx* (c0y - ecy) + c1x * c1x * ryry + c1y * c1y * rxrx,2 * c1x * ryry* (c0x - ecx) + 2 * c1y * rxrx* (c0y - ecy),c0x * c0x * ryry - 2 * c0y * ecy* rxrx - 2 * c0x * ecx* ryry + c0y * c0y * rxrx + ecx * ecx * ryry + ecy * ecy * rxrx - rxrx * ryry);
  double[] roots=poly.getRootsInInterval(0,1);
  for (int i=0; i < roots.length; i++) {
    double t=roots[i];
    result.add(new AbstractMap.SimpleEntry<>(t,c3.multiply(t * t * t).add(c2.multiply(t * t).add(c1.multiply(t).add(c0)))));
  }
  if (result.size() > 0) {
    return new Intersection(result);
  }
 else {
    return intersectPointEllipse(p0,ec,rx,ry);
  }
}
