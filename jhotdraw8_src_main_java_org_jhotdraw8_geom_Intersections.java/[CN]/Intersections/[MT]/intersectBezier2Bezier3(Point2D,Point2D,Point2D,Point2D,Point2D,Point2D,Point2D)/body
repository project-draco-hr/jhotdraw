{
  Point2D a, b, c, d;
  Point2D c12, c11, c10;
  Point2D c23, c22, c21, c20;
  a=a2.multiply(-2);
  c12=a1.add(a.add(a3));
  a=a1.multiply(-2);
  b=a2.multiply(2);
  c11=a.add(b);
  c10=new Point2D(a1.getX(),a1.getY());
  a=b1.multiply(-1);
  b=b2.multiply(3);
  c=b3.multiply(-3);
  d=a.add(b.add(c.add(b4)));
  c23=new Point2D(d.getX(),d.getY());
  a=b1.multiply(3);
  b=b2.multiply(-6);
  c=b3.multiply(3);
  d=a.add(b.add(c));
  c22=new Point2D(d.getX(),d.getY());
  a=b1.multiply(-3);
  b=b2.multiply(3);
  c=a.add(b);
  c21=new Point2D(c.getX(),c.getY());
  c20=new Point2D(b1.getX(),b1.getY());
  double c10x2=c10.getX() * c10.getX();
  double c10y2=c10.getY() * c10.getY();
  double c11x2=c11.getX() * c11.getX();
  double c11y2=c11.getY() * c11.getY();
  double c12x2=c12.getX() * c12.getX();
  double c12y2=c12.getY() * c12.getY();
  double c20x2=c20.getX() * c20.getX();
  double c20y2=c20.getY() * c20.getY();
  double c21x2=c21.getX() * c21.getX();
  double c21y2=c21.getY() * c21.getY();
  double c22x2=c22.getX() * c22.getX();
  double c22y2=c22.getY() * c22.getY();
  double c23x2=c23.getX() * c23.getX();
  double c23y2=c23.getY() * c23.getY();
  Polynomial poly=new Polynomial(-2 * c12.getX() * c12.getY()* c23.getX()* c23.getY() + c12x2 * c23y2 + c12y2 * c23x2,-2 * c12.getX() * c12.getY()* c22.getX()* c23.getY() - 2 * c12.getX() * c12.getY()* c22.getY()* c23.getX() + 2 * c12y2 * c22.getX()* c23.getX() + 2 * c12x2 * c22.getY()* c23.getY(),-2 * c12.getX() * c21.getX()* c12.getY()* c23.getY() - 2 * c12.getX() * c12.getY()* c21.getY()* c23.getX() - 2 * c12.getX() * c12.getY()* c22.getX()* c22.getY() + 2 * c21.getX() * c12y2* c23.getX() + c12y2 * c22x2 + c12x2 * (2 * c21.getY() * c23.getY() + c22y2),2 * c10.getX() * c12.getX()* c12.getY()* c23.getY() + 2 * c10.getY() * c12.getX()* c12.getY()* c23.getX() + c11.getX() * c11.getY() * c12.getX()* c23.getY() + c11.getX() * c11.getY() * c12.getY()* c23.getX() - 2 * c20.getX() * c12.getX()* c12.getY()* c23.getY() - 2 * c12.getX() * c20.getY()* c12.getY()* c23.getX() - 2 * c12.getX() * c21.getX()* c12.getY()* c22.getY() - 2 * c12.getX() * c12.getY()* c21.getY()* c22.getX() - 2 * c10.getX() * c12y2* c23.getX() - 2 * c10.getY() * c12x2* c23.getY() + 2 * c20.getX() * c12y2* c23.getX() + 2 * c21.getX() * c12y2* c22.getX() - c11y2 * c12.getX() * c23.getX() - c11x2 * c12.getY() * c23.getY() + c12x2 * (2 * c20.getY() * c23.getY() + 2 * c21.getY() * c22.getY()),2 * c10.getX() * c12.getX()* c12.getY()* c22.getY() + 2 * c10.getY() * c12.getX()* c12.getY()* c22.getX() + c11.getX() * c11.getY() * c12.getX()* c22.getY() + c11.getX() * c11.getY() * c12.getY()* c22.getX() - 2 * c20.getX() * c12.getX()* c12.getY()* c22.getY() - 2 * c12.getX() * c20.getY()* c12.getY()* c22.getX() - 2 * c12.getX() * c21.getX()* c12.getY()* c21.getY() - 2 * c10.getX() * c12y2* c22.getX() - 2 * c10.getY() * c12x2* c22.getY() + 2 * c20.getX() * c12y2* c22.getX() - c11y2 * c12.getX() * c22.getX() - c11x2 * c12.getY() * c22.getY() + c21x2 * c12y2 + c12x2 * (2 * c20.getY() * c22.getY() + c21y2),2 * c10.getX() * c12.getX()* c12.getY()* c21.getY() + 2 * c10.getY() * c12.getX()* c21.getX()* c12.getY() + c11.getX() * c11.getY() * c12.getX()* c21.getY() + c11.getX() * c11.getY() * c21.getX()* c12.getY() - 2 * c20.getX() * c12.getX()* c12.getY()* c21.getY() - 2 * c12.getX() * c20.getY()* c21.getX()* c12.getY() - 2 * c10.getX() * c21.getX()* c12y2 - 2 * c10.getY() * c12x2* c21.getY() + 2 * c20.getX() * c21.getX()* c12y2 - c11y2 * c12.getX() * c21.getX() - c11x2 * c12.getY() * c21.getY() + 2 * c12x2 * c20.getY()* c21.getY(),-2 * c10.getX() * c10.getY()* c12.getX()* c12.getY() - c10.getX() * c11.getX() * c11.getY()* c12.getY() - c10.getY() * c11.getX() * c11.getY()* c12.getX() + 2 * c10.getX() * c12.getX()* c20.getY()* c12.getY() + 2 * c10.getY() * c20.getX()* c12.getX()* c12.getY() + c11.getX() * c20.getX() * c11.getY()* c12.getY() + c11.getX() * c11.getY() * c12.getX()* c20.getY() - 2 * c20.getX() * c12.getX()* c20.getY()* c12.getY() - 2 * c10.getX() * c20.getX()* c12y2 + c10.getX() * c11y2 * c12.getX() + c10.getY() * c11x2 * c12.getY() - 2 * c10.getY() * c12x2* c20.getY() - c20.getX() * c11y2 * c12.getX() - c11x2 * c20.getY() * c12.getY() + c10x2 * c12y2 + c10y2 * c12x2 + c20x2 * c12y2 + c12x2 * c20y2);
  double[] roots=poly.getRootsInInterval(0,1);
  List<Map.Entry<Double,Point2D>> result=new ArrayList<>();
  for (int i=0; i < roots.length; i++) {
    double s=roots[i];
    double[] xRoots=new Polynomial(c12.getX(),c11.getX(),c10.getX() - c20.getX() - s * c21.getX() - s * s * c22.getX() - s * s * s* c23.getX()).getRoots();
    double[] yRoots=new Polynomial(c12.getY(),c11.getY(),c10.getY() - c20.getY() - s * c21.getY() - s * s * c22.getY() - s * s * s* c23.getY()).getRoots();
    if (xRoots.length > 0 && yRoots.length > 0) {
      double TOLERANCE=1e-4;
      checkRoots:       for (int j=0; j < xRoots.length; j++) {
        double xRoot=xRoots[j];
        if (0 <= xRoot && xRoot <= 1) {
          for (int k=0; k < yRoots.length; k++) {
            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {
              result.add(new AbstractMap.SimpleEntry<>(xRoot,c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))));
              break checkRoots;
            }
          }
        }
      }
    }
  }
  return new Intersection(result);
}
