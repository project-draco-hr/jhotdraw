{
  final Point2D c2, c1, c0;
  c2=p0.add(p1.multiply(-2).add(p2));
  c1=p0.multiply(-2).add(p1.multiply(2));
  c0=new Point2D(p0.getX(),p0.getY());
  final double rxrx, ryry, cx2, cy2, cx1, cy1, cx0, cy0, ecx, ecy;
  rxrx=rx * rx;
  ryry=ry * ry;
  cx2=c2.getX();
  cy2=c2.getY();
  cx1=c1.getX();
  cy1=c1.getY();
  cx0=c0.getX();
  cy0=c0.getY();
  ecx=c.getX();
  ecy=c.getY();
  final double[] roots=new Polynomial(ryry * cx2 * cx2 + rxrx * cy2 * cy2,2 * (ryry * cx2 * cx1 + rxrx * cy2 * cy1),ryry * (2 * cx2 * cx0 + cx1 * cx1) + rxrx * (2 * cy2 * cy0 + cy1 * cy1) - 2 * (ryry * ecx * cx2 + rxrx * ecy * cy2),2 * (ryry * cx1 * (cx0 - ecx) + rxrx * cy1 * (cy0 - ecy)),ryry * (cx0 * cx0 + ecx * ecx) + rxrx * (cy0 * cy0 + ecy * ecy) - 2 * (ryry * ecx * cx0 + rxrx * ecy * cy0) - rxrx * ryry).getRoots();
  List<Map.Entry<Double,Point2D>> result=new ArrayList<>();
  for (int i=0; i < roots.length; i++) {
    double t=roots[i];
    if (0 <= t && t <= 1) {
      result.add(new AbstractMap.SimpleEntry<>(t,c2.multiply(t * t).add(c1.multiply(t).add(c0))));
    }
  }
  Intersection.Status status;
  if (result.size() > 0) {
    status=Intersection.Status.INTERSECTION;
  }
 else {
    return intersectPointEllipse(p0,c,rx,ry);
  }
  return new Intersection(status,result);
}
