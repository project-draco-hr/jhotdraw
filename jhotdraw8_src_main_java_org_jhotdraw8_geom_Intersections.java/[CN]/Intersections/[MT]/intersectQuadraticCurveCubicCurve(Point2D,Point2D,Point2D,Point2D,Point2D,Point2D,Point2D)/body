{
  final Point2D c12, c11, c10;
  final Point2D c23, c22, c21, c20;
  c12=a0.add(a1.multiply(-2).add(a2));
  c11=a0.multiply(-2).add(a1.multiply(2));
  c10=new Point2D(a0.getX(),a0.getY());
  c23=b0.multiply(-1).add(b1.multiply(3).add(b2.multiply(-3).add(b3)));
  c22=b0.multiply(3).add(b1.multiply(-6).add(b2.multiply(3)));
  c21=b0.multiply(-3).add(b1.multiply(3));
  c20=b0;
  final double c10x, c10y, c11x, c11y, c12x, c12y, c20x, c20y, c21x, c21y, c22x, c22y, c23x, c23y;
  c10x=c10.getX();
  c10y=c10.getY();
  c11x=c11.getX();
  c11y=c11.getY();
  c12x=c12.getX();
  c12y=c12.getY();
  c20x=c20.getX();
  c20y=c20.getY();
  c21x=c21.getX();
  c21y=c21.getY();
  c22x=c22.getX();
  c22y=c22.getY();
  c23x=c23.getX();
  c23y=c23.getY();
  final double c10x2, c10y2, c11x2, c11y2, c12x2, c12y2;
  final double c20x2, c20y2, c21x2, c21y2, c22x2, c22y2, c23x2, c23y2;
  c10x2=c10x * c10x;
  c10y2=c10y * c10y;
  c11x2=c11x * c11x;
  c11y2=c11y * c11y;
  c12x2=c12x * c12x;
  c12y2=c12y * c12y;
  c20x2=c20x * c20x;
  c20y2=c20y * c20y;
  c21x2=c21x * c21x;
  c21y2=c21y * c21y;
  c22x2=c22x * c22x;
  c22y2=c22y * c22y;
  c23x2=c23x * c23x;
  c23y2=c23y * c23y;
  Polynomial poly=new Polynomial(-2 * c12x * c12y* c23x* c23y + c12x2 * c23y2 + c12y2 * c23x2,-2 * c12x * c12y* c22x* c23y - 2 * c12x * c12y* c22y* c23x + 2 * c12y2 * c22x* c23x + 2 * c12x2 * c22y* c23y,-2 * c12x * c21x* c12y* c23y - 2 * c12x * c12y* c21y* c23x - 2 * c12x * c12y* c22x* c22y + 2 * c21x * c12y2* c23x + c12y2 * c22x2 + c12x2 * (2 * c21y * c23y + c22y2),2 * c10x * c12x* c12y* c23y + 2 * c10y * c12x* c12y* c23x + c11x * c11y * c12x* c23y + c11x * c11y * c12y* c23x - 2 * c20x * c12x* c12y* c23y - 2 * c12x * c20y* c12y* c23x - 2 * c12x * c21x* c12y* c22y - 2 * c12x * c12y* c21y* c22x - 2 * c10x * c12y2* c23x - 2 * c10y * c12x2* c23y + 2 * c20x * c12y2* c23x + 2 * c21x * c12y2* c22x - c11y2 * c12x * c23x - c11x2 * c12y * c23y + c12x2 * (2 * c20y * c23y + 2 * c21y * c22y),2 * c10x * c12x* c12y* c22y + 2 * c10y * c12x* c12y* c22x + c11x * c11y * c12x* c22y + c11x * c11y * c12y* c22x - 2 * c20x * c12x* c12y* c22y - 2 * c12x * c20y* c12y* c22x - 2 * c12x * c21x* c12y* c21y - 2 * c10x * c12y2* c22x - 2 * c10y * c12x2* c22y + 2 * c20x * c12y2* c22x - c11y2 * c12x * c22x - c11x2 * c12y * c22y + c21x2 * c12y2 + c12x2 * (2 * c20y * c22y + c21y2),2 * c10x * c12x* c12y* c21y + 2 * c10y * c12x* c21x* c12y + c11x * c11y * c12x* c21y + c11x * c11y * c21x* c12y - 2 * c20x * c12x* c12y* c21y - 2 * c12x * c20y* c21x* c12y - 2 * c10x * c21x* c12y2 - 2 * c10y * c12x2* c21y + 2 * c20x * c21x* c12y2 - c11y2 * c12x * c21x - c11x2 * c12y * c21y + 2 * c12x2 * c20y* c21y,-2 * c10x * c10y* c12x* c12y - c10x * c11x * c11y* c12y - c10y * c11x * c11y* c12x + 2 * c10x * c12x* c20y* c12y + 2 * c10y * c20x* c12x* c12y + c11x * c20x * c11y* c12y + c11x * c11y * c12x* c20y - 2 * c20x * c12x* c20y* c12y - 2 * c10x * c20x* c12y2 + c10x * c11y2 * c12x + c10y * c11x2 * c12y - 2 * c10y * c12x2* c20y - c20x * c11y2 * c12x - c11x2 * c20y * c12y + c10x2 * c12y2 + c10y2 * c12x2 + c20x2 * c12y2 + c12x2 * c20y2);
  final double[] roots=poly.getRootsInInterval(0,1);
  List<Map.Entry<Double,Point2D>> result=new ArrayList<>();
  for (int i=0; i < roots.length; i++) {
    double s=roots[i];
    double[] xRoots=new Polynomial(c12x,c11x,c10x - c20x - s * c21x - s * s * c22x - s * s * s* c23x).getRoots();
    double[] yRoots=new Polynomial(c12y,c11y,c10y - c20y - s * c21y - s * s * c22y - s * s * s* c23y).getRoots();
    if (xRoots.length > 0 && yRoots.length > 0) {
      double TOLERANCE=1e-4;
      checkRoots:       for (int j=0; j < xRoots.length; j++) {
        double xRoot=xRoots[j];
        if (0 <= xRoot && xRoot <= 1) {
          for (int k=0; k < yRoots.length; k++) {
            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {
              result.add(new AbstractMap.SimpleEntry<>(xRoot,c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))));
              break checkRoots;
            }
          }
        }
      }
    }
  }
  return new Intersection(result);
}
