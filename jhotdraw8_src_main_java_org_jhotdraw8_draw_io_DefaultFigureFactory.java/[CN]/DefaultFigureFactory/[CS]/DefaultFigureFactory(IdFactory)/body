{
  addFigureKeysAndNames("Layer",SimpleLayer.class);
  addFigureKeysAndNames("Clipping",SimpleClipping.class);
  addFigureKeysAndNames("Rectangle",RectangleFigure.class);
  addFigureKeysAndNames("Slice",SliceFigure.class);
  addFigureKeysAndNames("Group",GroupFigure.class);
  addFigureKeysAndNames("Polyline",PolylineFigure.class);
  addFigureKeysAndNames("Polygon",PolygonFigure.class);
  addFigureKeysAndNames("Page",PageFigure.class);
{
    Set<MapAccessor<?>> keys=new HashSet<>(Figure.getDeclaredAndInheritedMapAccessors(SimpleDrawing.class));
    keys.remove(Drawing.USER_AGENT_STYLESHEETS);
    keys.remove(Drawing.AUTHOR_STYLESHEETS);
    keys.remove(Drawing.INLINE_STYLESHEETS);
    keys.remove(Drawing.DOCUMENT_HOME);
    addNodeListKey(TextFigure.class,"",TextFigure.TEXT);
    addFigureKeysAndNames("Drawing",SimpleDrawing.class,keys);
  }
{
    Set<MapAccessor<?>> keys=new HashSet<>(Figure.getDeclaredAndInheritedMapAccessors(TextFigure.class));
    keys.remove(TextFigure.TEXT);
    addNodeListKey(TextFigure.class,"",TextFigure.TEXT);
    addFigureKeysAndNames("Text",TextFigure.class,keys);
  }
{
    Set<MapAccessor<?>> keys=new HashSet<>(Figure.getDeclaredAndInheritedMapAccessors(LabelFigure.class));
    keys.remove(LabelFigure.TEXT);
    addNodeListKey(LabelFigure.class,"",LabelFigure.TEXT);
    addFigureKeysAndNames("Label",LabelFigure.class,keys);
  }
{
    Set<MapAccessor<?>> keys=new HashSet<>(Figure.getDeclaredAndInheritedMapAccessors(PageLabelFigure.class));
    keys.remove(PageLabelFigure.TEXT_WITH_PLACEHOLDERS);
    addNodeListKey(PageLabelFigure.class,"",PageLabelFigure.TEXT_WITH_PLACEHOLDERS);
    addFigureKeysAndNames("PageLabel",PageLabelFigure.class,keys);
  }
  addFigureKeysAndNames("Line",LineFigure.class);
  addFigureKeysAndNames("Ellipse",EllipseFigure.class);
  addFigureKeysAndNames("LineConnection",LineConnectionFigure.class);
  addFigureKeysAndNames("LineConnectionWithMarkers",LineConnectionWithMarkersFigure.class);
  addFigureKeysAndNames("Image",ImageFigure.class);
  addFigureKeysAndNames("BezierPath",BezierFigure.class);
  addConverterForType(String.class,new DefaultConverter());
  addConverterForType(Point2D.class,new XmlPoint2DConverter());
  addConverterForType(Point3D.class,new XmlPoint3DConverter());
  addConverterForType(SVGPath.class,new XmlSvgPathConverter());
  addConverterForType(Insets.class,new XmlInsetsConverter());
  addConverterForType(Double.class,new XmlDoubleConverter());
  addConverterForType(URL.class,new XmlUrlConverter());
  addConverterForType(URI.class,new XmlUriConverter());
  addConverterForType(Connector.class,new XmlConnectorConverter());
  addConverterForType(Paint.class,new SvgPaintConverter());
  addConverterForType(Paintable.class,new XmlPaintableConverter());
  addConverterForType(CssColor.class,new XmlCColorConverter(true));
  addConverterForType(Boolean.class,new XmlBooleanConverter());
  addConverterForType(TextAlignment.class,new XmlEnumConverter<TextAlignment>(TextAlignment.class));
  addConverterForType(VPos.class,new XmlEnumConverter<VPos>(VPos.class));
  addConverterForType(HPos.class,new XmlEnumConverter<HPos>(HPos.class));
  addConverterForType(CssFont.class,new XmlFFontConverter());
  addConverterForType(Rectangle2D.class,new XmlRectangle2DConverter());
  addConverterForType(BlendMode.class,new XmlEnumConverter<BlendMode>(BlendMode.class));
  addConverterForType(Effect.class,new XmlEffectConverter());
  addConverterForType(Figure.class,new XmlFigureReferenceConverter());
  addConverterForType(CssSize.class,new CssSizeConverter());
  addConverterForType(CssSizeInsets.class,new CssSizeInsetsConverter());
  addConverterForType(CssSize2D.class,new CssSize2DConverter());
  addConverterForType(FillRule.class,new XmlEnumConverter<FillRule>(FillRule.class));
  addConverter(StyleableFigure.STYLE_CLASS,new CssWordListConverter());
  addConverter(StrokeableFigure.STROKE_DASH_ARRAY,new CssDoubleListConverter());
  addConverter(StrokeableFigure.STROKE_LINE_CAP,new XmlEnumConverter<StrokeLineCap>(StrokeLineCap.class));
  addConverter(StrokeableFigure.STROKE_LINE_JOIN,new XmlEnumConverter<StrokeLineJoin>(StrokeLineJoin.class));
  addConverter(StrokeableFigure.STROKE_TYPE,new XmlEnumConverter<StrokeType>(StrokeType.class));
  addConverter(TransformableFigure.TRANSFORMS,new XmlTransformListConverter());
  addConverter(PolylineFigure.POINTS,new CssPoint2DListConverter());
  addConverter(BezierFigure.PATH,new XmlBezierNodeListConverter(true));
  removeKey(StyleableFigure.PSEUDO_CLASS_STATES);
  removeRedundantKeys();
  checkConverters();
}
