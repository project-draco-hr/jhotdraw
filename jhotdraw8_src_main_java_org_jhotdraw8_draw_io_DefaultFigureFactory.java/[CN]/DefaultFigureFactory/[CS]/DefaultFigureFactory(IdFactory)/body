{
  super(idFactory);
  addFigureKeysAndNames("Layer",SimpleLayer.class);
  addFigureKeysAndNames("Clipping",SimpleClipping.class);
  addFigureKeysAndNames("Rectangle",SimpleRectangleFigure.class);
  addFigureKeysAndNames("Slice",SimpleSliceFigure.class);
  addFigureKeysAndNames("Group",SimpleGroupFigure.class);
  addFigureKeysAndNames("Polyline",SimplePolylineFigure.class);
  addFigureKeysAndNames("Polygon",SimplePolygonFigure.class);
  addFigureKeysAndNames("Page",SimplePageFigure.class);
  addFigureKeysAndNames("CombinedPath",CombinedPathFigure.class);
{
    Set<MapAccessor<?>> keys=new HashSet<>(Figure.getDeclaredAndInheritedMapAccessors(SimpleDrawing.class));
    keys.remove(Drawing.USER_AGENT_STYLESHEETS);
    keys.remove(Drawing.AUTHOR_STYLESHEETS);
    keys.remove(Drawing.INLINE_STYLESHEETS);
    keys.remove(Drawing.DOCUMENT_HOME);
    addFigureKeysAndNames("Drawing",SimpleDrawing.class,keys);
  }
{
    Set<MapAccessor<?>> keys=new HashSet<>(Figure.getDeclaredAndInheritedMapAccessors(SimpleTextFigure.class));
    keys.remove(SimpleTextFigure.TEXT);
    addNodeListKey(SimpleTextFigure.class,"",SimpleTextFigure.TEXT);
    addFigureKeysAndNames("Text",SimpleTextFigure.class,keys);
  }
{
    Set<MapAccessor<?>> keys=new HashSet<>(Figure.getDeclaredAndInheritedMapAccessors(SimpleLabelFigure.class));
    keys.remove(SimpleLabelFigure.TEXT);
    addNodeListKey(SimpleLabelFigure.class,"",SimpleLabelFigure.TEXT);
    addFigureKeysAndNames("Label",SimpleLabelFigure.class,keys);
  }
{
    Set<MapAccessor<?>> keys=new HashSet<>(Figure.getDeclaredAndInheritedMapAccessors(SimplePageLabelFigure.class));
    keys.remove(SimplePageLabelFigure.TEXT_WITH_PLACEHOLDERS);
    addNodeListKey(SimplePageLabelFigure.class,"",SimplePageLabelFigure.TEXT_WITH_PLACEHOLDERS);
    addFigureKeysAndNames("PageLabel",SimplePageLabelFigure.class,keys);
  }
  addFigureKeysAndNames("Line",SimpleLineFigure.class);
  addFigureKeysAndNames("Ellipse",SimpleEllipseFigure.class);
  addFigureKeysAndNames("LineConnection",SimpleLineConnectionFigure.class);
  addFigureKeysAndNames("LineConnectionWithMarkers",SimpleLineConnectionWithMarkersFigure.class);
  addFigureKeysAndNames("Image",SimpleImageFigure.class);
  addFigureKeysAndNames("BezierPath",SimpleBezierFigure.class);
  addConverterForType(String.class,new DefaultConverter());
  addConverterForType(Point2D.class,new XmlPoint2DConverter());
  addConverterForType(Point3D.class,new XmlPoint3DConverter());
  addConverterForType(SVGPath.class,new XmlSvgPathConverter());
  addConverterForType(Insets.class,new XmlInsetsConverter());
  addConverterForType(Double.class,new XmlDoubleConverter());
  addConverterForType(URL.class,new XmlUrlConverter());
  addConverterForType(URI.class,new XmlUriConverter());
  addConverterForType(Connector.class,new XmlConnectorConverter());
  addConverterForType(Paint.class,new SvgPaintConverter());
  addConverterForType(Paintable.class,new XmlPaintableConverter());
  addConverterForType(CssColor.class,new XmlCColorConverter(true));
  addConverterForType(Boolean.class,new XmlBooleanConverter());
  addConverterForType(TextAlignment.class,new XmlEnumConverter<>(TextAlignment.class));
  addConverterForType(CombinedPathFigure.CagOperation.class,new XmlEnumConverter<CombinedPathFigure.CagOperation>(CombinedPathFigure.CagOperation.class));
  addConverterForType(VPos.class,new XmlEnumConverter<>(VPos.class));
  addConverterForType(HPos.class,new XmlEnumConverter<>(HPos.class));
  addConverterForType(CssFont.class,new XmlFFontConverter());
  addConverterForType(Rectangle2D.class,new XmlRectangle2DConverter());
  addConverterForType(BlendMode.class,new XmlEnumConverter<>(BlendMode.class));
  addConverterForType(Effect.class,new XmlEffectConverter());
  addConverterForType(Figure.class,new XmlObjectReferenceConverter<>(Figure.class));
  addConverterForType(CssSize.class,new CssSizeConverter());
  addConverterForType(CssSizeInsets.class,new CssSizeInsetsConverter());
  addConverterForType(CssSize2D.class,new CssSize2DConverter());
  addConverterForType(FillRule.class,new XmlEnumConverter<FillRule>(FillRule.class));
  addConverterForType(FontWeight.class,new XmlEnumConverter<>(FontWeight.class));
  addConverterForType(FontPosture.class,new XmlEnumConverter<>(FontPosture.class));
  addConverterForType(RegexReplace.class,new CssRegexConverter(true));
  addConverterForType(StrokeLineJoin.class,new XmlEnumConverter<>(StrokeLineJoin.class));
  addConverterForType(StrokeLineCap.class,new XmlEnumConverter<>(StrokeLineCap.class));
  addConverterForType(StrokeType.class,new XmlEnumConverter<>(StrokeType.class));
  addConverter(StyleableFigure.STYLE_CLASS,new CssWordListConverter());
  addConverter(TextStrokeableFigure.TEXT_STROKE_DASH_ARRAY,new CssDoubleListConverter());
  addConverter(StrokeableFigure.STROKE_DASH_ARRAY,new CssDoubleListConverter());
  addConverter(TransformableFigure.TRANSFORMS,new XmlTransformListConverter());
  addConverter(SimplePolylineFigure.POINTS,new CssPoint2DListConverter());
  addConverter(SimpleBezierFigure.PATH,new XmlBezierNodeListConverter(true));
  removeKey(StyleableFigure.PSEUDO_CLASS_STATES);
  removeRedundantKeys();
  checkConverters();
}
