{
  List<Point2D.Double> points=new LinkedList<Point2D.Double>();
  double[] coords=new double[6];
  for (PathIterator i=shape.getPathIterator(null); !i.isDone(); i.next()) {
switch (i.currentSegment(coords)) {
case PathIterator.SEG_CLOSE:
      break;
case PathIterator.SEG_MOVETO:
case PathIterator.SEG_LINETO:
    points.add(new Point2D.Double(coords[0],coords[1]));
  break;
case PathIterator.SEG_QUADTO:
points.add(new Point2D.Double(coords[0],coords[1]));
points.add(new Point2D.Double(coords[2],coords[3]));
break;
case PathIterator.SEG_CUBICTO:
points.add(new Point2D.Double(coords[0],coords[1]));
points.add(new Point2D.Double(coords[2],coords[3]));
points.add(new Point2D.Double(coords[4],coords[5]));
break;
}
}
Path2D.Double convexHull=new Path2D.Double();
boolean first=true;
for (Point2D.Double p : getConvexHull2D(points.toArray(new Point2D.Double[points.size()]))) {
if (first) {
convexHull.moveTo(p.x,p.y);
first=false;
}
 else {
convexHull.lineTo(p.x,p.y);
}
}
convexHull.closePath();
return convexHull;
}
