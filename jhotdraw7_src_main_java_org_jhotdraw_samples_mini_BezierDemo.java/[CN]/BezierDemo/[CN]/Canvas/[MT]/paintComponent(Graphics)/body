{
  long start=System.currentTimeMillis();
  super.paintComponent(gr);
  Graphics2D g=(Graphics2D)gr;
  for (  Example ex : examples) {
    if (ex.bezier == null) {
      ex.bezier=Bezier.fitBezierPath(ex.digitized,ex.error);
    }
    if (ex.segments == null) {
      ArrayList<Point2D.Double> digitizedPoints=new ArrayList();
      for (      BezierPath.Node node : ex.digitized) {
        digitizedPoints.add(new Point2D.Double(node.x[0],node.y[0]));
      }
      ex.segments=new ArrayList<ArrayList<Point2D.Double>>();
      ex.segments=Bezier.splitAtCorners(digitizedPoints,77 / 180d * Math.PI,getError() * 2);
      for (int i=0, n=ex.segments.size(); i < n; i++) {
        ArrayList<Point2D.Double> seg=ex.segments.get(i);
        seg=Bezier.removeClosePoints(seg,getError());
        seg=Bezier.reduceNoise(seg,0.8);
        ex.segments.set(i,seg);
      }
    }
  }
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  AffineTransform identityTransform=g.getTransform();
  AffineTransform tx=g.getTransform();
  double zoomFactor=getZoomFactor();
  tx.scale(zoomFactor,zoomFactor);
  g.setTransform(tx);
  if (showPolylineCheck.isSelected()) {
    g.setColor(Color.black);
    for (    Example ex : examples) {
      g.draw(ex.digitized);
    }
  }
  if (showBezierCheck.isSelected()) {
    g.setColor(Color.blue);
    for (    Example ex : examples) {
      g.draw(ex.bezier);
    }
  }
  g.setTransform(identityTransform);
  if (showDigitizedCheck.isSelected()) {
    for (    Example ex : examples) {
      g.setColor(Color.white);
      for (      BezierPath.Node node : ex.digitized) {
        g.fillRect((int)(node.x[0] * zoomFactor - 2),(int)(node.y[0] * zoomFactor - 2),5,5);
      }
    }
    for (    Example ex : examples) {
      g.setColor(Color.black);
      for (      BezierPath.Node node : ex.digitized) {
        g.fillRect((int)(node.x[0] * zoomFactor - 1),(int)(node.y[0] * zoomFactor - 1),3,3);
      }
    }
  }
  if (showPreprocessedCheck.isSelected()) {
    for (    Example ex : examples) {
      g.setColor(Color.WHITE);
      for (      ArrayList<Point2D.Double> seg : ex.segments) {
        for (int i=0, n=seg.size(); i < n; i++) {
          Point2D.Double node=seg.get(i);
          g.fillRect((int)(node.x * zoomFactor - 2),(int)(node.y * zoomFactor - 2),5,5);
        }
      }
      for (      ArrayList<Point2D.Double> seg : ex.segments) {
        for (int i=0, n=seg.size(); i < n; i++) {
          Point2D.Double node=seg.get(i);
          g.setColor((i == 0 || i == n - 1) ? Color.RED : Color.CYAN);
          g.fillRect((int)(node.x * zoomFactor - 1),(int)(node.y * zoomFactor - 1),3,3);
        }
      }
    }
  }
  if (showControlsCheck.isSelected()) {
    for (    Example ex : examples) {
      for (      BezierPath.Node node : ex.bezier) {
        if (node.mask == BezierPath.C0_MASK) {
        }
 else         if (node.mask == BezierPath.C1C2_MASK && node.keepColinear) {
          g.setColor(Color.WHITE);
          g.fillRect((int)(node.x[1] * zoomFactor - 2),(int)(node.y[1] * zoomFactor - 2),5,5);
          g.fillRect((int)(node.x[2] * zoomFactor - 2),(int)(node.y[2] * zoomFactor - 2),5,5);
          g.setColor(Color.CYAN);
          g.fillRect((int)(node.x[1] * zoomFactor - 1),(int)(node.y[1] * zoomFactor - 1),3,3);
          g.draw(new Line2D.Double(node.x[1] * zoomFactor,node.y[1] * zoomFactor,node.x[0] * zoomFactor,node.y[0] * zoomFactor));
          g.fillRect((int)(node.x[2] * zoomFactor - 1),(int)(node.y[2] * zoomFactor - 1),3,3);
          g.draw(new Line2D.Double(node.x[2] * zoomFactor,node.y[2] * zoomFactor,node.x[0] * zoomFactor,node.y[0] * zoomFactor));
        }
 else {
          if ((node.mask & BezierPath.C1_MASK) == BezierPath.C1_MASK) {
            g.setColor(Color.WHITE);
            g.fillRect((int)(node.x[1] * zoomFactor - 2),(int)(node.y[1] * zoomFactor - 2),5,5);
            g.setColor(Color.MAGENTA);
            g.fillRect((int)(node.x[1] * zoomFactor - 1),(int)(node.y[1] * zoomFactor - 1),3,3);
            g.draw(new Line2D.Double(node.x[1] * zoomFactor,node.y[1] * zoomFactor,node.x[0] * zoomFactor,node.y[0] * zoomFactor));
          }
          if ((node.mask & BezierPath.C2_MASK) == BezierPath.C2_MASK) {
            g.setColor(Color.WHITE);
            g.fillRect((int)(node.x[2] * zoomFactor - 2),(int)(node.y[2] * zoomFactor - 2),5,5);
            g.setColor(Color.MAGENTA);
            g.fillRect((int)(node.x[2] * zoomFactor - 1),(int)(node.y[2] * zoomFactor - 1),3,3);
            g.draw(new Line2D.Double(node.x[2] * zoomFactor,node.y[2] * zoomFactor,node.x[0] * zoomFactor,node.y[0] * zoomFactor));
          }
        }
      }
      for (      BezierPath.Node node : ex.bezier) {
        g.setColor(Color.WHITE);
        g.fillRect((int)(node.x[0] * zoomFactor - 2),(int)(node.y[0] * zoomFactor - 2),5,5);
      }
      for (      BezierPath.Node node : ex.bezier) {
        g.setColor((node.keepColinear && node.mask != BezierPath.C0_MASK) ? Color.BLUE : Color.RED);
        g.fillRect((int)(node.x[0] * zoomFactor - 1),(int)(node.y[0] * zoomFactor - 1),3,3);
      }
    }
  }
  long end=System.currentTimeMillis();
  g.setColor(Color.BLACK);
  g.drawString((end - start) + " ms",5,g.getFontMetrics().getHeight());
}
