{
  labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");
  ResourceBundleUtil drawLabels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");
  try {
    prefs=Preferences.userNodeForPackage(getClass());
  }
 catch (  SecurityException e) {
  }
  initComponents();
  toolsPane.setLayout(new ToolBarLayout());
  toolsPane.setBackground(new Color(0xf0f0f0));
  toolsPane.setOpaque(true);
  undoManager=new UndoRedoManager();
  setEditor(new DefaultDrawingEditor());
  editor.setHandleAttribute(HandleAttributeKeys.HANDLE_SIZE,new Integer(7));
  DefaultDrawing drawing=new DefaultDrawing();
  view.setDrawing(drawing);
  drawing.addUndoableEditListener(undoManager);
  ArrayList<JToolBar> sortme=new ArrayList<JToolBar>();
  for (  Component c : toolsPane.getComponents()) {
    if (c instanceof JToolBar) {
      sortme.add((JToolBar)c);
    }
  }
  Collections.sort(sortme,new Comparator<JToolBar>(){
    public int compare(    JToolBar tb1,    JToolBar tb2){
      int i1=prefs.getInt("toolBarIndex." + tb1.getName(),0);
      int i2=prefs.getInt("toolBarIndex." + tb2.getName(),0);
      return i1 - i2;
    }
  }
);
  toolsPane.removeAll();
  for (  JToolBar tb : sortme) {
    toolsPane.add(tb);
  }
  toolsPane.addContainerListener(new ContainerListener(){
    public void componentAdded(    ContainerEvent e){
      int i=0;
      for (      Component c : toolsPane.getComponents()) {
        if (c instanceof JToolBar) {
          JToolBar tb=(JToolBar)c;
          prefs.putInt("toolBarIndex." + tb.getName(),i);
          i++;
        }
      }
    }
    public void componentRemoved(    ContainerEvent e){
    }
  }
);
}
