{
  ResourceBundleUtil labels=ResourceBundleUtil.getLAFBundle("org.jhotdraw.application.Labels");
  JMenuBar mb=new JMenuBar();
  JMenu m;
  JMenuItem mi;
  m=new JMenu();
  final JMenu windowMenu=m;
  labels.configureMenu(m,"window");
  mi=m.add(getAction(MinimizeAction.ID));
  mi.setIcon(null);
  mi=m.add(getAction(MaximizeAction.ID));
  mi.setIcon(null);
  m.addSeparator();
  for (  DocumentView pr : getViews()) {
    if (pr.getAction(FocusAction.ID) != null) {
      windowMenu.add(pr.getAction(FocusAction.ID));
    }
  }
  if (paletteActions.size() > 0) {
    m.addSeparator();
    for (    Action a : paletteActions) {
      JCheckBoxMenuItem cbmi=new JCheckBoxMenuItem(a);
      Actions.configureJCheckBoxMenuItem(cbmi,a);
      cbmi.setIcon(null);
      m.add(cbmi);
    }
  }
  addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      String name=evt.getPropertyName();
      if (name == PROP_VIEW_COUNT || name == "paletteCount") {
        if (p == null || getViews().contains(p)) {
          JMenu m=windowMenu;
          m.removeAll();
          m.add(getAction(MinimizeAction.ID));
          m.add(getAction(MaximizeAction.ID));
          m.addSeparator();
          for (Iterator i=getViews().iterator(); i.hasNext(); ) {
            DocumentView pr=(DocumentView)i.next();
            if (pr.getAction(FocusAction.ID) != null) {
              m.add(pr.getAction(FocusAction.ID));
            }
          }
          if (paletteActions.size() > 0) {
            m.addSeparator();
            for (            Action a : paletteActions) {
              JCheckBoxMenuItem cbmi=new JCheckBoxMenuItem(a);
              Actions.configureJCheckBoxMenuItem(cbmi,a);
              cbmi.setIcon(null);
              m.add(cbmi);
            }
          }
        }
 else {
          removePropertyChangeListener(this);
        }
      }
    }
  }
);
  return m;
}
