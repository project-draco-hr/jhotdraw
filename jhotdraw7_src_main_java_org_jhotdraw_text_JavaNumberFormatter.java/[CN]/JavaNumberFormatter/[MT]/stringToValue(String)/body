{
  if ((text == null || text.length() == 0) && getAllowsNullValue()) {
    return null;
  }
  Class valueClass=getValueClass();
  Object value;
  if (valueClass != null) {
    try {
      if (valueClass == Integer.class) {
        int v=Integer.parseInt(text);
        v=(int)(v / scaleFactor);
        value=new Integer(v);
      }
 else       if (valueClass == Long.class) {
        long v=Long.parseLong(text);
        v=(long)(v / scaleFactor);
        value=new Long(v);
      }
 else       if (valueClass == Float.class) {
        float v=Float.parseFloat(text);
        v=(float)(v / scaleFactor);
        value=new Float(v);
      }
 else       if (valueClass == Double.class) {
        double v=Double.parseDouble(text);
        v=(double)(v / scaleFactor);
        value=new Double(v);
      }
 else       if (valueClass == Byte.class) {
        byte v=Byte.parseByte(text);
        v=(byte)(v / scaleFactor);
        value=new Byte(v);
      }
 else       if (valueClass == Short.class) {
        short v=Short.parseShort(text);
        v=(short)(v / scaleFactor);
        value=new Short(v);
      }
 else {
        throw new ParseException("Unsupported value class " + valueClass,0);
      }
    }
 catch (    NumberFormatException e) {
      throw new ParseException(e.getMessage(),0);
    }
  }
 else {
    throw new ParseException("Unsupported value class " + valueClass,0);
  }
  try {
    if (!isValidValue(value,true)) {
      throw new ParseException("Value not within min/max range",0);
    }
  }
 catch (  ClassCastException cce) {
    throw new ParseException("Class cast exception comparing values: " + cce,0);
  }
  return value;
}
