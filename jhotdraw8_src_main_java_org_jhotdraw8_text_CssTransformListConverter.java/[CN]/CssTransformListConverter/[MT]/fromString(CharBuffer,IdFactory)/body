{
  List<Transform> txs=new ArrayList<>();
  CssTokenizerInterface tt=new CssTokenizer(new StringReader(in.toString()));
  tt.setSkipWhitespace(true);
  if (tt.nextToken() == CssTokenizer.TT_IDENT && tt.currentStringValue().equals("none")) {
    in.position(in.limit());
    return txs;
  }
 else {
    tt.pushBack();
  }
  while (tt.nextToken() != CssTokenizer.TT_EOF) {
    tt.pushBack();
    if (tt.nextToken() != CssTokenizer.TT_FUNCTION) {
      throw new ParseException("function expected: \"" + tt.currentStringValue() + "\"",tt.getPosition());
    }
    String func=tt.currentStringValue();
    int funcPos=tt.getPosition();
    List<Double> m=new ArrayList<>();
    if (tt.nextToken() != CssTokenizer.TT_NUMBER) {
      throw new ParseException("coefficient nb 1 expected: \"" + tt.currentStringValue() + "\"",tt.getPosition());
    }
    m.add(tt.currentNumericValue().doubleValue());
    while (tt.nextToken() != ')' && tt.currentToken() != CssTokenizer.TT_EOF) {
      if (tt.nextToken() != ',') {
        tt.pushBack();
      }
      if (tt.nextToken() != CssTokenizer.TT_NUMBER) {
        throw new ParseException("coefficient nb " + m.size() + " expected: \""+ tt.currentStringValue()+ "\"",tt.getPosition());
      }
      m.add(tt.currentNumericValue().doubleValue());
    }
    if (tt.currentToken() != ')') {
      throw new ParseException("')' expected: \"" + tt.currentStringValue() + "\"",tt.getPosition());
    }
switch (func) {
case "affine":
{
switch (m.size()) {
case 6:
          txs.add(new Affine(m.get(0),m.get(1),m.get(2),m.get(3),m.get(4),m.get(5)));
        break;
case 12:
      txs.add(new Affine(m.get(0),m.get(1),m.get(2),m.get(3),m.get(4),m.get(5),m.get(5),m.get(6),m.get(7),m.get(8),m.get(9),m.get(10)));
    break;
default :
  throw new ParseException("6 or 12 coefficients expected, but found " + m.size(),tt.getPosition());
}
break;
}
case "skew":
case "shear":
{
switch (m.size()) {
case 2:
txs.add(Transform.shear(m.get(0),m.get(1)));
break;
case 4:
txs.add(Transform.shear(m.get(0),m.get(1),m.get(2),m.get(3)));
break;
default :
throw new ParseException("2 or 4 coefficients expected, but found " + m.size(),tt.getPosition());
}
break;
}
case "translate":
{
switch (m.size()) {
case 1:
txs.add(Transform.translate(m.get(0),0));
break;
case 2:
txs.add(Transform.translate(m.get(0),m.get(1)));
break;
case 3:
txs.add(new Translate(m.get(0),m.get(1),m.get(2)));
break;
default :
throw new ParseException("1, 2 or 3 coefficients expected, but found " + m.size(),tt.getPosition());
}
break;
}
case "scale":
{
switch (m.size()) {
case 1:
txs.add(Transform.scale(m.get(0),m.get(0)));
break;
case 2:
txs.add(Transform.scale(m.get(0),m.get(1)));
break;
case 3:
txs.add(new Scale(m.get(0),m.get(0),m.get(1),m.get(2)));
break;
case 4:
txs.add(Transform.scale(m.get(0),m.get(1),m.get(2),m.get(3)));
break;
case 6:
txs.add(new Scale(m.get(0),m.get(1),m.get(2),m.get(3),m.get(4),m.get(5)));
break;
default :
throw new ParseException("1, 2, 3, 4, or 6 coefficients expected, but found " + m.size(),tt.getPosition());
}
break;
}
case "rotate":
{
switch (m.size()) {
case 1:
txs.add(Transform.rotate(m.get(0),0,0));
break;
case 3:
txs.add(Transform.rotate(m.get(0),m.get(1),m.get(2)));
break;
case 4:
txs.add(new Rotate(m.get(0),m.get(1),m.get(2),m.get(3)));
break;
case 6:
txs.add(new Rotate(m.get(0),m.get(1),m.get(2),0,new Point3D(m.get(3),m.get(4),m.get(5))));
break;
case 7:
txs.add(new Rotate(m.get(0),m.get(1),m.get(2),m.get(3),new Point3D(m.get(4),m.get(5),m.get(6))));
break;
default :
throw new ParseException("1, 3, 4, 6 or 7 coefficients expected, but found " + m.size(),tt.getPosition());
}
break;
}
default :
throw new ParseException("unsupported function: \"" + func + "\"",funcPos);
}
}
in.position(in.limit());
return txs;
}
