{
  try {
    IXMLElement elem;
    IXMLParser parser=XMLParserFactory.createDefaultXMLParser();
    IXMLReader reader=new StdXMLReader(in);
    parser.setReader(reader);
    elem=(IXMLElement)parser.parse();
    Stack<Iterator> stack=new Stack<Iterator>();
    LinkedList<IXMLElement> ll=new LinkedList<IXMLElement>();
    ll.add(elem);
    stack.push(ll.iterator());
    while (!stack.empty() && stack.peek().hasNext()) {
      Iterator iter=stack.peek();
      IXMLElement node=(IXMLElement)iter.next();
      Iterator children=node.iterateChildren();
      if (!iter.hasNext()) {
        stack.pop();
      }
      if (children.hasNext()) {
        stack.push(children);
      }
      if (node.getName() != null && node.getName().equals("svg") && (node.getNamespace() == null || node.getNamespace().equals(SVG_NAMESPACE))) {
        elem=node;
        break;
      }
    }
    if (elem.getName() == null || !elem.getName().equals("svg") || (elem.getNamespace() != null && !elem.getNamespace().equals(SVG_NAMESPACE))) {
      throw new IOException("'svg' element expected: " + elem.getName() + " line: "+ elem.getLineNr());
    }
    initStorageContext();
    flattenStyles(elem);
    AffineTransform svgTransform=new AffineTransform();
    boolean is100PercentWidth=readAttribute(elem,"width","100%").equals("100%");
    boolean is100PercentHeight=readAttribute(elem,"height","100%").equals("100%");
    double svgWidth=toWidth(elem,readAttribute(elem,"width","100%"));
    double svgHeight=toHeight(elem,readAttribute(elem,"height","100%"));
    String[] viewBoxValues=toWhiteSpaceOrCommaSeparatedArray(elem,readAttribute(elem,"viewBox","none"));
    if (viewBoxValues.length == 4) {
      double x=toNumber(elem,viewBoxValues[0]);
      double y=toNumber(elem,viewBoxValues[1]);
      double w=toNumber(elem,viewBoxValues[2]);
      double h=toNumber(elem,viewBoxValues[3]);
      widthPercentFactor=w / 100d;
      heightPercentFactor=h / 100d;
      svgTransform.translate(-x,-y);
      widthFactor=(is100PercentWidth) ? 1 : svgWidth / w;
      heightFactor=(is100PercentHeight) ? 1 : svgHeight / h;
      numberFactor=Math.min(widthFactor,heightFactor);
    }
    for (int i=0; i < elem.getChildrenCount(); i++) {
      IXMLElement child=elem.getChildAtIndex(i);
      Figure childFigure=readElement(child);
      if (childFigure != null) {
        childFigure.basicTransform(svgTransform);
        drawing.add(childFigure);
        figures.add(childFigure);
      }
    }
  }
 catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    IOException error=new IOException(e.getMessage());
    error.initCause(e);
    throw error;
  }
}
