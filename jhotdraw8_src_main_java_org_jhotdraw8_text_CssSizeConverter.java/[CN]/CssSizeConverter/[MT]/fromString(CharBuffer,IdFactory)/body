{
  if (idFactory == null) {
    idFactory=defaultFactory;
  }
  CssTokenizerInterface tt=new CssTokenizer(buf);
  tt.skipWhitespace();
  if (tt.nextToken() == CssTokenizer.TT_IDENT && "none".equals(tt.currentStringValue())) {
    tt.skipWhitespace();
    return null;
  }
 else {
    tt.pushBack();
  }
  Double value=null;
switch (tt.nextToken()) {
case CssTokenizerInterface.TT_DIMENSION:
    value=tt.currentNumericValue().doubleValue();
  value=idFactory.convert(value,tt.currentUnitValue(),"px");
break;
case CssTokenizerInterface.TT_PERCENTAGE:
value=tt.currentNumericValue().doubleValue();
value=idFactory.convert(value,"%","px");
break;
case CssTokenizerInterface.TT_NUMBER:
value=tt.currentNumericValue().doubleValue();
break;
case CssTokenizerInterface.TT_IDENT:
{
switch (tt.currentStringValue()) {
case "INF":
value=Double.POSITIVE_INFINITY;
break;
case "-INF":
value=Double.NEGATIVE_INFINITY;
break;
case "NaN":
value=Double.NaN;
break;
default :
throw new ParseException("number expected:" + tt.currentStringValue(),tt.getPosition());
}
break;
}
default :
throw new ParseException("number expected",tt.getPosition());
}
tt.skipWhitespace();
return value;
}
