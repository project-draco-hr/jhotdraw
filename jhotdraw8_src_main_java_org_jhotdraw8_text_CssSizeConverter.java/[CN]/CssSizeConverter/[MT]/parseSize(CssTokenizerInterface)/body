{
  tt.skipWhitespace();
  if (nullable && tt.nextToken() == CssTokenizer.TT_IDENT && "none".equals(tt.currentStringValue())) {
    return null;
  }
 else {
    tt.pushBack();
  }
  Number value=null;
  String units;
switch (tt.nextToken()) {
case CssTokenizerInterface.TT_DIMENSION:
    value=tt.currentNumericValue();
  units=tt.currentStringValue();
break;
case CssTokenizerInterface.TT_PERCENTAGE:
value=tt.currentNumericValue();
units="%";
break;
case CssTokenizerInterface.TT_NUMBER:
value=tt.currentNumericValue();
units=null;
break;
case CssTokenizerInterface.TT_IDENT:
{
switch (tt.currentStringValue()) {
case "INF":
value=Double.POSITIVE_INFINITY;
break;
case "-INF":
value=Double.NEGATIVE_INFINITY;
break;
case "NaN":
value=Double.NaN;
break;
default :
throw new ParseException("number expected:" + tt.currentStringValue(),tt.getStartPosition());
}
units=null;
break;
}
default :
throw new ParseException("number expected",tt.getStartPosition());
}
return new CssSize(value.doubleValue(),units);
}
