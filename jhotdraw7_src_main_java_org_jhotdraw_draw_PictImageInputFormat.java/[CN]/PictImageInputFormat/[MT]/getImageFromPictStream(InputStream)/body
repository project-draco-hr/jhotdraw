{
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    byte[] header=new byte[512];
    byte[] buf=new byte[4096];
    int retval=0, size=0;
    baos.write(header,0,512);
    while ((retval=is.read(buf,0,4096)) > 0) {
      baos.write(buf,0,retval);
    }
    baos.close();
    size=baos.size();
    if (size <= 0) {
      return null;
    }
    byte[] imgBytes=baos.toByteArray();
    Class c;
    try {
      c=Class.forName("quicktime.QTSession");
    }
 catch (    Throwable e) {
      IOException error=new IOException("QuickTime for Java is not available.");
      error.initCause(e);
      throw error;
    }
    Method m=c.getMethod("isInitialized");
    Boolean b=(Boolean)m.invoke(null,(Object[])null);
    if (b.booleanValue() == false) {
      m=c.getMethod("open");
      m.invoke(null);
    }
    c=Class.forName("quicktime.util.QTHandle");
    Constructor con=c.getConstructor(new Class[]{imgBytes.getClass()});
    Object handle=con.newInstance(new Object[]{imgBytes});
    String s=new String("PICT");
    c=Class.forName("quicktime.util.QTUtils");
    m=c.getMethod("toOSType",new Class[]{s.getClass()});
    Integer type=(Integer)m.invoke(null,new Object[]{s});
    c=Class.forName("quicktime.std.image.GraphicsImporter");
    con=c.getConstructor(new Class[]{type.TYPE});
    Object importer=con.newInstance(new Object[]{type});
    m=c.getMethod("setDataHandle",new Class[]{Class.forName("quicktime.util." + "QTHandleRef")});
    m.invoke(importer,new Object[]{handle});
    m=c.getMethod("getNaturalBounds");
    Object rect=m.invoke(importer);
    c=Class.forName("quicktime.app.view.GraphicsImporterDrawer");
    con=c.getConstructor(new Class[]{importer.getClass()});
    Object iDrawer=con.newInstance(new Object[]{importer});
    m=rect.getClass().getMethod("getWidth");
    Integer width=(Integer)m.invoke(rect);
    m=rect.getClass().getMethod("getHeight");
    Integer height=(Integer)m.invoke(rect);
    Dimension d=new Dimension(width.intValue(),height.intValue());
    c=Class.forName("quicktime.app.view.QTImageProducer");
    con=c.getConstructor(new Class[]{iDrawer.getClass(),d.getClass()});
    Object producer=con.newInstance(new Object[]{iDrawer,d});
    if (producer instanceof ImageProducer) {
      return (Toolkit.getDefaultToolkit().createImage((ImageProducer)producer));
    }
  }
 catch (  Exception e) {
    IOException error=new IOException("Couldn't read PICT image");
    error.initCause(e);
    throw error;
  }
  IOException error=new IOException("Couldn't read PICT image");
  throw error;
}
