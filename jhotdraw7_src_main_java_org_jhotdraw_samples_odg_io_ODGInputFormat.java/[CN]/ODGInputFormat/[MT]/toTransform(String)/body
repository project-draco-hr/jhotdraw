{
  AffineTransform t=new AffineTransform();
  AffineTransform t2=new AffineTransform();
  if (str != null) {
    StreamPosTokenizer tt=new StreamPosTokenizer(new StringReader(str));
    tt.resetSyntax();
    tt.wordChars('a','z');
    tt.wordChars('A','Z');
    tt.wordChars(128 + 32,255);
    tt.whitespaceChars(0,' ');
    tt.whitespaceChars(',',',');
    tt.parseNumbers();
    tt.parseExponents();
    while (tt.nextToken() != StreamPosTokenizer.TT_EOF) {
      if (tt.ttype != StreamPosTokenizer.TT_WORD) {
        throw new IOException("Illegal transform " + str);
      }
      String type=tt.sval;
      if (tt.nextToken() != '(') {
        throw new IOException("'(' not found in transform " + str);
      }
      if ("matrix".equals(type)) {
        double[] m=new double[6];
        for (int i=0; i < 6; i++) {
          if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
            throw new IOException("Matrix value " + i + " not found in transform "+ str+ " token:"+ tt.ttype+ " "+ tt.sval);
          }
          m[i]=tt.nval;
        }
        t.preConcatenate(new AffineTransform(m));
      }
 else       if ("translate".equals(type)) {
        double tx, ty;
        if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
          throw new IOException("X-translation value not found in transform " + str);
        }
        tx=tt.nval;
        if (tt.nextToken() == StreamPosTokenizer.TT_WORD) {
          tx*=toUnitFactor(tt.sval);
        }
 else {
          tt.pushBack();
        }
        if (tt.nextToken() == StreamPosTokenizer.TT_NUMBER) {
          ty=tt.nval;
          if (tt.nextToken() == StreamPosTokenizer.TT_WORD) {
            ty*=toUnitFactor(tt.sval);
          }
 else {
            tt.pushBack();
          }
        }
 else {
          tt.pushBack();
          ty=0;
        }
        t2.setToIdentity();
        t2.translate(tx,ty);
        t.preConcatenate(t2);
      }
 else       if ("scale".equals(type)) {
        double sx, sy;
        if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
          throw new IOException("X-scale value not found in transform " + str);
        }
        sx=tt.nval;
        if (tt.nextToken() == StreamPosTokenizer.TT_NUMBER) {
          sy=tt.nval;
        }
 else {
          tt.pushBack();
          sy=sx;
        }
        t2.setToIdentity();
        t2.scale(sx,sy);
        t.preConcatenate(t2);
      }
 else       if ("rotate".equals(type)) {
        double angle, cx, cy;
        if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
          throw new IOException("Angle value not found in transform " + str);
        }
        angle=tt.nval;
        t2.setToIdentity();
        t2.rotate(-angle);
        t.preConcatenate(t2);
      }
 else       if ("skewX".equals(type)) {
        double angle;
        if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
          throw new IOException("Skew angle not found in transform " + str);
        }
        angle=tt.nval;
        t.preConcatenate(new AffineTransform(1,0,Math.tan(angle * Math.PI / 180),1,0,0));
      }
 else       if ("skewY".equals(type)) {
        double angle;
        if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {
          throw new IOException("Skew angle not found in transform " + str);
        }
        angle=tt.nval;
        t.preConcatenate(new AffineTransform(1,Math.tan(angle * Math.PI / 180),0,1,0,0));
      }
 else {
        throw new IOException("Unknown transform " + type + " in "+ str);
      }
      if (tt.nextToken() != ')') {
        throw new IOException("')' not found in transform " + str);
      }
    }
  }
  return t;
}
