{
  if (!valid) {
    isValidating=true;
    DirtyMask dmTransformLayout=DirtyMask.of(DirtyBits.TRANSFORM,DirtyBits.LAYOUT);
    for (    Map.Entry<Figure,DirtyMask> entry : new ArrayList<>(dirties.entrySet())) {
      Figure f=entry.getKey();
      DirtyMask dm=entry.getValue();
      if (dm.intersects(dmTransformLayout)) {
        for (        Figure a : f.ancestorIterable()) {
          if (a instanceof TransformableFigure) {
            markDirty(a,DirtyBits.NODE,DirtyBits.TRANSFORM);
          }
 else {
          }
        }
      }
    }
    DirtyMask dmTransform=DirtyMask.of(DirtyBits.TRANSFORM);
    DirtyMask dmTransformNotify=DirtyMask.of(DirtyBits.TRANSFORM_NOTIFY);
    for (    Map.Entry<Figure,DirtyMask> entry : new ArrayList<>(dirties.entrySet())) {
      Figure f=entry.getKey();
      DirtyMask dm=entry.getValue();
      if (dm.intersects(dmTransform) && !dm.intersects(dmTransformNotify)) {
        for (        Figure a : f.preorderIterable()) {
          markDirty(a,DirtyBits.LAYOUT_OBSERVERS,DirtyBits.TRANSFORM_NOTIFY);
        }
      }
    }
    for (    Map.Entry<Figure,DirtyMask> entry : new ArrayList<>(dirties.entrySet())) {
      Figure f=entry.getKey();
      DirtyMask dm=entry.getValue();
      if (dm.intersects(dmTransformNotify)) {
        f.transformNotify();
      }
    }
    DirtyMask dmLayout=DirtyMask.of(DirtyBits.LAYOUT);
    List<Figure> todo=new ArrayList<>();
    for (    Map.Entry<Figure,DirtyMask> entry : new ArrayList<>(dirties.entrySet())) {
      Figure f=entry.getKey();
      DirtyMask dm=entry.getValue();
      if (dm.intersects(dmLayout)) {
        for (        Figure subtree : f.preorderIterable()) {
          for (          Figure d : subtree.getLayoutObservers()) {
            todo.add(d);
          }
        }
        for (        Figure a : f.ancestorIterable()) {
          if (a instanceof TransformableFigure) {
            markDirty(a,DirtyBits.NODE);
          }
        }
      }
      if (dm.intersects(DirtyBits.LAYOUT_OBSERVERS)) {
        todo.add(f);
      }
    }
    LinkedHashSet<Figure> transitive=new LinkedHashSet<>(todo);
    transitivelyCollectDependentFigures(todo,transitive);
    collectLayoutableAncestors(new ArrayList<>(transitive),transitive);
    for (    Figure f : transitive) {
      this.layout(f);
      markDirty(f,DirtyBits.NODE);
    }
    DirtyMask dmStyle=DirtyMask.of(DirtyBits.STYLE);
    for (    Map.Entry<Figure,DirtyMask> entry : new ArrayList<>(dirties.entrySet())) {
      Figure f=entry.getKey();
      DirtyMask dm=entry.getValue();
      if (dm.intersects(dmStyle)) {
        f.stylesheetNotify();
        for (        Figure subf : f.preorderIterable()) {
          markDirty(subf,DirtyBits.NODE);
        }
      }
    }
    DirtyMask dmNode=DirtyMask.of(DirtyBits.NODE);
    for (    Map.Entry<Figure,DirtyMask> entry : dirties.entrySet()) {
      Figure f=entry.getKey();
      DirtyMask dm=entry.getValue();
      if (dm.intersects(dmNode)) {
        fireNodeInvalidated(f);
      }
    }
    dirties.clear();
    isValidating=false;
    valid=true;
  }
}
