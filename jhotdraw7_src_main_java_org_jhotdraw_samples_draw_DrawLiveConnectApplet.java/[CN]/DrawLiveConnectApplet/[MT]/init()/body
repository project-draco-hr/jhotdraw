{
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Throwable e) {
  }
  Container c=getContentPane();
  c.setLayout(new BoxLayout(c,BoxLayout.Y_AXIS));
  String[] lines=getAppletInfo().split("\n");
  for (int i=0; i < lines.length; i++) {
    c.add(new JLabel(lines[i]));
  }
  new Worker<Drawing>(){
    protected Drawing construct() throws IOException {
      Drawing result;
      if (getParameter("data") != null && getParameter("data").length() > 0) {
        NanoXMLDOMInput domi=new NanoXMLDOMInput(new DrawFigureFactory(),new StringReader(getParameter("data")));
        result=(Drawing)domi.readObject(0);
      }
 else       if (getParameter("datafile") != null) {
        InputStream in=null;
        try {
          URL url=new URL(getDocumentBase(),getParameter("datafile"));
          in=url.openConnection().getInputStream();
          NanoXMLDOMInput domi=new NanoXMLDOMInput(new DrawFigureFactory(),in);
          result=(Drawing)domi.readObject(0);
        }
  finally {
          if (in != null) {
            in.close();
          }
        }
      }
 else {
        result=null;
      }
      return result;
    }
    protected void done(    Drawing result){
      Container c=getContentPane();
      c.setLayout(new BorderLayout());
      c.removeAll();
      initComponents();
      if (result != null) {
        setDrawing(result);
      }
    }
    @Override protected void failed(    Throwable result){
      Container c=getContentPane();
      c.setLayout(new BorderLayout());
      c.removeAll();
      initComponents();
      getDrawing().add(new TextFigure(result.toString()));
      result.printStackTrace();
    }
    protected void finished(){
      Container c=getContentPane();
      boolean isLiveConnect;
      try {
        Class.forName("netscape.javascript.JSObject");
        isLiveConnect=true;
      }
 catch (      Throwable t) {
        isLiveConnect=false;
      }
      loadButton.setEnabled(isLiveConnect && getParameter("dataread") != null);
      saveButton.setEnabled(isLiveConnect && getParameter("datawrite") != null);
      if (isLiveConnect) {
        String methodName=getParameter("dataread");
        if (methodName.indexOf('(') > 0) {
          methodName=methodName.substring(0,methodName.indexOf('(') - 1);
        }
        JSObject win=JSObject.getWindow(DrawLiveConnectApplet.this);
        Object data=win.call(methodName,new Object[0]);
        if (data instanceof String) {
          setData((String)data);
        }
      }
      c.validate();
    }
  }
.start();
}
