{
  this.locale=Locale.getDefault(Locale.Category.FORMAT);
  this.factory=new FormatFactory(){
    @Override public Format apply(    String type,    String style){
      if (type == null) {
        return new DefaultFormat();
      }
switch (type) {
case "number":
        if (style == null) {
          return NumberFormat.getInstance(locale);
        }
switch (style) {
case "integer":
        return NumberFormat.getIntegerInstance(locale);
case "currency":
      return NumberFormat.getCurrencyInstance(locale);
case "percent":
    return NumberFormat.getPercentInstance(locale);
default :
  return new DecimalFormat(style,DecimalFormatSymbols.getInstance(locale));
}
case "date":
if (style == null) {
return DateFormat.getDateInstance(DateFormat.DEFAULT,locale);
}
switch (style) {
case "short":
return DateFormat.getDateInstance(DateFormat.SHORT,locale);
case "medium":
return DateFormat.getDateInstance(DateFormat.MEDIUM,locale);
case "long":
return DateFormat.getDateInstance(DateFormat.LONG,locale);
case "full":
return DateFormat.getDateInstance(DateFormat.FULL,locale);
default :
return new SimpleDateFormat(style,locale);
}
case "time":
if (style == null) {
return DateFormat.getTimeInstance(DateFormat.DEFAULT,locale);
}
switch (style) {
case "short":
return DateFormat.getTimeInstance(DateFormat.SHORT,locale);
case "medium":
return DateFormat.getTimeInstance(DateFormat.MEDIUM,locale);
case "long":
return DateFormat.getTimeInstance(DateFormat.LONG,locale);
case "full":
return DateFormat.getTimeInstance(DateFormat.FULL,locale);
default :
return new SimpleDateFormat(style,locale);
}
case "choice":
return new ChoiceFormat(style);
default :
throw new IllegalArgumentException("type=" + type);
}
}
}
;
applyPattern(pattern);
}
