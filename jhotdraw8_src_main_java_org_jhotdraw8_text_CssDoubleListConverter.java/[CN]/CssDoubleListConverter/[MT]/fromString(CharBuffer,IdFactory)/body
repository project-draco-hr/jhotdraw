{
  ArrayList<Double> l=new ArrayList<>();
  CssTokenizerInterface tt=new CssTokenizer(buf);
  tt.setSkipWhitespaces(true);
  if (tt.nextToken() == CssTokenizer.TT_IDENT && "none".equals(tt.currentStringValue())) {
    tt.skipWhitespace();
    return new ImmutableObservableList<>(l);
  }
 else {
    tt.pushBack();
  }
  Loop:   while (true) {
switch (tt.nextToken()) {
case CssTokenizerInterface.TT_DIMENSION:
{
        double value=tt.currentNumericValue().doubleValue();
        l.add(unitConverter.convert(value,tt.currentStringValue(),"px"));
        break;
      }
case CssTokenizerInterface.TT_PERCENTAGE:
{
      double value=tt.currentNumericValue().doubleValue() / 100.0;
      l.add(unitConverter.convert(value,"%","px"));
      break;
    }
case CssTokenizerInterface.TT_NUMBER:
{
    double value=tt.currentNumericValue().doubleValue();
    l.add(value);
    break;
  }
case CssTokenizerInterface.TT_IDENT:
{
  double value;
switch (tt.currentStringValue()) {
case "INF":
    value=Double.POSITIVE_INFINITY;
  break;
case "-INF":
value=Double.NEGATIVE_INFINITY;
break;
case "NaN":
value=Double.NaN;
break;
default :
throw new ParseException("number expected:" + tt.currentStringValue(),tt.getStartPosition());
}
l.add(value);
break;
}
default :
break Loop;
}
}
tt.skipWhitespace();
return new ImmutableObservableList<>(l);
}
