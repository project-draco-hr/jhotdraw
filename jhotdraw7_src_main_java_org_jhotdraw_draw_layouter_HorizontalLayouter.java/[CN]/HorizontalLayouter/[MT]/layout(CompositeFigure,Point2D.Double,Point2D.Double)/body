{
  Insets2D.Double layoutInsets=compositeFigure.get(LAYOUT_INSETS);
  Alignment compositeAlignment=compositeFigure.get(COMPOSITE_ALIGNMENT);
  Rectangle2D.Double layoutBounds=calculateLayout(compositeFigure,anchor,lead);
  double x=layoutBounds.x + layoutInsets.left;
  for (  Figure child : compositeFigure.getChildren()) {
    if (child.isVisible()) {
      Insets2D.Double insets=getInsets(child);
      double width=child.getPreferredSize().width;
      double height=child.getPreferredSize().height;
switch (compositeAlignment) {
case LEADING:
        child.setBounds(new Point2D.Double(x + insets.left,layoutBounds.y + layoutInsets.top + insets.top),new Point2D.Double(x + insets.left + width,layoutBounds.y + layoutInsets.top + insets.top+ height));
      break;
case TRAILING:
    child.setBounds(new Point2D.Double(x + insets.left,layoutBounds.y + layoutBounds.height - layoutInsets.bottom - insets.bottom - height),new Point2D.Double(x + insets.left + width,layoutBounds.y + layoutBounds.height - layoutInsets.bottom - insets.bottom));
  break;
case CENTER:
child.setBounds(new Point2D.Double(x + insets.left,layoutBounds.y + layoutInsets.top + (layoutBounds.height - height) / 2d),new Point2D.Double(x + insets.left + width,layoutBounds.y + layoutInsets.top + (layoutBounds.height + height) / 2d));
break;
case BLOCK:
default :
child.setBounds(new Point2D.Double(x + insets.left,layoutBounds.y + layoutInsets.top + insets.top),new Point2D.Double(x + insets.left + width,layoutBounds.y + layoutBounds.height - layoutInsets.bottom - insets.bottom));
break;
}
x+=width + insets.left + insets.right;
}
}
return layoutBounds;
}
