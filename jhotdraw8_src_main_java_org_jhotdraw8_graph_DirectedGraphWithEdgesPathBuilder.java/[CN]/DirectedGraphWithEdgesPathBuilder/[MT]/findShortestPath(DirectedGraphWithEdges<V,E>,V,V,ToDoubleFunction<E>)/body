{
  NodeWithCost<V,E> node=new NodeWithCost<>(start,0.0,null,null);
  PriorityQueue<NodeWithCost<V,E>> frontier=new PriorityQueue<>();
  frontier.add(node);
  Set<V> explored=new HashSet<>(graph.getVertexCount());
  Map<NodeWithCost<V,E>,NodeWithCost<V,E>> frontierMap=new LinkedHashMap<>(graph.getVertexCount());
  while (true) {
    if (frontier.isEmpty()) {
      return null;
    }
    node=frontier.poll();
    frontierMap.remove(node);
    if (node.getVertex() == goal) {
      break;
    }
    explored.add(node.getVertex());
    for (int i=0, count=graph.getNextCount(node.vertex); i < count; i++) {
      V next=graph.getNext(node.vertex,i);
      final E edge=graph.getEdge(node.vertex,i);
      double cost=node.cost + costf.applyAsDouble(edge);
      NodeWithCost<V,E> nwc=new NodeWithCost<>(next,cost,node,edge);
      boolean isInFrontier=frontierMap.containsKey(nwc);
      if (!explored.contains(next) && !isInFrontier) {
        frontier.add(nwc);
        frontierMap.put(nwc,nwc);
      }
 else       if (isInFrontier) {
        NodeWithCost<V,E> nwcInFrontier=frontierMap.put(nwc,nwc);
        if (nwcInFrontier.cost > nwc.cost) {
          frontier.remove(nwcInFrontier);
          frontier.add(nwc);
        }
      }
    }
  }
  return node;
}
