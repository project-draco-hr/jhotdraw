{
  NodeWithCost<V,E> node=new NodeWithCost<>(start,0.0,null,null);
  frontier.add(node);
  while (true) {
    if (frontier.isEmpty()) {
      return null;
    }
    node=frontier.poll();
    final V vertex=node.vertex;
    frontierMap.remove(vertex);
    if (vertex == goal) {
      break;
    }
    explored.add(node.getVertex());
    for (int i=0, count=graph.getNextCount(vertex); i < count; i++) {
      V next=graph.getNext(vertex,i);
      final E edge=graph.getNextEdge(vertex,i);
      double cost=node.cost + costf.applyAsDouble(edge);
      boolean isInFrontier=frontierMap.containsKey(next);
      if (!explored.contains(next) && !isInFrontier) {
        NodeWithCost<V,E> nwc=new NodeWithCost<>(next,cost,node,edge);
        frontier.add(nwc);
        frontierMap.put(next,nwc);
      }
 else       if (isInFrontier) {
        NodeWithCost<V,E> nwcInFrontier=frontierMap.get(next);
        if (nwcInFrontier.cost > cost) {
          frontier.remove(nwcInFrontier);
          nwcInFrontier.cost=cost;
          nwcInFrontier.parent=node;
          nwcInFrontier.edge=edge;
          frontier.add(nwcInFrontier);
        }
      }
    }
  }
  return node;
}
