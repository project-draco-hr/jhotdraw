{
  HarmonicColorModel m=harmonicWheel.getHarmonicColorModel();
  m.removeAllRules();
  for (int i=1, n=m.getSize(); i < n; i++) {
    m.set(i,null);
  }
  if (customHueRadio.isSelected()) {
  }
 else   if (analogousRadio.isSelected()) {
    m.addRule(new SimpleHarmonicRule(0,30f / 360f,0,5));
    m.addRule(new SimpleHarmonicRule(0,-30f / 360f,0,10));
  }
 else   if (primaryRadio.isSelected()) {
    m.addRule(new SimpleHarmonicRule(0,60f / 360f,0,5));
    m.addRule(new SimpleHarmonicRule(0,-60f / 360f,0,10));
  }
 else   if (clashRadio.isSelected()) {
    m.addRule(new SimpleHarmonicRule(0,90f / 360f,0,5));
    m.addRule(new SimpleHarmonicRule(0,-90f / 360f,0,10));
  }
 else   if (triadRadio.isSelected()) {
    m.addRule(new SimpleHarmonicRule(0,120f / 360f,0,5));
    m.addRule(new SimpleHarmonicRule(0,-120f / 360f,0,10));
  }
 else   if (splitComplementaryRadio.isSelected()) {
    m.addRule(new SimpleHarmonicRule(0,150f / 360f,0,5));
    m.addRule(new SimpleHarmonicRule(0,-150f / 360f,0,10));
  }
 else   if (complementaryRadio.isSelected()) {
    m.addRule(new SimpleHarmonicRule(0,180f / 360f,0,5));
  }
  if (monochromaticCheck.isSelected()) {
    m.addRule(new SimpleHarmonicRule(2,1f / 12f,0,1,2));
    m.addRule(new SimpleHarmonicRule(2,1f / 12f,5,6,7));
    m.addRule(new SimpleHarmonicRule(2,1f / 12f,10,11,12));
    m.addRule(new SimpleHarmonicRule(2,-1f / 12f,0,3,4));
    m.addRule(new SimpleHarmonicRule(2,-1f / 12f,5,8,9));
    m.addRule(new SimpleHarmonicRule(2,-1f / 12f,10,13,14));
  }
  m.applyRules();
}
