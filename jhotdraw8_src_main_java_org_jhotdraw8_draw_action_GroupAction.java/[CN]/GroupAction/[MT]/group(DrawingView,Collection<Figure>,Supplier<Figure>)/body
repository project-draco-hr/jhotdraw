{
  if (figures.isEmpty()) {
    final Alert alert=new Alert(Alert.AlertType.INFORMATION,"Empty selection can not be grouped");
    alert.getDialogPane().setMaxWidth(640.0);
    alert.showAndWait();
    return;
  }
  Figure first=figures.iterator().next();
  Drawing drawing=view.getDrawing();
  for (  Figure child : figures) {
    if (child instanceof Layer) {
      final Alert alert=new Alert(Alert.AlertType.INFORMATION,"Layers can not be grouped");
      alert.getDialogPane().setMaxWidth(640.0);
      alert.showAndWait();
      return;
    }
    if (child.getDrawing() != drawing) {
      final Alert alert=new Alert(Alert.AlertType.INFORMATION," Only figures in primary drawing can be grouped");
      alert.getDialogPane().setMaxWidth(640.0);
      alert.showAndWait();
      return;
    }
    Figure parent=child.getParent();
    if (parent != null && (!parent.isEditable() || !parent.isDecomposable())) {
      final Alert alert=new Alert(Alert.AlertType.INFORMATION,"Only figures in editable and decomposable parents can be grouped");
      alert.getDialogPane().setMaxWidth(640.0);
      alert.showAndWait();
      return;
    }
  }
  Figure parent=first.getParent();
  DrawingModel model=view.getModel();
  Figure group=groupFactory.get();
  model.addChildTo(group,parent);
  for (  Figure child : TreeNode.toList(drawing.breadthFirstIterable())) {
    if (!figures.contains(child)) {
      continue;
    }
    model.addChildTo(child,group);
  }
  view.getSelectedFigures().clear();
  view.getSelectedFigures().add(group);
}
