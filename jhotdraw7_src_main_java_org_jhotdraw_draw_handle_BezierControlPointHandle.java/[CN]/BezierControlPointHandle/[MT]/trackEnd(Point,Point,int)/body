{
  final BezierFigure figure=getBezierFigure();
  BezierPath.Node oldValue=(BezierPath.Node)oldNode.clone();
  BezierPath.Node newValue=figure.getNode(index);
  if ((modifiersEx & (InputEvent.META_DOWN_MASK | InputEvent.CTRL_DOWN_MASK | InputEvent.ALT_DOWN_MASK| InputEvent.SHIFT_DOWN_MASK)) != 0) {
    figure.willChange();
    newValue.keepColinear=!newValue.keepColinear;
    if (newValue.keepColinear) {
      Point2D.Double p=figure.getPoint(index,controlPointIndex);
      double a=Math.PI + Math.atan2(p.y - newValue.y[0],p.x - newValue.x[0]);
      int c2=(controlPointIndex == 1) ? 2 : 1;
      double r=Math.sqrt((newValue.x[c2] - newValue.x[0]) * (newValue.x[c2] - newValue.x[0]) + (newValue.y[c2] - newValue.y[0]) * (newValue.y[c2] - newValue.y[0]));
      double sina=Math.sin(a);
      double cosa=Math.cos(a);
      Point2D.Double p2=new Point2D.Double(r * cosa + newValue.x[0],r * sina + newValue.y[0]);
      newValue.x[c2]=p2.x;
      newValue.y[c2]=p2.y;
    }
    figure.setNode(index,newValue);
    figure.changed();
  }
  view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(figure,index,oldValue,newValue){
    private static final long serialVersionUID=1L;
    @Override public void redo() throws CannotRedoException {
      super.redo();
      fireHandleRequestSecondaryHandles();
    }
    @Override public void undo() throws CannotUndoException {
      super.undo();
      fireHandleRequestSecondaryHandles();
    }
  }
);
  view.getDrawing().fireUndoableEditHappened(edit);
}
