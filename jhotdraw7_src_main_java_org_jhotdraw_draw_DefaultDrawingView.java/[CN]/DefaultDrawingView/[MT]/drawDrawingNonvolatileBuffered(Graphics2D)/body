{
  Rectangle vr=getVisibleRect();
  Point shift=new Point(0,0);
  if (bufferedArea.contains(vr) || bufferedArea.width >= vr.width && bufferedArea.height >= vr.height) {
    shift.x=bufferedArea.x - vr.x;
    shift.y=bufferedArea.y - vr.y;
    if (shift.x > 0) {
      dirtyArea.add(new Rectangle(bufferedArea.x - shift.x,vr.y,shift.x + bufferedArea.width - vr.width,bufferedArea.height));
    }
 else     if (shift.x < 0) {
      dirtyArea.add(new Rectangle(bufferedArea.x + vr.width,vr.y,-shift.x + bufferedArea.width - vr.width,bufferedArea.height));
    }
    if (shift.y > 0) {
      dirtyArea.add(new Rectangle(vr.x,bufferedArea.y - shift.y,bufferedArea.width,shift.y + bufferedArea.height - vr.height));
    }
 else     if (shift.y < 0) {
      dirtyArea.add(new Rectangle(vr.x,bufferedArea.y + vr.height,bufferedArea.width,-shift.y + bufferedArea.height - vr.height));
    }
    bufferedArea.x=vr.x;
    bufferedArea.y=vr.y;
  }
 else {
    bufferedArea.setBounds(vr);
    dirtyArea.setBounds(vr);
    if (drawingBufferNV != null && (drawingBufferNV.getWidth() != vr.width || drawingBufferNV.getHeight() != vr.height)) {
      drawingBufferNV.flush();
      drawingBufferNV=null;
    }
  }
  int valid=(drawingBufferNV == null) ? VolatileImage.IMAGE_INCOMPATIBLE : VolatileImage.IMAGE_OK;
switch (valid) {
case VolatileImage.IMAGE_INCOMPATIBLE:
    try {
      drawingBufferNV=getGraphicsConfiguration().createCompatibleImage(vr.width,vr.height,Transparency.TRANSLUCENT);
    }
 catch (    OutOfMemoryError e) {
      drawingBufferNV=null;
    }
  dirtyArea.setBounds(bufferedArea);
break;
}
if (drawingBufferNV == null) {
drawDrawing(g);
return;
}
if (!dirtyArea.isEmpty()) {
Graphics2D gBuf=drawingBufferNV.createGraphics();
setViewRenderingHints(gBuf);
gBuf.setComposite(AlphaComposite.Src);
if (shift.x != 0 || shift.y != 0) {
gBuf.copyArea(Math.max(0,-shift.x),Math.max(0,-shift.y),drawingBufferNV.getWidth() - Math.abs(shift.x),drawingBufferNV.getHeight() - Math.abs(shift.y),shift.x,shift.y);
shift.x=shift.y=0;
}
gBuf.translate(-bufferedArea.x,-bufferedArea.y);
gBuf.clip(dirtyArea);
gBuf.setBackground(new Color(0x0,true));
gBuf.clearRect(dirtyArea.x,dirtyArea.y,dirtyArea.width,dirtyArea.height);
gBuf.setComposite(AlphaComposite.SrcOver);
drawDrawing(gBuf);
gBuf.dispose();
}
g.drawImage(drawingBufferNV,bufferedArea.x,bufferedArea.y,null);
dirtyArea.setSize(-1,-1);
}
