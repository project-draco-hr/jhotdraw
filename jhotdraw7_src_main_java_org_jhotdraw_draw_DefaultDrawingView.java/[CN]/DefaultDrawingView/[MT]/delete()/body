{
  final LinkedList<CompositeFigureEvent> deletionEvents=new LinkedList<CompositeFigureEvent>();
  final LinkedList<Figure> selectedFigures=new LinkedList<Figure>(getSelectedFigures());
  for (  Figure f : selectedFigures) {
    if (!f.isRemovable()) {
      getToolkit().beep();
      return;
    }
  }
  clearSelection();
  CompositeFigureListener removeListener=new CompositeFigureListener(){
    public void areaInvalidated(    CompositeFigureEvent e){
    }
    public void figureAdded(    CompositeFigureEvent e){
    }
    public void figureRemoved(    CompositeFigureEvent evt){
      deletionEvents.addFirst(evt);
    }
  }
;
  getDrawing().addCompositeFigureListener(removeListener);
  getDrawing().removeAll(selectedFigures);
  getDrawing().removeCompositeFigureListener(removeListener);
  getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit(){
    public String getPresentationName(){
      ResourceBundleUtil labels=ResourceBundleUtil.getLAFBundle("org.jhotdraw.draw.Labels");
      return labels.getString("delete");
    }
    public void undo() throws CannotUndoException {
      super.undo();
      clearSelection();
      Drawing d=getDrawing();
      for (      CompositeFigureEvent evt : deletionEvents) {
        d.add(evt.getIndex(),evt.getChildFigure());
      }
      addToSelection(selectedFigures);
    }
    public void redo() throws CannotRedoException {
      super.redo();
      for (      CompositeFigureEvent evt : new ReversedList<CompositeFigureEvent>(deletionEvents)) {
        getDrawing().remove(evt.getChildFigure());
      }
    }
  }
);
}
