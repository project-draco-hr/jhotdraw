{
  final LinkedList<DrawingEvent> deletionEvents=new LinkedList<DrawingEvent>();
  final LinkedList<Figure> selectedFigures=new LinkedList<Figure>(getSelectedFigures());
  clearSelection();
  DrawingListener removeListener=new DrawingListener(){
    public void areaInvalidated(    DrawingEvent e){
    }
    public void figureAdded(    DrawingEvent e){
    }
    public void figureRemoved(    DrawingEvent evt){
      deletionEvents.addFirst(evt);
    }
  }
;
  getDrawing().addDrawingListener(removeListener);
  getDrawing().removeAll(selectedFigures);
  getDrawing().removeDrawingListener(removeListener);
  getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit(){
    public String getPresentationName(){
      ResourceBundleUtil labels=ResourceBundleUtil.getLAFBundle("org.jhotdraw.draw.Labels");
      return labels.getString("delete");
    }
    public void undo() throws CannotUndoException {
      super.undo();
      clearSelection();
      Drawing d=getDrawing();
      for (      DrawingEvent evt : deletionEvents) {
        d.add(evt.getIndex(),evt.getFigure());
      }
      addToSelection(selectedFigures);
    }
    public void redo() throws CannotRedoException {
      super.redo();
      for (      DrawingEvent evt : new ReversedList<DrawingEvent>(deletionEvents)) {
        getDrawing().remove(evt.getFigure());
      }
    }
  }
);
}
