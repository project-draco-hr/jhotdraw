{
  final ObservableList<PathElement> elems=isectPath.getElements();
  elems.clear();
  Map.Entry<Shape,List<Handle>> entry0=shapes.get(0);
  Map.Entry<Shape,List<Handle>> entry1=shapes.get(1);
  if (entry0 != null && entry1 != null) {
    Shape shape0=entry0.getKey();
    Shape shape1=entry1.getKey();
    print(shape0,"0");
    print(shape1,"1");
    Intersection isect=null;
    if (shape0.getClass() == Circle.class && shape1.getClass() == Circle.class) {
      Circle l0=(Circle)shape0;
      Circle l1=(Circle)shape1;
      isect=Intersections.intersectCircleCircle(l0.getCenterX(),l0.getCenterY(),l0.getRadius(),l1.getCenterX(),l1.getCenterY(),l1.getRadius());
    }
 else     if (shape0.getClass() == Circle.class && shape1.getClass() == Ellipse.class) {
      Circle l0=(Circle)shape0;
      Ellipse l1=(Ellipse)shape1;
      isect=Intersections.intersectCircleEllipse(l0.getCenterX(),l0.getCenterY(),l0.getRadius(),l1.getCenterX(),l1.getCenterY(),l1.getRadiusX(),l1.getRadiusY());
    }
 else     if (shape0.getClass() == Circle.class && shape1.getClass() == Line.class) {
      Circle l0=(Circle)shape0;
      Line l1=(Line)shape1;
      isect=Intersections.intersectCircleLine(l0.getCenterX(),l0.getCenterY(),l0.getRadius(),l1.getStartX(),l1.getStartY(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == Circle.class && shape1.getClass() == Point.class) {
      Circle l0=(Circle)shape0;
      Point l1=(Point)shape1;
      isect=Intersections.intersectCirclePoint(l0.getCenterX(),l0.getCenterY(),l0.getRadius(),l1.getCenterX(),l1.getCenterY(),l1.getRadius());
    }
 else     if (shape0.getClass() == Circle.class && shape1.getClass() == Rectangle.class) {
      Circle l0=(Circle)shape0;
      Rectangle l1=(Rectangle)shape1;
      isect=Intersections.intersectCircleRectangle(l0.getCenterX(),l0.getCenterY(),l0.getRadius(),l1.getX(),l1.getY(),l1.getWidth(),l1.getHeight());
    }
 else     if (shape0.getClass() == CubicCurve.class && shape1.getClass() == Circle.class) {
      CubicCurve l0=(CubicCurve)shape0;
      Circle l1=(Circle)shape1;
      isect=Intersections.intersectCubicCurveCircle(l0.getStartX(),l0.getStartY(),l0.getControlX1(),l0.getControlY1(),l0.getControlX2(),l0.getControlY2(),l0.getEndX(),l0.getEndY(),l1.getCenterX(),l1.getCenterY(),l1.getRadius());
    }
 else     if (shape0.getClass() == CubicCurve.class && shape1.getClass() == CubicCurve.class) {
      CubicCurve l0=(CubicCurve)shape0;
      CubicCurve l1=(CubicCurve)shape1;
      isect=Intersections.intersectCubicCurveCubicCurve(l0.getStartX(),l0.getStartY(),l0.getControlX1(),l0.getControlY1(),l0.getControlX2(),l0.getControlY2(),l0.getEndX(),l0.getEndY(),l1.getStartX(),l1.getStartY(),l1.getControlX1(),l1.getControlY1(),l1.getControlX2(),l1.getControlY2(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == CubicCurve.class && shape1.getClass() == Ellipse.class) {
      CubicCurve l0=(CubicCurve)shape0;
      Ellipse l1=(Ellipse)shape1;
      isect=Intersections.intersectCubicCurveEllipse(l0.getStartX(),l0.getStartY(),l0.getControlX1(),l0.getControlY1(),l0.getControlX2(),l0.getControlY2(),l0.getEndX(),l0.getEndY(),l1.getCenterX(),l1.getCenterY(),l1.getRadiusX(),l1.getRadiusY());
    }
 else     if (shape0.getClass() == CubicCurve.class && shape1.getClass() == Line.class) {
      CubicCurve l0=(CubicCurve)shape0;
      Line l1=(Line)shape1;
      isect=Intersections.intersectCubicCurveLine(l0.getStartX(),l0.getStartY(),l0.getControlX1(),l0.getControlY1(),l0.getControlX2(),l0.getControlY2(),l0.getEndX(),l0.getEndY(),l1.getStartX(),l1.getStartY(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == CubicCurve.class && shape1.getClass() == Point.class) {
      CubicCurve l0=(CubicCurve)shape0;
      Point l1=(Point)shape1;
      isect=Intersections.intersectCubicCurvePoint(l0.getStartX(),l0.getStartY(),l0.getControlX1(),l0.getControlY1(),l0.getControlX2(),l0.getControlY2(),l0.getEndX(),l0.getEndY(),l1.getCenterX(),l1.getCenterY(),l1.getRadius());
      if (isect.size() == 1) {
        System.out.println("  t:" + isect.getFirstT() + " ctrlPoint:"+ isect.getLastPoint());
        double[] left=new double[6];
        double[] right=new double[6];
        Beziers.splitCubicCurve(l0.getStartX(),l0.getStartY(),l0.getControlX1(),l0.getControlY1(),l0.getControlX2(),l0.getControlY2(),l0.getEndX(),l0.getEndY(),isect.getFirstT(),left,right);
        System.out.println("  left:" + Arrays.toString(left));
        System.out.println("  right:" + Arrays.toString(right));
        Point2D[] newControlPoint=Beziers.mergeCubicCurve(l0.getStartX(),l0.getStartY(),left[0],left[1],left[2],left[3],left[4],left[5],right[0],right[1],right[2],right[3],right[4],right[5],1.0);
        System.out.println("  new ctrlPoint:" + Arrays.toString(newControlPoint));
      }
    }
 else     if (shape0.getClass() == CubicCurve.class && shape1.getClass() == QuadCurve.class) {
      CubicCurve l0=(CubicCurve)shape0;
      QuadCurve l1=(QuadCurve)shape1;
      isect=Intersections.intersectCubicCurveQuadraticCurve(l0.getStartX(),l0.getStartY(),l0.getControlX1(),l0.getControlY1(),l0.getControlX2(),l0.getControlY2(),l0.getEndX(),l0.getEndY(),l1.getStartX(),l1.getStartY(),l1.getControlX(),l1.getControlY(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == Ellipse.class && shape1.getClass() == Circle.class) {
      Ellipse e0=(Ellipse)shape0;
      Circle l1=(Circle)shape1;
      isect=Intersections.intersectEllipseCircle(e0.getCenterX(),e0.getCenterY(),e0.getRadiusX(),e0.getRadiusY(),l1.getCenterX(),l1.getCenterY(),l1.getRadius());
    }
 else     if (shape0.getClass() == Ellipse.class && shape1.getClass() == Ellipse.class) {
      Ellipse e0=(Ellipse)shape0;
      Ellipse e1=(Ellipse)shape1;
      isect=Intersections.intersectEllipseEllipse(e0.getCenterX(),e0.getCenterY(),e0.getRadiusX(),e0.getRadiusY(),e1.getCenterX(),e1.getCenterY(),e1.getRadiusX(),e1.getRadiusY());
    }
 else     if (shape0.getClass() == Ellipse.class && shape1.getClass() == Line.class) {
      Ellipse e0=(Ellipse)shape0;
      Line l1=(Line)shape1;
      isect=Intersections.intersectEllipseLine(e0.getCenterX(),e0.getCenterY(),e0.getRadiusX(),e0.getRadiusY(),l1.getStartX(),l1.getStartY(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == Ellipse.class && shape1.getClass() == Point.class) {
      Ellipse e0=(Ellipse)shape0;
      Point e1=(Point)shape1;
    }
 else     if (shape0.getClass() == Ellipse.class && shape1.getClass() == QuadCurve.class) {
      Ellipse e0=(Ellipse)shape0;
      QuadCurve l1=(QuadCurve)shape0;
      isect=Intersections.intersectEllipseQuadraticCurve(e0.getCenterX(),e0.getCenterY(),e0.getRadiusX(),e0.getRadiusY(),l1.getStartX(),l1.getStartY(),l1.getControlX(),l1.getControlY(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == Line.class && shape1.getClass() == Circle.class) {
      Line l0=(Line)shape0;
      Circle e1=(Circle)shape1;
      isect=Intersections.intersectLineCircle(l0.getStartX(),l0.getStartY(),l0.getEndX(),l0.getEndY(),e1.getCenterX(),e1.getCenterY(),e1.getRadius());
    }
 else     if (shape0.getClass() == Line.class && shape1.getClass() == Ellipse.class) {
      Line l0=(Line)shape0;
      Ellipse e1=(Ellipse)shape1;
      isect=Intersections.intersectLineEllipse(l0.getStartX(),l0.getStartY(),l0.getEndX(),l0.getEndY(),e1.getCenterX(),e1.getCenterY(),e1.getRadiusX(),e1.getRadiusY());
    }
 else     if (shape0.getClass() == Line.class && shape1.getClass() == Point.class) {
      Line l0=(Line)shape0;
      Point e1=(Point)shape1;
      isect=Intersections.intersectLinePoint(l0.getStartX(),l0.getStartY(),l0.getEndX(),l0.getEndY(),e1.getCenterX(),e1.getCenterY(),e1.getRadius());
    }
 else     if (shape0.getClass() == Line.class && shape1.getClass() == Line.class) {
      Line l0=(Line)shape0;
      Line l1=(Line)shape1;
      isect=Intersections.intersectLineLine(l0.getStartX(),l0.getStartY(),l0.getEndX(),l0.getEndY(),l1.getStartX(),l1.getStartY(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == QuadCurve.class && shape1.getClass() == QuadCurve.class) {
      QuadCurve l0=(QuadCurve)shape0;
      QuadCurve l1=(QuadCurve)shape1;
      isect=Intersections.intersectQuadraticCurveQuadraticCurve(l0.getStartX(),l0.getStartY(),l0.getControlX(),l0.getControlY(),l0.getEndX(),l0.getEndY(),l1.getStartX(),l1.getStartY(),l1.getControlX(),l1.getControlY(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == QuadCurve.class && shape1.getClass() == Circle.class) {
      QuadCurve l0=(QuadCurve)shape0;
      Circle l1=(Circle)shape1;
      isect=Intersections.intersectQuadraticCurveCircle(l0.getStartX(),l0.getStartY(),l0.getControlX(),l0.getControlY(),l0.getEndX(),l0.getEndY(),l1.getCenterX(),l1.getCenterY(),l1.getRadius());
    }
 else     if (shape0.getClass() == QuadCurve.class && shape1.getClass() == Ellipse.class) {
      QuadCurve l0=(QuadCurve)shape0;
      Ellipse l1=(Ellipse)shape1;
      isect=Intersections.intersectQuadraticCurveEllipse(l0.getStartX(),l0.getStartY(),l0.getControlX(),l0.getControlY(),l0.getEndX(),l0.getEndY(),l1.getCenterX(),l1.getCenterY(),l1.getRadiusX(),l1.getRadiusY());
    }
 else     if (shape0.getClass() == QuadCurve.class && shape1.getClass() == Point.class) {
      QuadCurve l0=(QuadCurve)shape0;
      Point l1=(Point)shape1;
      isect=Intersections.intersectQuadraticCurvePoint(l0.getStartX(),l0.getStartY(),l0.getControlX(),l0.getControlY(),l0.getEndX(),l0.getEndY(),l1.getCenterX(),l1.getCenterY(),l1.getRadius());
      if (isect.size() == 1) {
        System.out.println("  t:" + isect.getFirstT() + " ctrlPoint:"+ isect.getLastPoint());
        double[] left=new double[4];
        double[] right=new double[4];
        Beziers.splitQuadCurve(l0.getStartX(),l0.getStartY(),l0.getControlX(),l0.getControlY(),l0.getEndX(),l0.getEndY(),isect.getFirstT(),left,right);
        System.out.println("  left:" + Arrays.toString(left));
        System.out.println("  right:" + Arrays.toString(right));
        Point2D newControlPoint=Beziers.mergeQuadCurve(l0.getStartX(),l0.getStartY(),left[0],left[1],left[2],left[3],right[0],right[1],right[2],right[3],1.0);
        System.out.println("  new ctrlPoint:" + newControlPoint);
      }
    }
 else     if (shape0.getClass() == QuadCurve.class && shape1.getClass() == Line.class) {
      QuadCurve l0=(QuadCurve)shape0;
      Line l1=(Line)shape1;
      isect=Intersections.intersectQuadraticCurveLine(l0.getStartX(),l0.getStartY(),l0.getControlX(),l0.getControlY(),l0.getEndX(),l0.getEndY(),l1.getStartX(),l1.getStartY(),l1.getEndX(),l1.getEndY());
    }
 else     if (shape0.getClass() == Rectangle.class && shape1.getClass() == Rectangle.class) {
      Rectangle l0=(Rectangle)shape0;
      Rectangle l1=(Rectangle)shape1;
      isect=Intersections.intersectRectangleRectangle(l0.getX(),l0.getY(),l0.getWidth(),l0.getHeight(),l1.getX(),l1.getY(),l1.getWidth(),l1.getHeight());
    }
    if (isect != null) {
      double r=3.5;
      for (      Map.Entry<Double,Point2D> entry : isect.getIntersections()) {
        Point2D p=entry.getValue();
        System.out.println("  p:" + p);
        double x=p.getX();
        double y=p.getY();
        elems.add(new MoveTo(x - r,y));
        elems.add(new ArcTo(r,r,0,x + r,y,true,true));
        elems.add(new ArcTo(r,r,0,x - r,y,true,true));
        elems.add(new ClosePath());
      }
    }
  }
}
