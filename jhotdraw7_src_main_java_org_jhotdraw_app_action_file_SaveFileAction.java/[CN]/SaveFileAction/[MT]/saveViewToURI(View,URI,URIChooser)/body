{
  view.execute(new BackgroundTask(){
    @Override protected void construct() throws IOException {
      view.write(file,chooser);
    }
    @Override protected void done(){
      view.setURI(file);
      view.markChangesAsSaved();
      int multiOpenId=1;
      for (      View p : view.getApplication().views()) {
        if (p != view && p.getURI() != null && p.getURI().equals(file)) {
          multiOpenId=Math.max(multiOpenId,p.getMultipleOpenId() + 1);
        }
      }
      getApplication().addRecentURI(file);
      view.setMultipleOpenId(multiOpenId);
    }
    @Override protected void failed(    Throwable value){
      value.printStackTrace();
      String message=value.getMessage() != null ? value.getMessage() : value.toString();
      ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");
      JSheet.showMessageSheet(getActiveView().getComponent(),"<html>" + UIManager.getString("OptionPane.css") + "<b>"+ labels.getFormatted("file.save.couldntSave.message",URIUtil.getName(file))+ "</b><p>"+ ((message == null) ? "" : message),JOptionPane.ERROR_MESSAGE);
    }
    @Override protected void finished(){
      view.setEnabled(true);
      SwingUtilities.getWindowAncestor(view.getComponent()).toFront();
      if (oldFocusOwner != null) {
        oldFocusOwner.requestFocus();
      }
    }
  }
);
}
