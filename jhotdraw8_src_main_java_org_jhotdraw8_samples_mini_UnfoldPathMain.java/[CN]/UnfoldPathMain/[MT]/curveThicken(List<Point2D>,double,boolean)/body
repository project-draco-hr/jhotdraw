{
  int n=V_.size();
  if (n < 2) {
    return new Pair<>(Collections.emptyList(),Collections.emptyList());
  }
  List<Point2D> V0=new ArrayList<>(n * 2);
  List<Point2D> V1=new ArrayList<>(n * 2);
  List<Point2D> V=new ArrayList<>(n * 2);
{
    Point2D p1=V_.get(0);
    for (int i=1; i < n; i++) {
      Point2D p2=V_.get(i);
      Point2D perp=perp(p2.subtract(p1).normalize());
      V1.add(p1.add(perp.multiply(width / 2)));
      V0.add(p1.add(perp.multiply(width / -2)));
      V.add(p1);
      V1.add(p2.add(perp.multiply(width / 2)));
      V0.add(p2.add(perp.multiply(width / -2)));
      V.add(p2);
      p1=p2;
    }
  }
  n=V.size();
  if (!unfold) {
    return new Pair<>(V0,V1);
  }
  List<Point2D> V0_=new ArrayList<>(V0);
  List<Point2D> V1_=new ArrayList<>(V1);
  for (int i=0; i < n - 1; i++) {
    for (int j=n - 2; j > i + 1; j--) {
      Point2D p1=V0.get(i), p2=V0.get(i + 1);
      Point2D p3=V0.get(j), p4=V0.get(j + 1);
      Point2D p=intersection(p1,p2,p3,p4);
      if (p != null) {
        addDisc(intersections.getElements(),p);
        for (int k=i + 1; k < j + 1; k++) {
          V0.set(k,p);
        }
        if (false)         for (int k=i + 1; k <= j + 1; k++) {
          for (int l=i; l < j + 1; l++) {
            p=intersection2(V0.get(k),V.get(k),V1.get(l),V1_.get(l + 1));
            if (p != null) {
              addDisc(intersections.getElements(),p);
              V1.set(k,p);
              break;
            }
          }
        }
        i=j - 1;
        break;
      }
    }
  }
  for (int i=0; i < n - 1; i++) {
    for (int j=n - 2; j > i + 1; j--) {
      Point2D p1=V1.get(i), p2=V1.get(i + 1);
      Point2D p3=V1.get(j), p4=V1.get(j + 1);
      Point2D p=intersection(p1,p2,p3,p4);
      if (p != null) {
        addDisc(intersections.getElements(),p);
        for (int k=i + 1; k < j + 1; k++) {
          V1.set(k,p);
        }
        if (false)         for (int k=i + 1; k <= j + 1; k++) {
          for (int l=i; l < j + 1; l++) {
            p=intersection2(V1.get(k),V.get(k),V0_.get(l),V0_.get(l + 1));
            if (p != null) {
              addDisc(intersections.getElements(),p);
              V0.set(k,p);
              break;
            }
          }
        }
        i=j - 1;
        break;
      }
    }
  }
  return new Pair<>(V0,V1);
}
