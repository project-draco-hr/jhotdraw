{
  if (level > curve_recursion_limit) {
    return;
  }
  double x12, y12, x23, y23, x123, y123;
  x12=(x1 + x2) / 2;
  y12=(y1 + y2) / 2;
  x23=(x2 + x3) / 2;
  y23=(y2 + y3) / 2;
  x123=(x12 + x23) / 2;
  y123=(y12 + y23) / 2;
  double dx, dy, d;
  dx=x3 - x1;
  dy=y3 - y1;
  d=abs((x2 - x3) * dy - (y2 - y3) * dx);
  if (d > curve_collinearity_epsilon) {
    if (d * d <= m_distance_tolerance_square * (dx * dx + dy * dy)) {
      if (m_angle_tolerance < curve_angle_tolerance_epsilon) {
        points.add(new Point2D(x123,y123));
        return;
      }
      double da=abs(atan2(y3 - y2,x3 - x2) - atan2(y2 - y1,x2 - x1));
      if (da >= Math.PI) {
        da=2 * Math.PI - da;
      }
      if (da < m_angle_tolerance) {
        points.add(new Point2D(x123,y123));
        return;
      }
    }
  }
 else {
    double da=dx * dx + dy * dy;
    if (da == 0) {
      d=calc_sq_distance(x1,y1,x2,y2);
    }
 else {
      d=((x2 - x1) * dx + (y2 - y1) * dy) / da;
      if (d > 0 && d < 1) {
        return;
      }
      if (d <= 0) {
        d=calc_sq_distance(x2,y2,x1,y1);
      }
 else       if (d >= 1) {
        d=calc_sq_distance(x2,y2,x3,y3);
      }
 else {
        d=calc_sq_distance(x2,y2,x1 + d * dx,y1 + d * dy);
      }
    }
    if (d < m_distance_tolerance_square) {
      points.add(new Point2D(x2,y2));
      return;
    }
  }
  curve3RecursiveBezier(points,x1,y1,x12,y12,x123,y123,level + 1);
  curve3RecursiveBezier(points,x123,y123,x23,y23,x3,y3,level + 1);
}
