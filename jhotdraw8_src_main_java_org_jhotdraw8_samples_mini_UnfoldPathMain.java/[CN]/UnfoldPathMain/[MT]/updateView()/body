{
  final ObservableList<Double> list=polyline.getPoints();
  list.clear();
  for (  Point2D p : points) {
    list.add(p.getX());
    list.add(p.getY());
  }
  final ObservableList<PathElement> skeletonElements=skeleton.getElements();
  skeletonElements.clear();
  final ObservableList<PathElement> unfoldedElements=unfoldedSkeleton.getElements();
  unfoldedElements.clear();
  renderSkeleton(skeletonElements,points);
  intersections.getElements().clear();
  Pair<List<Point2D>,List<Point2D>> result1=curveThicken(points,width,true);
  if (result1 != null) {
    offsetPath.getElements().clear();
    setPoints(offsetPath,result1.getKey());
    setPoints(offsetPath,result1.getValue());
    renderSkeleton(unfoldedElements,result1.getKey(),result1.getValue());
  }
  builtOffsetPath.getElements().setAll(buildOffsetPath(points,width + 2));
  BasicStroke stroke=new BasicStroke((float)width,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL);
  Path2D path=new Path2D.Double();
  for (int i=0, n=points.size(); i < n; i++) {
    Point2D p=points.get(i);
    if (i == 0)     path.moveTo(p.getX(),p.getY());
 else     path.lineTo(p.getX(),p.getY());
  }
  path=(Path2D)stroke.createStrokedShape(path);
  FXPathBuilder fxBuilder=new FXPathBuilder();
  Shapes.buildFromPathIterator(fxBuilder,path.getPathIterator(null));
  strokedPath.getElements().setAll(fxBuilder.getElements());
}
