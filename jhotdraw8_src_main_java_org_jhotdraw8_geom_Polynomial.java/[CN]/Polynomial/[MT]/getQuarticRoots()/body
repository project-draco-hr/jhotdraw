{
  double[] results=new double[4];
  int numResults=0;
  final double c4, c3, c2, c1, c0;
  c4=this.coefs[4];
  c3=this.coefs[3] / c4;
  c2=this.coefs[2] / c4;
  c1=this.coefs[1] / c4;
  c0=this.coefs[0] / c4;
  double[] resolveRoots=new Polynomial(1,-c2,c3 * c1 - 4 * c0,-c3 * c3 * c0 + 4 * c2 * c0 - c1 * c1).getCubicRoots();
  double y=resolveRoots[0];
  double discrim=c3 * c3 / 4 - c2 + y;
  if (abs(discrim) <= EPSILON) {
    discrim=0;
  }
  if (discrim > 0) {
    double e=sqrt(discrim);
    final double t1, t2;
    t1=0.75 * c3 * c3 - e * e - 2 * c2;
    t2=(4 * c3 * c2 - 8 * c1 - c3 * c3 * c3) / (4 * e);
    double plus=t1 + t2;
    double minus=t1 - t2;
    if (abs(plus) <= EPSILON) {
      plus=0;
    }
    if (abs(minus) <= EPSILON) {
      minus=0;
    }
    if (plus >= 0) {
      double f=sqrt(plus);
      results[numResults++]=c3 / -4 + (e + f) / 2;
      results[numResults++]=c3 / -4 + (e - f) / 2;
    }
    if (minus >= 0) {
      double f=sqrt(minus);
      results[numResults++]=c3 / -4 + (f - e) / 2;
      results[numResults++]=c3 / -4 - (f + e) / 2;
    }
  }
 else   if (discrim < 0) {
  }
 else {
    double t2=y * y - 4 * c0;
    if (t2 >= -EPSILON) {
      if (t2 < 0) {
        t2=0;
      }
      t2=2 * sqrt(t2);
      double t1=3 * c3 * c3 / 4 - 2 * c2;
      if (t1 + t2 >= EPSILON) {
        double d=sqrt(t1 + t2);
        results[numResults++]=-c3 / 4 + d / 2;
        results[numResults++]=-c3 / 4 - d / 2;
      }
      if (t1 - t2 >= EPSILON) {
        double d=sqrt(t1 - t2);
        results[numResults++]=-c3 / 4 + d / 2;
        results[numResults++]=-c3 / 4 - d / 2;
      }
    }
  }
  return trim(numResults,results);
}
