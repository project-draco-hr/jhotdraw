{
  double[] results=new double[4];
  int numResults=0;
  if (this.getDegree() == 4) {
    double c4=this.coefs[4];
    double c3=this.coefs[3] / c4;
    double c2=this.coefs[2] / c4;
    double c1=this.coefs[1] / c4;
    double c0=this.coefs[0] / c4;
    double[] resolveRoots=new Polynomial(1,-c2,c3 * c1 - 4 * c0,-c3 * c3 * c0 + 4 * c2 * c0 - c1 * c1).getCubicRoots();
    double y=resolveRoots[0];
    double discrim=c3 * c3 / 4 - c2 + y;
    if (Math.abs(discrim) <= Polynomial.TOLERANCE) {
      discrim=0;
    }
    if (discrim > 0) {
      double e=Math.sqrt(discrim);
      double t1=3 * c3 * c3 / 4 - e * e - 2 * c2;
      double t2=(4 * c3 * c2 - 8 * c1 - c3 * c3 * c3) / (4 * e);
      double plus=t1 + t2;
      double minus=t1 - t2;
      if (Math.abs(plus) <= Polynomial.TOLERANCE) {
        plus=0;
      }
      if (Math.abs(minus) <= Polynomial.TOLERANCE) {
        minus=0;
      }
      if (plus >= 0) {
        double f=Math.sqrt(plus);
        results[numResults++]=-c3 / 4 + (e + f) / 2;
        results[numResults++]=-c3 / 4 + (e - f) / 2;
      }
      if (minus >= 0) {
        double f=Math.sqrt(minus);
        results[numResults++]=-c3 / 4 + (f - e) / 2;
        results[numResults++]=-c3 / 4 - (f + e) / 2;
      }
    }
 else     if (discrim < 0) {
    }
 else {
      double t2=y * y - 4 * c0;
      if (t2 >= -Polynomial.TOLERANCE) {
        if (t2 < 0) {
          t2=0;
        }
        t2=2 * Math.sqrt(t2);
        double t1=3 * c3 * c3 / 4 - 2 * c2;
        if (t1 + t2 >= Polynomial.TOLERANCE) {
          double d=Math.sqrt(t1 + t2);
          results[numResults++]=-c3 / 4 + d / 2;
          results[numResults++]=-c3 / 4 - d / 2;
        }
        if (t1 - t2 >= Polynomial.TOLERANCE) {
          double d=Math.sqrt(t1 - t2);
          results[numResults++]=-c3 / 4 + d / 2;
          results[numResults++]=-c3 / 4 - d / 2;
        }
      }
    }
  }
  double[] finalResults=new double[numResults];
  System.arraycopy(results,0,finalResults,0,numResults);
  return finalResults;
}
