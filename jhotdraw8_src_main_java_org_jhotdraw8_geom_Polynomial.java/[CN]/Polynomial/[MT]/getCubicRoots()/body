{
  final double[] results=new double[4];
  int numResults=0;
  final double c3, c2, c1, c0;
  c3=this.coefs[3];
  c2=this.coefs[2] / c3;
  c1=this.coefs[1] / c3;
  c0=this.coefs[0] / c3;
  if (c3 == 0) {
    throw new IllegalArgumentException("Not a cubic root! simplifiedDegree=" + simplifiedDegree());
  }
  final double a, b, offset, halfB;
  a=(3 * c1 - c2 * c2) / 3;
  b=(2 * c2 * c2* c2 - 9 * c1 * c2 + 27 * c0) / 27;
  offset=c2 / 3;
  halfB=b / 2;
  double discrim=b * b / 4 + a * a * a / 27;
  if (discrim > 0) {
    double e=Math.sqrt(discrim);
    double tmp;
    double root;
    tmp=-halfB + e;
    if (tmp >= 0) {
      root=Math.pow(tmp,1.0 / 3);
    }
 else {
      root=-Math.pow(-tmp,1.0 / 3);
    }
    tmp=-halfB - e;
    if (tmp >= 0) {
      root+=Math.pow(tmp,1.0 / 3);
    }
 else {
      root-=Math.pow(-tmp,1.0 / 3);
    }
    results[numResults++]=root - offset;
  }
 else   if (discrim < 0) {
    double distance=Math.sqrt(-a / 3);
    double angle=Math.atan2(Math.sqrt(-discrim),-halfB) / 3;
    double cos=Math.cos(angle);
    double sin=Math.sin(angle);
    double sqrt3=Math.sqrt(3);
    results[numResults++]=2 * distance * cos - offset;
    results[numResults++]=-distance * (cos + sqrt3 * sin) - offset;
    results[numResults++]=-distance * (cos - sqrt3 * sin) - offset;
  }
 else {
    double tmp;
    if (halfB >= 0) {
      tmp=-Math.pow(halfB,1.0 / 3.0);
    }
 else {
      tmp=Math.pow(-halfB,1.0 / 3.0);
    }
    results[numResults++]=2 * tmp - offset;
    results[numResults++]=-tmp - offset;
  }
  return trim(numResults,results);
}
