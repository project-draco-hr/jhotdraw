{
  final double[] roots=new double[getDegree()];
  int numRoots=0;
switch (this.simplifiedDegree()) {
case 0:
    break;
case 1:
case 2:
case 3:
case 4:
{
    double[] allroots=getRoots();
    for (int i=0; i < allroots.length; i++) {
      double root=allroots[i];
      if (min <= root && root <= max) {
        roots[numRoots++]=root;
      }
      Arrays.sort(roots,0,numRoots);
    }
    break;
  }
default :
{
  Polynomial deriv=this.getDerivative();
  double[] droots=deriv.getRootsInInterval(min,max);
  if (droots.length > 0) {
    Double root=this.bisection(min,droots[0]);
    if (root != null) {
      roots[numRoots++]=root;
    }
    for (int i=0; i <= droots.length - 2; i++) {
      root=this.bisection(droots[i],droots[i + 1]);
      if (root != null) {
        roots[numRoots++]=root;
      }
    }
    root=this.bisection(droots[droots.length - 1],max);
    if (root != null) {
      roots[numRoots++]=root;
    }
  }
 else {
    Double root=this.bisection(min,max);
    if (root != null) {
      roots[numRoots++]=root;
    }
  }
  break;
}
}
if (numRoots == roots.length) {
return roots;
}
double[] finalResults=new double[numRoots];
System.arraycopy(roots,0,finalResults,0,numRoots);
return finalResults;
}
