{
  Color color;
  String value;
  int intValue;
  Gradient gradient=FILL_GRADIENT.get(m);
  if (gradient != null) {
    String id;
    if (gradientToIDMap.containsKey(gradient)) {
      id=gradientToIDMap.get(gradient);
    }
 else {
      IXMLElement gradientElem;
      if (gradient instanceof LinearGradient) {
        LinearGradient lg=(LinearGradient)gradient;
        gradientElem=createLinearGradient(document,lg.getX1(),lg.getY1(),lg.getX2(),lg.getY2(),lg.getStopOffsets(),lg.getStopColors(),lg.getStopOpacities(),lg.isRelativeToFigureBounds(),lg.getTransform());
      }
 else {
        RadialGradient rg=(RadialGradient)gradient;
        gradientElem=createRadialGradient(document,rg.getCX(),rg.getCY(),rg.getFX(),rg.getFY(),rg.getR(),rg.getStopOffsets(),rg.getStopColors(),rg.getStopOpacities(),rg.isRelativeToFigureBounds(),rg.getTransform());
      }
      id=getId(gradientElem);
      gradientElem.setAttribute("id","xml",id);
      defs.addChild(gradientElem);
      gradientToIDMap.put(gradient,id);
    }
    writeAttribute(elem,"fill","url(#" + id + ")","#000");
  }
 else {
    writeAttribute(elem,"fill",toColor(FILL_COLOR.get(m)),"#000");
  }
  writeAttribute(elem,"fill-opacity",FILL_OPACITY.get(m),1d);
  if (WINDING_RULE.get(m) != WindingRule.NON_ZERO) {
    writeAttribute(elem,"fill-rule","evenodd","nonzero");
  }
  gradient=STROKE_GRADIENT.get(m);
  if (gradient != null) {
    String id;
    if (gradientToIDMap.containsKey(gradient)) {
      id=gradientToIDMap.get(gradient);
    }
 else {
      IXMLElement gradientElem;
      if (gradient instanceof LinearGradient) {
        LinearGradient lg=(LinearGradient)gradient;
        gradientElem=createLinearGradient(document,lg.getX1(),lg.getY1(),lg.getX2(),lg.getY2(),lg.getStopOffsets(),lg.getStopColors(),lg.getStopOpacities(),lg.isRelativeToFigureBounds(),lg.getTransform());
      }
 else {
        RadialGradient rg=(RadialGradient)gradient;
        gradientElem=createRadialGradient(document,rg.getCX(),rg.getCY(),rg.getFX(),rg.getFY(),rg.getR(),rg.getStopOffsets(),rg.getStopColors(),rg.getStopOpacities(),rg.isRelativeToFigureBounds(),rg.getTransform());
      }
      id=getId(gradientElem);
      gradientElem.setAttribute("id","xml",id);
      defs.addChild(gradientElem);
      gradientToIDMap.put(gradient,id);
    }
    writeAttribute(elem,"stroke","url(#" + id + ")","none");
  }
 else {
    writeAttribute(elem,"stroke",toColor(STROKE_COLOR.get(m)),"none");
  }
  double[] dashes=STROKE_DASHES.get(m);
  if (dashes != null) {
    StringBuilder buf=new StringBuilder();
    for (int i=0; i < dashes.length; i++) {
      if (i != 0) {
        buf.append(',');
      }
      buf.append(toNumber(dashes[i]));
    }
    writeAttribute(elem,"stroke-dasharray",buf.toString(),null);
  }
  writeAttribute(elem,"stroke-dashoffset",STROKE_DASH_PHASE.get(m),0d);
  writeAttribute(elem,"stroke-linecap",strokeLinecapMap.get(STROKE_CAP.get(m)),"butt");
  writeAttribute(elem,"stroke-linejoin",strokeLinejoinMap.get(STROKE_JOIN.get(m)),"miter");
  writeAttribute(elem,"stroke-miterlimit",STROKE_MITER_LIMIT.get(m),4d);
  writeAttribute(elem,"stroke-opacity",STROKE_OPACITY.get(m),1d);
  writeAttribute(elem,"stroke-width",STROKE_WIDTH.get(m),1d);
}
