{
  double x;
switch (tt.nextToken()) {
case CssTokenizerInterface.TT_DIMENSION:
{
      double value=tt.currentNumericValue().doubleValue();
      x=idFactory.convert(value,tt.currentStringValue(),"px");
      break;
    }
case CssTokenizerInterface.TT_PERCENTAGE:
{
    double value=tt.currentNumericValue().doubleValue() / 100.0;
    x=idFactory.convert(value,"%","px");
    break;
  }
case CssTokenizerInterface.TT_NUMBER:
{
  double value=tt.currentNumericValue().doubleValue();
  x=value;
  break;
}
case CssTokenizerInterface.TT_IDENT:
{
double value;
switch (tt.currentStringValue()) {
case "INF":
  value=Double.POSITIVE_INFINITY;
break;
case "-INF":
value=Double.NEGATIVE_INFINITY;
break;
case "NaN":
value=Double.NaN;
break;
default :
throw new ParseException("number expected:" + tt.currentStringValue(),tt.getStartPosition());
}
x=value;
break;
}
default :
throw new ParseException("coordinate expected:" + tt.currentStringValue(),tt.getStartPosition());
}
return x;
}
