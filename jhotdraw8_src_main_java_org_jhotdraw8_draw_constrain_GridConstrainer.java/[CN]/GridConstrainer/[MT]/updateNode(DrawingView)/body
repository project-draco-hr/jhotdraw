{
  ObservableList<PathElement> minor=minorNode.getElements();
  ObservableList<PathElement> major=majorNode.getElements();
  minor.clear();
  major.clear();
  CssColor minorGridColor=getMinorGridColor();
  minorNode.setStroke(minorGridColor == null ? null : minorGridColor.getColor());
  CssColor majorGridColor=getMajorGridColor();
  majorNode.setStroke(majorGridColor == null ? null : majorGridColor.getColor());
  Bounds visibleRect=drawingView.viewToWorld(drawingView.getVisibleRect());
  if (drawGrid.get()) {
    Drawing drawing=drawingView.getDrawing();
    Transform t=drawingView.getWorldToView();
    double dx=0;
    double dy=0;
    double dw=drawing.get(Drawing.WIDTH);
    double dh=drawing.get(Drawing.HEIGHT);
    double gx0=x.get();
    double gy0=y.get();
    double gxdelta=Math.abs(width.get());
    double gydelta=Math.abs(height.get());
    if (gx0 < 0) {
      gx0=gx0 % gxdelta + gxdelta;
    }
    if (gy0 < 0) {
      gy0=gy0 % gydelta + gydelta;
    }
    int gmx=Math.max(0,Math.abs(majorX.get()));
    int gmy=Math.max(0,Math.abs(majorY.get()));
    Point2D scaled=t.deltaTransform(gxdelta,gydelta);
    if (scaled.getX() > 2 && gmx != 1) {
      final int start=(int)ceil((max(0,visibleRect.getMinX()) - gx0) / gxdelta);
      final int end=(int)ceil((min(dw,visibleRect.getMaxX()) - gx0) / gxdelta);
      for (int i=start; i < end; i++) {
        if (gmx > 0 && i % gmx == 0) {
          continue;
        }
        double x=gx0 + i * gxdelta;
        double x1=x;
        double y1=0;
        double x2=x;
        double y2=dh;
        Point2D p1=t.transform(x1,y1);
        Point2D p2=t.transform(x2,y2);
        minor.add(new MoveTo(Math.round(p1.getX()) + 0.5,p1.getY()));
        minor.add(new LineTo(Math.round(p2.getX()) + 0.5,p2.getY()));
      }
    }
    if (scaled.getY() > 2 && gmy != 1) {
      final int start=(int)ceil((max(0,visibleRect.getMinY()) - gy0) / gydelta);
      final int end=(int)Math.ceil((min(dh,visibleRect.getMaxY()) - gy0) / gydelta);
      for (int i=start; i < end; i++) {
        if (gmy > 0 && i % gmy == 0) {
          continue;
        }
        double y=gy0 + i * gydelta;
        double x1=0;
        double y1=y;
        double x2=dw;
        double y2=y;
        Point2D p1=t.transform(x1,y1);
        Point2D p2=t.transform(x2,y2);
        minor.add(new MoveTo(p1.getX(),Math.round(p1.getY()) + 0.5));
        minor.add(new LineTo(p2.getX(),Math.round(p2.getY()) + 0.5));
      }
    }
    double gmydelta=gydelta * gmy;
    double gmxdelta=gxdelta * gmx;
    scaled=t.deltaTransform(gmxdelta,gmydelta);
    if (scaled.getX() > 2) {
      final int start=(int)ceil((max(0,visibleRect.getMinX()) - gx0) / gmxdelta);
      final int end=(int)ceil((min(dw,visibleRect.getMaxX()) - gx0) / gmxdelta);
      for (int i=start; i < end; i++) {
        double x=gx0 + i * gmxdelta;
        double x1=x;
        double y1=0;
        double x2=x;
        double y2=dh;
        Point2D p1=t.transform(x1,y1);
        Point2D p2=t.transform(x2,y2);
        major.add(new MoveTo(Math.round(p1.getX()) + 0.5,p1.getY()));
        major.add(new LineTo(Math.round(p2.getX()) + 0.5,p2.getY()));
      }
    }
    if (scaled.getY() > 2) {
      final int start=(int)ceil((max(0,visibleRect.getMinY()) - gy0) / gmydelta);
      final int end=(int)Math.ceil((min(dh,visibleRect.getMaxY()) - gy0) / gmydelta);
      for (int i=start; i < end; i++) {
        double y=gy0 + i * gmydelta;
        double x1=0;
        double y1=y;
        double x2=dw;
        double y2=y;
        Point2D p1=t.transform(x1,y1);
        Point2D p2=t.transform(x2,y2);
        major.add(new MoveTo(p1.getX(),Math.round(p1.getY()) + 0.5));
        major.add(new LineTo(p2.getX(),Math.round(p2.getY()) + 0.5));
      }
    }
  }
}
