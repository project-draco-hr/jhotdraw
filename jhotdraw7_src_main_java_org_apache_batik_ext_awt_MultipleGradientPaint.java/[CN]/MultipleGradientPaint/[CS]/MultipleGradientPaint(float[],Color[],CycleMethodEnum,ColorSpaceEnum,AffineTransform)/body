{
  if (fractions == null) {
    throw new IllegalArgumentException("Fractions array cannot be " + "null");
  }
  if (colors == null) {
    throw new IllegalArgumentException("Colors array cannot be null");
  }
  if (fractions.length != colors.length) {
    throw new IllegalArgumentException("Colors and fractions must " + "have equal size");
  }
  if (colors.length < 2) {
    throw new IllegalArgumentException("User must specify at least " + "2 colors");
  }
  if ((colorSpace != LINEAR_RGB) && (colorSpace != SRGB)) {
    throw new IllegalArgumentException("Invalid colorspace for " + "interpolation.");
  }
  if ((cycleMethod != NO_CYCLE) && (cycleMethod != REFLECT) && (cycleMethod != REPEAT)) {
    throw new IllegalArgumentException("Invalid cycle method.");
  }
  if (gradientTransform == null) {
    throw new IllegalArgumentException("Gradient transform cannot be " + "null.");
  }
  this.fractions=new float[fractions.length];
  System.arraycopy(fractions,0,this.fractions,0,fractions.length);
  this.colors=new Color[colors.length];
  System.arraycopy(colors,0,this.colors,0,colors.length);
  this.colorSpace=colorSpace;
  this.cycleMethod=cycleMethod;
  this.gradientTransform=(AffineTransform)gradientTransform.clone();
  boolean opaque=true;
  for (int i=0; i < colors.length; i++) {
    opaque=opaque && (colors[i].getAlpha() == 0xff);
  }
  if (opaque) {
    transparency=OPAQUE;
  }
 else {
    transparency=TRANSLUCENT;
  }
}
