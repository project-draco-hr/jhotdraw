{
  if (DEBUG) {
    System.out.println(this + ".importData");
  }
  boolean retValue;
  if (comp instanceof DrawingView) {
    final DrawingView view=(DrawingView)comp;
    final Drawing drawing=view.getDrawing();
    if (drawing.getInputFormats() == null || drawing.getInputFormats().size() == 0) {
      if (DEBUG) {
        System.out.println(this + ".importData failed - drawing has no import formats");
      }
      retValue=false;
    }
 else {
      retValue=false;
      try {
        SearchLoop:         for (        InputFormat format : drawing.getInputFormats()) {
          for (          DataFlavor flavor : t.getTransferDataFlavors()) {
            if (DEBUG) {
              System.out.println(this + ".importData trying to match " + format+ " to flavor "+ flavor);
            }
            if (format.isDataFlavorSupported(flavor)) {
              if (DEBUG) {
                System.out.println(this + ".importData importing flavor " + flavor);
              }
              LinkedList<Figure> existingFigures=new LinkedList<Figure>(drawing.getChildren());
              format.read(t,drawing,false);
              final LinkedList<Figure> importedFigures=new LinkedList<Figure>(drawing.getChildren());
              importedFigures.removeAll(existingFigures);
              view.clearSelection();
              view.addToSelection(importedFigures);
              drawing.fireUndoableEditHappened(new AbstractUndoableEdit(){
                public String getPresentationName(){
                  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");
                  return labels.getString("edit.paste.text");
                }
                public void undo() throws CannotUndoException {
                  super.undo();
                  drawing.removeAll(importedFigures);
                }
                public void redo() throws CannotRedoException {
                  super.redo();
                  drawing.addAll(importedFigures);
                }
              }
);
              retValue=true;
              break SearchLoop;
            }
          }
        }
        if (retValue == false && t.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
          final java.util.List<File> files=(java.util.List<File>)t.getTransferData(DataFlavor.javaFileListFlavor);
          retValue=true;
          final LinkedList<Figure> existingFigures=new LinkedList<Figure>(drawing.getChildren());
          view.getEditor().setEnabled(false);
          new Worker(){
            @Override public Object construct(){
              try {
                for (                File file : files) {
                  FileFormatLoop:                   for (                  InputFormat format : drawing.getInputFormats()) {
                    if (file.isFile() && format.getFileFilter().accept(file)) {
                      if (DEBUG) {
                        System.out.println(this + ".importData importing file " + file);
                      }
                      format.read(file,drawing,false);
                    }
                  }
                }
                return new LinkedList<Figure>(drawing.getChildren());
              }
 catch (              Throwable t) {
                return t;
              }
            }
            @Override public void finished(            Object value){
              if (value instanceof Throwable) {
                ((Throwable)value).printStackTrace();
              }
 else {
                final LinkedList<Figure> importedFigures=(LinkedList<Figure>)value;
                importedFigures.removeAll(existingFigures);
                importedFigures.removeAll(existingFigures);
                if (importedFigures.size() > 0) {
                  view.clearSelection();
                  view.addToSelection(importedFigures);
                  drawing.fireUndoableEditHappened(new AbstractUndoableEdit(){
                    public String getPresentationName(){
                      ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");
                      return labels.getString("edit.paste.text");
                    }
                    public void undo() throws CannotUndoException {
                      super.undo();
                      drawing.removeAll(importedFigures);
                    }
                    public void redo() throws CannotRedoException {
                      super.redo();
                      drawing.addAll(importedFigures);
                    }
                  }
);
                }
              }
              view.getEditor().setEnabled(true);
            }
          }
.start();
        }
      }
 catch (      Throwable e) {
        if (DEBUG) {
          e.printStackTrace();
        }
      }
    }
  }
 else {
    retValue=super.importData(comp,t);
  }
  return retValue;
}
