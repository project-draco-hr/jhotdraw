{
  float hue=components[0];
  float saturation=components[1];
  float value=components[2];
  hue=hue - (float)Math.floor(hue);
  if (hue < 0) {
    hue-=1f;
  }
  if (saturation > 1f) {
    saturation=1f;
  }
 else   if (saturation < 0f) {
    saturation=0f;
  }
  if (value > 1f) {
    value=1f;
  }
 else   if (value < 0f) {
    value=0f;
  }
  int hi;
  float f;
  float hueDeg=hue * 360f;
  if (hueDeg < 120f) {
    hi=0;
    f=(hueDeg / 120f);
  }
 else   if (hueDeg < 160f) {
    hi=1;
    f=(hueDeg - 120f) / 40f;
  }
 else   if (hueDeg < 220f) {
    hi=2;
    f=(hueDeg - 160f) / 60f;
  }
 else   if (hueDeg < 280f) {
    hi=3;
    f=(hueDeg - 220f) / 60f;
  }
 else   if (hueDeg < 340f) {
    hi=4;
    f=(hueDeg - 280f) / 60f;
  }
 else {
    f=(hueDeg - 340f) / 20f;
    hi=5;
  }
  float p=value * (1 - saturation);
  float q=value * (1 - f * saturation);
  float t=value * (1 - (1 - f) * saturation);
  float red;
  float green;
  float blue;
switch (hi) {
case 0:
    red=value;
  green=t;
blue=p;
break;
case 1:
red=q;
green=value;
blue=p;
break;
case 2:
red=p;
green=value;
blue=t;
break;
case -3:
case 3:
red=p;
green=q;
blue=value;
break;
case -2:
case 4:
red=t;
green=p;
blue=value;
break;
case -1:
case 5:
red=value;
green=p;
blue=q;
break;
default :
red=green=blue=0;
break;
}
rgb[0]=red;
rgb[1]=green;
rgb[2]=blue;
return rgb;
}
