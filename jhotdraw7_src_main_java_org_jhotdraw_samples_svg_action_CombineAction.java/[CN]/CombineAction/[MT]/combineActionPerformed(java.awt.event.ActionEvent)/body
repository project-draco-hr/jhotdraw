{
  final DrawingView view=getView();
  Drawing drawing=view.getDrawing();
  if (canGroup()) {
    final List<Figure> ungroupedPaths=drawing.sort(view.getSelectedFigures());
    final int[] ungroupedPathsIndices=new int[ungroupedPaths.size()];
    final int[] ungroupedPathsChildCounts=new int[ungroupedPaths.size()];
    int i=0;
    for (    Figure f : ungroupedPaths) {
      ungroupedPathsIndices[i]=drawing.indexOf(f);
      ungroupedPathsChildCounts[i]=((CompositeFigure)f).getChildCount();
      i++;
    }
    final CompositeFigure group=(CompositeFigure)prototype.clone();
    combinePaths(view,group,ungroupedPaths,ungroupedPathsIndices[0]);
    UndoableEdit edit=new AbstractUndoableEdit(){
      @Override public String getPresentationName(){
        return labels.getString("selectionCombine");
      }
      @Override public void redo() throws CannotRedoException {
        super.redo();
        combinePaths(view,group,ungroupedPaths,ungroupedPathsIndices[0]);
      }
      @Override public void undo() throws CannotUndoException {
        super.undo();
        splitPath(view,group,ungroupedPaths,ungroupedPathsIndices,ungroupedPathsChildCounts);
      }
      @Override public boolean addEdit(      UndoableEdit anEdit){
        return super.addEdit(anEdit);
      }
    }
;
    fireUndoableEditHappened(edit);
  }
}
