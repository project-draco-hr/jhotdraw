{
  if (pushedBack) {
    pushedBack=false;
    return ttype;
  }
  byte ct[]=ctype;
  sval=null;
  int c=peekc;
  if (c < 0)   c=NEED_CHAR;
  if (c == SKIP_LF) {
    c=read();
    if (c < 0) {
      startpos=endpos=readpos - 1;
      return ttype=TT_EOF;
    }
    if (c == '\n')     c=NEED_CHAR;
  }
  if (c == NEED_CHAR) {
    c=read();
    if (c < 0) {
      startpos=endpos=readpos - 1;
      return ttype=TT_EOF;
    }
  }
  ttype=c;
  peekc=NEED_CHAR;
  int ctype=c < 256 ? ct[c] : CT_ALPHA;
  while ((ctype & CT_WHITESPACE) != 0) {
    if (c == '\r') {
      LINENO++;
      if (eolIsSignificantP) {
        peekc=SKIP_LF;
        startpos=endpos=readpos - 1;
        return ttype=TT_EOL;
      }
      c=read();
      if (c == '\n')       c=read();
    }
 else {
      if (c == '\n') {
        LINENO++;
        if (eolIsSignificantP) {
          startpos=endpos=readpos - 1;
          return ttype=TT_EOL;
        }
      }
      c=read();
    }
    if (c < 0) {
      startpos=endpos=readpos;
      return ttype=TT_EOF;
    }
    ctype=c < 256 ? ct[c] : CT_ALPHA;
  }
  startpos=readpos - 1;
  hex:   if (((ctype & CT_DIGIT) != 0) && c == '0' && isParseHexNumbers) {
    c=read();
    if (c == 'x') {
      int digits=0;
      long hval=0;
      while (digits < 16) {
        c=read();
        if (c >= '0' && c <= '9') {
          hval=(hval << 4) | (c - '0');
        }
 else         if (c >= 'A' && c <= 'F') {
          hval=(hval << 4) | (c - 'A' + 10);
        }
 else         if (c >= 'a' && c <= 'f') {
          hval=(hval << 4) | (c - 'a' + 10);
        }
 else {
          unread(c);
          if (digits == 0) {
            sval="0x";
            endpos=readpos - 1;
            return ttype=TT_WORD;
          }
 else {
            nval=(double)hval;
            endpos=readpos - 1;
            return ttype=TT_NUMBER;
          }
        }
        digits++;
      }
      nval=(double)hval;
      endpos=readpos - 1;
      return ttype=TT_NUMBER;
    }
 else {
      unread(c);
    }
  }
  digit:   if ((ctype & CT_DIGIT) != 0) {
    int digits=0;
    boolean neg=false;
    if (c == '-') {
      c=read();
      if (c != '.' && (c < '0' || c > '9')) {
        peekc=c;
        if (('-' & CT_ALPHA) != 0) {
          unread(c);
          c='-';
          break digit;
        }
 else {
          endpos=readpos - 1;
          return ttype='-';
        }
      }
      neg=true;
    }
    double v=0;
    int decexp=0;
    int seendot=0;
    while (true) {
      if (c == '.' && seendot == 0)       seendot=1;
 else       if ('0' <= c && c <= '9') {
        digits++;
        v=v * 10 + (c - '0');
        decexp+=seendot;
      }
 else       break;
      c=read();
    }
    peekc=c;
    if (decexp != 0) {
      double denom=10;
      decexp--;
      while (decexp > 0) {
        denom*=10;
        decexp--;
      }
      v=v / denom;
    }
    nval=neg ? -v : v;
    endpos=(c == -1) ? readpos - 1 : readpos - 2;
    if (digits == 0) {
      if (('.' & CT_ALPHA) != 0) {
        unread(c);
        if (neg) {
          unread('.');
          c='-';
        }
 else {
          read();
          c='.';
        }
        break digit;
      }
 else {
        return ttype='.';
      }
    }
 else {
      if (isParseExponents) {
        if (c == 'E' || c == 'e') {
          c=read();
          digits=0;
          neg=false;
          if (c == '-') {
            c=read();
            if (c < '0' || c > '9') {
              unread(c);
              unread('E');
              return ttype=TT_NUMBER;
            }
            neg=true;
          }
          v=0;
          decexp=0;
          while (true) {
            if ('0' <= c && c <= '9') {
              digits++;
              v=v * 10 + (c - '0');
            }
 else {
              break;
            }
            c=read();
          }
          peekc=c;
          nval*=Math.pow(10,(neg) ? -v : v);
        }
      }
      return ttype=TT_NUMBER;
    }
  }
  if ((ctype & CT_ALPHA) != 0) {
    int i=0;
    do {
      if (i >= buf.length) {
        char nb[]=new char[buf.length * 2];
        System.arraycopy(buf,0,nb,0,buf.length);
        buf=nb;
      }
      buf[i++]=(char)c;
      c=read();
      ctype=c < 0 ? CT_WHITESPACE : c < 256 ? ct[c] : CT_ALPHA;
    }
 while ((ctype & (CT_ALPHA | CT_DIGIT)) != 0);
    peekc=c;
    sval=String.copyValueOf(buf,0,i);
    if (forceLower)     sval=sval.toLowerCase();
    endpos=(c == -1) ? readpos - 1 : readpos - 2;
    return ttype=TT_WORD;
  }
  if ((ctype & CT_QUOTE) != 0) {
    ttype=c;
    int i=0;
    int d=read();
    while (d >= 0 && d != ttype && d != '\n' && d != '\r') {
      if (d == '\\') {
        c=read();
        int first=c;
        if (c >= '0' && c <= '7') {
          c=c - '0';
          int c2=read();
          if ('0' <= c2 && c2 <= '7') {
            c=(c << 3) + (c2 - '0');
            c2=read();
            if ('0' <= c2 && c2 <= '7' && first <= '3') {
              c=(c << 3) + (c2 - '0');
              d=read();
            }
 else             d=c2;
          }
 else           d=c2;
        }
 else {
switch (c) {
case 'a':
            c=0x7;
          break;
case 'b':
        c='\b';
      break;
case 'f':
    c=0xC;
  break;
case 'n':
c='\n';
break;
case 'r':
c='\r';
break;
case 't':
c='\t';
break;
case 'v':
c=0xB;
break;
}
d=read();
}
}
 else {
c=d;
d=read();
}
if (i >= buf.length) {
char nb[]=new char[buf.length * 2];
System.arraycopy(buf,0,nb,0,buf.length);
buf=nb;
}
buf[i++]=(char)c;
}
peekc=(d == ttype) ? NEED_CHAR : d;
sval=String.copyValueOf(buf,0,i);
endpos=readpos - 2;
return ttype;
}
if (slashSlashCommentsP && c == slashSlash[0] || slashStarCommentsP && c == slashStar[0]) {
if (c == slashStar[0] && slashStar.length == 1) {
while ((c=read()) != starSlash[0]) {
if (c == '\r') {
LINENO++;
c=read();
if (c == '\n') {
c=read();
}
}
 else {
if (c == '\n') {
LINENO++;
c=read();
}
}
if (c < 0) {
endpos=readpos;
return ttype=TT_EOF;
}
}
return nextToken();
}
 else if (c == slashSlash[0] && slashSlash.length == 1) {
while ((c=read()) != '\n' && c != '\r' && c >= 0) ;
peekc=c;
return nextToken();
}
 else {
c=read();
if (c == slashStar[1] && slashStarCommentsP) {
int prevc=0;
while ((c=read()) != starSlash[1] || prevc != starSlash[0]) {
if (c == '\r') {
LINENO++;
c=read();
if (c == '\n') {
c=read();
}
}
 else {
if (c == '\n') {
LINENO++;
c=read();
}
}
if (c < 0) {
endpos=readpos;
return ttype=TT_EOF;
}
prevc=c;
}
return nextToken();
}
 else if (c == slashSlash[1] && slashSlashCommentsP) {
while ((c=read()) != '\n' && c != '\r' && c >= 0) ;
peekc=c;
return nextToken();
}
 else {
if ((ct[slashSlash[0]] & CT_COMMENT) != 0) {
while ((c=read()) != '\n' && c != '\r' && c >= 0) ;
peekc=c;
return nextToken();
}
 else {
peekc=c;
endpos=readpos - 2;
return ttype=slashSlash[0];
}
}
}
}
if ((ctype & CT_COMMENT) != 0) {
while ((c=read()) != '\n' && c != '\r' && c >= 0) ;
peekc=c;
return nextToken();
}
endpos=readpos - 1;
return ttype=c;
}
