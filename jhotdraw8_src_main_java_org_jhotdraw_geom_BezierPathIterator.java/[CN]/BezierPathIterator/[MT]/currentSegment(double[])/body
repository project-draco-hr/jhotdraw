{
  int numCoords=0;
  int type=0;
  if (index == path.size()) {
    if (path.size() > 1) {
      BezierPath.Node previous=path.get(path.size() - 1);
      BezierPath.Node current=path.get(0);
      if ((previous.mask & BezierPath.C2_MASK) == 0) {
        if ((current.mask & BezierPath.C1_MASK) == 0) {
          numCoords=1;
          type=SEG_LINETO;
          coords[0]=current.x[0];
          coords[1]=current.y[0];
        }
 else {
          numCoords=2;
          type=SEG_QUADTO;
          coords[0]=current.x[1];
          coords[1]=current.y[1];
          coords[2]=current.x[0];
          coords[3]=current.y[0];
        }
      }
 else {
        if ((current.mask & BezierPath.C1_MASK) == 0) {
          numCoords=2;
          type=SEG_QUADTO;
          coords[0]=previous.x[2];
          coords[1]=previous.y[2];
          coords[2]=current.x[0];
          coords[3]=current.y[0];
        }
 else {
          numCoords=3;
          type=SEG_CUBICTO;
          coords[0]=previous.x[2];
          coords[1]=previous.y[2];
          coords[2]=current.x[1];
          coords[3]=current.y[1];
          coords[4]=current.x[0];
          coords[5]=current.y[0];
        }
      }
    }
  }
 else   if (index > path.size()) {
    return SEG_CLOSE;
  }
 else   if (index == 0) {
    BezierPath.Node current=path.get(index);
    coords[0]=current.x[0];
    coords[1]=current.y[0];
    numCoords=1;
    type=SEG_MOVETO;
  }
 else   if (index < path.size()) {
    BezierPath.Node current=path.get(index);
    BezierPath.Node previous=path.get(index - 1);
    if ((previous.mask & BezierPath.C2_MASK) == 0) {
      if ((current.mask & BezierPath.C1_MASK) == 0) {
        numCoords=1;
        type=SEG_LINETO;
        coords[0]=current.x[0];
        coords[1]=current.y[0];
      }
 else {
        numCoords=2;
        type=SEG_QUADTO;
        coords[0]=current.x[1];
        coords[1]=current.y[1];
        coords[2]=current.x[0];
        coords[3]=current.y[0];
      }
    }
 else {
      if ((current.mask & BezierPath.C1_MASK) == 0) {
        numCoords=2;
        type=SEG_QUADTO;
        coords[0]=previous.x[2];
        coords[1]=previous.y[2];
        coords[2]=current.x[0];
        coords[3]=current.y[0];
      }
 else {
        numCoords=3;
        type=SEG_CUBICTO;
        coords[0]=previous.x[2];
        coords[1]=previous.y[2];
        coords[2]=current.x[1];
        coords[3]=current.y[1];
        coords[4]=current.x[0];
        coords[5]=current.y[0];
      }
    }
  }
  if (affine != null) {
    affine.transform(coords,0,coords,0,numCoords);
  }
 else {
    System.arraycopy(coords,0,coords,0,numCoords);
  }
  return type;
}
