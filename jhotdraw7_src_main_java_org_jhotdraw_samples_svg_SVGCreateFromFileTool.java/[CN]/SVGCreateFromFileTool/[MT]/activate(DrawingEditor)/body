{
  super.activate(editor);
  if (workerThread != null) {
    try {
      workerThread.join();
    }
 catch (    InterruptedException ex) {
    }
  }
  if (getFileChooser().showOpenDialog(getView().getComponent()) == JFileChooser.APPROVE_OPTION) {
    final File file=getFileChooser().getSelectedFile();
    Worker worker;
    if (file.getName().toLowerCase().endsWith(".svg") || file.getName().toLowerCase().endsWith(".svgz")) {
      prototype=groupPrototype;
      worker=new Worker(){
        public Object construct(){
          Drawing drawing=new DefaultDrawing();
          try {
            InputFormat in=(file.getName().toLowerCase().endsWith(".svg")) ? new SVGInputFormat() : new SVGZInputFormat();
            in.read(file,drawing);
          }
 catch (          Throwable t) {
            return t;
          }
          return drawing;
        }
        public void finished(        Object value){
          if (value instanceof Throwable) {
            Throwable t=(Throwable)value;
            JOptionPane.showMessageDialog(getView().getComponent(),t.getMessage(),null,JOptionPane.ERROR_MESSAGE);
            getDrawing().remove(createdFigure);
            fireToolDone();
          }
 else {
            Drawing drawing=(Drawing)value;
            CompositeFigure parent;
            if (createdFigure == null) {
              parent=(CompositeFigure)prototype;
              for (              Figure f : drawing.getChildren()) {
                parent.basicAdd(f);
              }
            }
 else {
              parent=(CompositeFigure)createdFigure;
              parent.willChange();
              for (              Figure f : drawing.getChildren()) {
                parent.add(f);
              }
              parent.changed();
            }
          }
        }
      }
;
    }
 else {
      prototype=imagePrototype;
      final ImageHolderFigure loaderFigure=((ImageHolderFigure)prototype.clone());
      worker=new Worker(){
        public Object construct(){
          try {
            ((ImageHolderFigure)loaderFigure).loadImage(file);
          }
 catch (          Throwable t) {
            return t;
          }
          return null;
        }
        public void finished(        Object value){
          if (value instanceof Throwable) {
            Throwable t=(Throwable)value;
            JOptionPane.showMessageDialog(getView().getComponent(),t.getMessage(),null,JOptionPane.ERROR_MESSAGE);
            getDrawing().remove(createdFigure);
            fireToolDone();
          }
 else {
            try {
              if (createdFigure == null) {
                ((ImageHolderFigure)prototype).setImage(loaderFigure.getImageData(),loaderFigure.getBufferedImage());
              }
 else {
                ((ImageHolderFigure)createdFigure).setImage(loaderFigure.getImageData(),loaderFigure.getBufferedImage());
              }
            }
 catch (            IOException ex) {
              JOptionPane.showMessageDialog(getView().getComponent(),ex.getMessage(),null,JOptionPane.ERROR_MESSAGE);
            }
          }
        }
      }
;
    }
    workerThread=new Thread(worker);
    workerThread.start();
  }
 else {
    if (isToolDoneAfterCreation()) {
      fireToolDone();
    }
  }
}
