{
  if (createdFigure != null) {
    Rectangle2D.Double bounds=createdFigure.getBounds();
    if (bounds.width == 0 && bounds.height == 0) {
      getDrawing().remove(createdFigure);
      if (isToolDoneAfterCreation()) {
        fireToolDone();
      }
    }
 else {
      if (Math.abs(anchor.x - evt.getX()) < minimalSizeTreshold.width && Math.abs(anchor.y - evt.getY()) < minimalSizeTreshold.height) {
        createdFigure.willChange();
        createdFigure.setBounds(constrainPoint(new Point(anchor.x,anchor.y)),constrainPoint(new Point(anchor.x + (int)Math.max(bounds.width,minimalSize.width),anchor.y + (int)Math.max(bounds.height,minimalSize.height))));
        createdFigure.changed();
      }
      if (createdFigure instanceof CompositeFigure) {
        ((CompositeFigure)createdFigure).layout();
      }
      final Figure addedFigure=createdFigure;
      final Drawing addedDrawing=getDrawing();
      getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit(){
        private final static long serialVersionUID=1L;
        @Override public String getPresentationName(){
          return presentationName;
        }
        @Override public void undo() throws CannotUndoException {
          super.undo();
          addedDrawing.remove(addedFigure);
        }
        @Override public void redo() throws CannotRedoException {
          super.redo();
          addedDrawing.add(addedFigure);
        }
      }
);
      Rectangle r=new Rectangle(anchor.x,anchor.y,0,0);
      r.add(evt.getX(),evt.getY());
      maybeFireBoundsInvalidated(r);
      creationFinished(createdFigure);
      createdFigure=null;
    }
  }
 else {
    if (isToolDoneAfterCreation()) {
      fireToolDone();
    }
  }
}
