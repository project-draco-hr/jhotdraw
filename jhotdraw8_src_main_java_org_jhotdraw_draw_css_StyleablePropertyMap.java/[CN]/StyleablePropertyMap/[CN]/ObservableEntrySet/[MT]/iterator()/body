{
  return new Iterator<Entry<K,V>>(){
    private Iterator<Entry<K,StyledValue>> entryIt=backingMap.entrySet().iterator();
    private boolean hasNext;
    private Entry<K,StyledValue> nextEntry;
    private Entry<K,StyledValue> lastEntry;
{
      advance();
    }
    private void advance(){
      while (entryIt.hasNext()) {
        Entry<K,StyledValue> entry=entryIt.next();
        if (entry.getValue().hasValue(oesOrigin)) {
          nextEntry=entry;
          hasNext=true;
          return;
        }
      }
      hasNext=false;
    }
    @Override public boolean hasNext(){
      return hasNext;
    }
    @Override public Entry<K,V> next(){
      lastEntry=nextEntry;
      advance();
      return new ObservableEntry(oesOrigin,lastEntry);
    }
    @Override public void remove(){
      StyleablePropertyMap.this.remove(oesOrigin,lastEntry.getKey());
    }
  }
;
}
